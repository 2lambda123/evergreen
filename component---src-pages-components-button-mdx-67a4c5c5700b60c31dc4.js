(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{977:function(n,t,e){"use strict";e.r(t),e.d(t,"_frontmatter",(function(){return c})),e.d(t,"default",(function(){return u}));e(5),e(6),e(4),e(7),e(2),e(0);var a=e(121),o=e(945),i=e(946);var c={},r={_frontmatter:c},l=o.a;function u(n){var t=n.components,e=function(n,t){if(null==n)return{};var e,a,o={},i=Object.keys(n);for(a=0;a<i.length;a++)e=i[a],t.indexOf(e)>=0||(o[e]=n[e]);return o}(n,["components"]);return Object(a.b)(l,Object.assign({},r,e,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h2",null,"Evergreen exports multiple button components"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"Button"),": most commonly used, can have a icon on the left or right side."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"IconButton"),": a button that holds a single icon."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"BackButton"),": a preset of the ",Object(a.b)("inlineCode",{parentName:"li"},"Button")," component."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"TextDropdownButton"),": a bare-bones button that is used primarily in table headers.")),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"Button"),", ",Object(a.b)("inlineCode",{parentName:"p"},"IconButton")," and ",Object(a.b)("inlineCode",{parentName:"p"},"BackButton")," all share a very similar API and look.\n",Object(a.b)("inlineCode",{parentName:"p"},"TextDropdownButton")," is a bit different."),Object(a.b)("h1",null,"Button"),Object(a.b)("p",null,"The ",Object(a.b)("inlineCode",{parentName:"p"},"Button")," component is the most common button component.\nIt contains a label and optional icons before or after the label."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),'<Button appearance="primary">Hi Evergreen!</Button>\n')),Object(a.b)("h2",null,"All button variations"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx",metastring:"collapse",collapse:!0}),'<Component\n  initialState={{\n    options: [\n      { label: \'Height 24\', value: 24 },\n      { label: \'Height 32\', value: 32 },\n      { label: \'Height 40\', value: 40 }\n    ],\n    value: 32\n  }}\n>\n  {({ state, setState }) => (\n    <React.Fragment>\n      <SegmentedControl\n        name="button-size"\n        width={280}\n        options={state.options}\n        value={state.value}\n        onChange={value => setState({ value: Number(value) })}\n      />\n      <Heading marginTop="default">Default Appearance</Heading>\n      <Pane marginTop={12}>\n        <Button height={state.value} marginRight={16}>\n          Default\n        </Button>\n        <Button height={state.value} marginRight={16} intent="success">\n          Success\n        </Button>\n        <Button height={state.value} marginRight={16} intent="warning">\n          Warning\n        </Button>\n        <Button height={state.value} marginRight={16} intent="danger">\n          Danger\n        </Button>\n        <Button height={state.value} marginRight={16} iconBefore={EditIcon}>\n          Icon Before\n        </Button>\n        <Button height={state.value} iconAfter={ArrowRightIcon}>\n          Icon After\n        </Button>\n      </Pane>\n      <Heading marginTop="default">Primary Appearance</Heading>\n      <Pane marginTop={12}>\n        <Button height={state.value} appearance="primary" marginRight={16}>\n          Default\n        </Button>\n        <Button\n          height={state.value}\n          appearance="primary"\n          marginRight={16}\n          intent="success"\n        >\n          Success\n        </Button>\n        <Button\n          height={state.value}\n          appearance="primary"\n          marginRight={16}\n          intent="warning"\n        >\n          Warning\n        </Button>\n        <Button height={state.value} marginRight={16} appearance="primary" intent="danger">\n          Danger\n        </Button>\n        <Button height={state.value} marginRight={16} appearance="primary" intent="success" iconBefore={AddIcon}>\n          Icon Before\n        </Button>\n        <Button height={state.value} appearance="primary" iconAfter={ArrowRightIcon}>\n          Icon After\n        </Button>\n      </Pane>\n      <Heading marginTop="default">Minimal Appearance</Heading>\n      <Pane marginTop={12}>\n        <Button height={state.value} appearance="minimal" marginRight={16}>\n          Default\n        </Button>\n        <Button\n          height={state.value}\n          appearance="minimal"\n          marginRight={16}\n          intent="success"\n        >\n          Success\n        </Button>\n        <Button\n          height={state.value}\n          appearance="minimal"\n          marginRight={16}\n          intent="warning"\n        >\n          Warning\n        </Button>\n        <Button height={state.value} marginRight={16} appearance="minimal" intent="danger">\n          Danger\n        </Button>\n        <Button height={state.value} marginRight={16} appearance="minimal" iconBefore={EditIcon}>\n          Icon Before\n        </Button>\n        <Button height={state.value} appearance="minimal" iconAfter={CaretDownIcon}>\n          Icon After\n        </Button>\n      </Pane>\n    </React.Fragment>\n  )}\n</Component>\n')),Object(a.b)("h2",null,"Button Appearances"),Object(a.b)("p",null,"The ",Object(a.b)("inlineCode",{parentName:"p"},"Button")," component has a ",Object(a.b)("inlineCode",{parentName:"p"},"appearance")," property with 3 available values:"),Object(a.b)("h3",null,"Appearances"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"default")," — this is the default."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"primary")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"minimal"))),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),'<>\n  <Button marginRight={16}>Default</Button>\n  <Button marginRight={16} appearance="primary">Primary</Button>\n  <Button marginRight={16} appearance="minimal">Minimal</Button>\n</>\n')),Object(a.b)("h2",null,"Button Intent"),Object(a.b)("p",null,"In addition to the ",Object(a.b)("inlineCode",{parentName:"p"},"appearance")," — a ",Object(a.b)("inlineCode",{parentName:"p"},"Button")," can also have a ",Object(a.b)("inlineCode",{parentName:"p"},"intent")," property.\nThe ",Object(a.b)("inlineCode",{parentName:"p"},"intent")," property is a slightly abstract API that maps to the following values:"),Object(a.b)("h3",null,"Intent"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"none")," — this is the default."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"success")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"warning")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"danger"))),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),'<>\n  <Button marginRight={16} intent="none">None</Button>\n  <Button marginRight={16} intent="success">Success</Button>\n  <Button marginRight={16} intent="warning">Warning</Button>\n  <Button marginRight={16} intent="danger">Danger</Button>\n</>\n')),Object(a.b)("h2",null,"Mixing appearance and intent"),Object(a.b)("p",null,"The ",Object(a.b)("inlineCode",{parentName:"p"},"intent")," property works with any ",Object(a.b)("inlineCode",{parentName:"p"},"appearance"),"."),Object(a.b)("h3",null,"Primary with Intent"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),'<>\n  <Button marginRight={16} appearance="primary" intent="none">None</Button>\n  <Button marginRight={16} appearance="primary" intent="success">Success</Button>\n  <Button marginRight={16} appearance="primary" intent="warning">Warning</Button>\n  <Button marginRight={16} appearance="primary" intent="danger">Danger</Button>\n</>\n')),Object(a.b)("h3",null,"Minimal with Intent"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),'<>\n  <Button marginRight={16} appearance="minimal" intent="none">None</Button>\n  <Button marginRight={16} appearance="minimal" intent="success">Success</Button>\n  <Button marginRight={16} appearance="minimal" intent="warning">Warning</Button>\n  <Button marginRight={16} appearance="minimal" intent="danger">Danger</Button>\n</>\n')),Object(a.b)("h2",null,"Button Sizes"),Object(a.b)("p",null,"By default buttons and controls have a height of ",Object(a.b)("inlineCode",{parentName:"p"},"32px"),".\nIt is possible to change this to any height and the text style and spacing will adjust.\nYou should however keep the height on the ",Object(a.b)("inlineCode",{parentName:"p"},"8px")," or in some cases the ",Object(a.b)("inlineCode",{parentName:"p"},"4px")," grid.\nYou should only need the following recommended heights."),Object(a.b)("h3",null,"Recommended heights"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"24")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"32")," — default height"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"40"))),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),"<>\n  <Button marginRight={12} height={20}>Height 20</Button>\n  <Button marginRight={12} height={24}>Height 24</Button>\n  <Button marginRight={12} height={32}>Height 32</Button>\n  <Button marginRight={12} height={40}>Height 40</Button>\n  <Button marginRight={12} height={48}>Height 48</Button>\n  <Button marginRight={12} height={56}>Height 56</Button>\n</>\n")),Object(a.b)("h2",null,"Buttons with an Icon"),Object(a.b)("p",null,"Buttons support an icon on either before or after the label. Avoid using two icons in a button."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),'<>\n  <Button marginRight={12} iconBefore={CogIcon}>Settings</Button>\n  <Button marginRight={12} iconBefore={EditIcon}>Edit</Button>\n  <Button marginRight={12} iconBefore={ManualIcon}>Docs</Button>\n  <Button marginRight={12} iconBefore={ArrowLeftIcon}>Back</Button>\n  <Button marginRight={12} iconBefore={DownloadIcon}>Download...</Button>\n  <Button marginRight={12} iconBefore={TrashIcon} intent="danger">Delete...</Button>\n  <Button marginRight={12} iconBefore={SearchIcon}>Search</Button>\n  <Button marginRight={12} iconAfter={CaretDownIcon}>Filter</Button>\n</>\n')),Object(a.b)("div",{id:"api"},Object(a.b)(i.a,{of:"Button",mdxType:"PropsTable"})),Object(a.b)("h1",null,"IconButton"),Object(a.b)("p",null,"For the use case of creating a button with a single icon Evergreen exports the ",Object(a.b)("inlineCode",{parentName:"p"},"IconButton")," component."),Object(a.b)("h2",null,"Simple IconButton example"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),'<IconButton icon={TrashIcon} intent="danger" />\n')),Object(a.b)("h2",null,"Use the height property to resize the icon button"),Object(a.b)("p",null,"Use the ",Object(a.b)("inlineCode",{parentName:"p"},"height")," property on the ",Object(a.b)("inlineCode",{parentName:"p"},"IconButton")," component to resize the component.\nThe icon will automatically resize for the given height."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),"<IconButton icon={CrossIcon} height={40} />\n")),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),"<IconButton icon={CrossIcon} height={24} />\n")),Object(a.b)("h2",null,"Specifically override the icon size"),Object(a.b)("p",null,"In some rare cases you might need to override the icon size.\nUse the ",Object(a.b)("inlineCode",{parentName:"p"},"iconSize")," property to do this."),Object(a.b)("p",null,"This is not a required property, the icon will automatically resize based on the given height."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),'<IconButton appearance="minimal" icon={NotificationsIcon} iconSize={18} />\n')),Object(a.b)("h2",null,"Common icon buttons"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx",metastring:"collapse",collapse:!0}),'<Pane clearfix>\n  <Pane borderRight paddingRight={24} marginRight={24} float="left">\n    <Heading marginBottom={16}>Height 32</Heading>\n    <Pane float="left" marginRight={16}>\n      <IconButton marginBottom={16} icon={CogIcon} />\n      <IconButton marginBottom={16} icon={PlusIcon} />\n      <IconButton marginBottom={16} icon={FilterIcon} />\n      <IconButton marginBottom={16} icon={EditIcon} />\n      <IconButton marginBottom={16} icon={RefreshIcon} />\n    </Pane>\n    <Pane float="left">\n      <IconButton marginBottom={16} appearance="minimal" icon={CrossIcon} />\n      <IconButton marginBottom={16} appearance="minimal" icon={MoreIcon} />\n      <IconButton marginBottom={16} appearance="minimal" icon={PlusIcon} />\n      <IconButton marginBottom={16} appearance="minimal" icon={EditIcon} />\n      <IconButton marginBottom={16} appearance="minimal" icon={SearchIcon} />\n    </Pane>\n  </Pane>\n  <Pane float="left">\n    <Heading marginBottom={16}>Height 24</Heading>\n    <Pane float="left" marginRight={16}>\n      <IconButton marginBottom={16} height={24} icon={CogIcon} />\n      <IconButton marginBottom={16} height={24} icon={PlusIcon} />\n      <IconButton marginBottom={16} height={24} icon={FilterIcon} />\n      <IconButton marginBottom={16} height={24} icon={EditIcon} />\n      <IconButton marginBottom={16} height={24} icon={ChevronLeftIcon} />\n      <IconButton marginBottom={16} height={24} icon={ChevronRightIcon} />\n    </Pane>\n    <Pane float="left" marginRight={16}>\n      <IconButton\n        marginBottom={16}\n        appearance="minimal"\n        height={24}\n        icon={CrossIcon}\n      />\n      <IconButton\n        marginBottom={16}\n        appearance="minimal"\n        height={24}\n        icon={MoreIcon}\n      />\n      <IconButton\n        marginBottom={16}\n        appearance="minimal"\n        height={24}\n        icon={PlusIcon}\n      />\n      <IconButton\n        marginBottom={16}\n        appearance="minimal"\n        height={24}\n        icon={TrashIcon}\n        intent="danger"\n      />\n      <IconButton\n        marginBottom={16}\n        appearance="minimal"\n        height={24}\n        icon={FilterIcon}\n      />\n      <IconButton\n        marginBottom={16}\n        appearance="minimal"\n        height={24}\n        icon={EditIcon}\n      />\n    </Pane>\n    <Pane float="left">\n      <IconButton\n        marginBottom={16}\n        appearance="minimal"\n        height={24}\n        icon={ClipboardIcon}\n      />\n      <IconButton\n        marginBottom={16}\n        appearance="minimal"\n        height={24}\n        icon={CalendarIcon}\n      />\n      <IconButton\n        marginBottom={16}\n        appearance="minimal"\n        height={24}\n        icon={LockIcon}\n      />\n      <IconButton\n        marginBottom={16}\n        appearance="minimal"\n        height={24}\n        icon={UnlockIcon}\n      />\n      <IconButton\n        marginBottom={16}\n        appearance="minimal"\n        height={24}\n        icon={NotificationsIcon}\n      />\n      <IconButton\n        marginBottom={16}\n        appearance="minimal"\n        height={24}\n        icon={ManualIcon}\n      />\n    </Pane>\n  </Pane>\n</Pane>\n')),Object(a.b)(i.a,{of:"IconButton",mdxType:"PropsTable"}),Object(a.b)("h1",null,"BackButton component"),Object(a.b)("p",null,"The ",Object(a.b)("inlineCode",{parentName:"p"},"BackButton")," component is a preset based on the ",Object(a.b)("inlineCode",{parentName:"p"},"Button")," component."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),"<BackButton />\n")),Object(a.b)(i.a,{of:"BackButton",mdxType:"PropsTable"}),Object(a.b)("h1",null,"Buttons as links"),Object(a.b)("p",null,"Buttons can be used as links by using the optional ",Object(a.b)("inlineCode",{parentName:"p"},"is")," property with a value such as ",Object(a.b)("inlineCode",{parentName:"p"},"Link")," from ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"https://github.com/ReactTraining/react-router"}),"react-router"),", or an ",Object(a.b)("inlineCode",{parentName:"p"},"a")," tag."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),'<Button is="a" href="#">Link</Button>\n')),Object(a.b)("h1",null,"TextDropdownButton component"),Object(a.b)("p",null,"The ",Object(a.b)("inlineCode",{parentName:"p"},"TextDropdownButton")," is different from the other types of buttons.\nIt doesn’t work with a height, instead the dimensions are based on the text size.\nThis component is used inside of table header cells."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),"<Pane>\n  <TextDropdownButton marginRight={16}>Table Header</TextDropdownButton>\n  <TextDropdownButton marginRight={16} icon={ArrowUpIcon}>Ascending</TextDropdownButton>\n  <TextDropdownButton icon={ArrowDownIcon}>Descending</TextDropdownButton>\n</Pane>\n")),Object(a.b)(i.a,{of:"TextDropdownButton",mdxType:"PropsTable"}))}u.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-components-button-mdx-67a4c5c5700b60c31dc4.js.map