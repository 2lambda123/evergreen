{"data":{"allComponentMetadata":{"edges":[{"node":{"displayName":"Avatar","description":null,"props":[{"name":"src","docblock":"The src attribute of the image.\nWhen it's not available, render initials instead.","type":{"name":"string","value":null,"raw":null},"required":false},{"name":"size","docblock":"The size of the avatar.","type":{"name":"number","value":null,"raw":null},"required":false},{"name":"name","docblock":"The name used for the initials and title attribute.","type":{"name":"string","value":null,"raw":null},"required":false},{"name":"hashValue","docblock":"The value used for the hash function.\nThe name is used as the hashValue by default.\nWhen dealing with anonymous users you should use the id instead.","type":{"name":"string","value":null,"raw":null},"required":false},{"name":"isSolid","docblock":"When true, render a solid avatar.","type":{"name":"bool","value":null,"raw":null},"required":false},{"name":"color","docblock":"The color used for the avatar.\nWhen the value is `automatic`, use the hash function to determine the color.","type":{"name":"string","value":null,"raw":null},"required":false},{"name":"getInitials","docblock":"Function to get the initials based on the name.","type":{"name":"func","value":null,"raw":null},"required":false},{"name":"forceShowInitials","docblock":"When true, force show the initials.\nThis is useful in some cases when using Gravatar and transparent pngs.","type":{"name":"bool","value":null,"raw":null},"required":false},{"name":"sizeLimitOneCharacter","docblock":"When the size is smaller than this number, use a single initial for the avatar.","type":{"name":"number","value":null,"raw":null},"required":false},{"name":"theme","docblock":"Theme provided by ThemeProvider.","type":{"name":"object","value":null,"raw":null},"required":true}]}},{"node":{"displayName":"StoryHeader","description":null,"props":[]}},{"node":{"displayName":"StoryHeading","description":null,"props":[]}},{"node":{"displayName":"StoryDescription","description":null,"props":[]}},{"node":{"displayName":"Alert","description":null,"props":[{"name":"children","docblock":"The content of the alert. When a string is passed it is wrapped in a `<Text size={400} />` component.","type":{"name":"union","value":[{"name":"string"},{"name":"node"}],"raw":null},"required":false},{"name":"intent","docblock":"The intent of the alert.","type":{"name":"enum","value":[{"value":"'none'","computed":false},{"value":"'success'","computed":false},{"value":"'warning'","computed":false},{"value":"'danger'","computed":false}],"raw":null},"required":false},{"name":"title","docblock":"The title of the alert.","type":{"name":"node","value":null,"raw":null},"required":false},{"name":"hasTrim","docblock":"When true, show a border on the left matching the type.","type":{"name":"bool","value":null,"raw":null},"required":false},{"name":"hasIcon","docblock":"When true, show a icon on the left matching the type,","type":{"name":"bool","value":null,"raw":null},"required":false},{"name":"isRemoveable","docblock":"When true, show a remove icon button.","type":{"name":"bool","value":null,"raw":null},"required":false},{"name":"onRemove","docblock":"Function called when the remove button is clicked.","type":{"name":"func","value":null,"raw":null},"required":false},{"name":"appearance","docblock":"The appearance of the alert.","type":{"name":"enum","value":[{"value":"'default'","computed":false},{"value":"'card'","computed":false}],"raw":null},"required":false},{"name":"theme","docblock":"Theme provided by ThemeProvider.","type":{"name":"object","value":null,"raw":null},"required":true}]}},{"node":{"displayName":"InlineAlert","description":null,"props":[{"name":"children","docblock":"The content of the alert.","type":{"name":"union","value":[{"name":"string"},{"name":"node"}],"raw":null},"required":false},{"name":"intent","docblock":"The intent of the alert. This should always be set explicitly.","type":{"name":"enum","value":[{"value":"'none'","computed":false},{"value":"'success'","computed":false},{"value":"'warning'","computed":false},{"value":"'danger'","computed":false}],"raw":null},"required":false},{"name":"hasIcon","docblock":"When true, show a icon on the left matching the type.\nThere is no point not showing this.","type":{"name":"bool","value":null,"raw":null},"required":false},{"name":"size","docblock":"The size of the Text.","type":{"name":"number","value":null,"raw":null},"required":false},{"name":"theme","docblock":"Theme provided by ThemeProvider.","type":{"name":"object","value":null,"raw":null},"required":true}]}},{"node":{"displayName":"Badge","description":null,"props":[{"name":"color","docblock":"The color used for the avatar.\nWhen the value is `automatic`, use the hash function to determine the color.","type":{"name":"string","value":null,"raw":null},"required":false},{"name":"theme","docblock":"Theme provided by ThemeProvider.","type":{"name":"object","value":null,"raw":null},"required":true},{"name":"isSolid","docblock":"","type":null,"required":false}]}},{"node":{"displayName":"Pill","description":null,"props":[]}},{"node":{"displayName":"autocompleteItemRenderer","description":null,"props":[]}},{"node":{"displayName":"Autocomplete","description":null,"props":[{"name":"title","docblock":"This prop can be either a string or a Node.\nIt will provide a title for the items","type":{"name":"union","value":[{"name":"string"},{"name":"node"}],"raw":null},"required":false},{"name":"items","docblock":"An array of items to be used as options for the select","type":{"name":"array","value":null,"raw":null},"required":true},{"name":"selectedItem","docblock":"The selected Item to be shown on the autocomplete","type":{"name":"any","value":null,"raw":null},"required":false},{"name":"defaultSelectedItem","docblock":"The selected item to be selected & shown by default on the autocomplete","type":{"name":"any","value":null,"raw":null},"required":false},{"name":"itemToString","docblock":"In case the array of items is not an array of strings,\nthis function is used on each item to return the string that will be shown on the filter","type":{"name":"func","value":null,"raw":null},"required":false},{"name":"children","docblock":"Function that will render the 'filter' component.","type":{"name":"func","value":null,"raw":null},"required":true},{"name":"itemSize","docblock":"The height of each item in the list\nBecause the list is virtualized this is required beforehand.","type":{"name":"number","value":null,"raw":null},"required":false},{"name":"renderItem","docblock":"Function that returns a component to render the item","type":{"name":"func","value":null,"raw":null},"required":false},{"name":"position","docblock":"The position of the Popover the Autocomplete is rendered in.","type":{"name":"enum","value":"Object.keys(Position)","raw":null},"required":false},{"name":"itemsFilter","docblock":"A function that is used to filter the items.\nIt should return a subset of the initial items.\nBy default the \"fuzzaldrin-plus\" package is used.","type":{"name":"func","value":null,"raw":null},"required":false},{"name":"isFilterDisabled","docblock":"Prop that enables and disables filtering\nTrue: Enables Filtering\nFalse: Disables Filtering","type":{"name":"bool","value":null,"raw":null},"required":false},{"name":"popoverMinWidth","docblock":"Defines the minimum height the results container will be","type":{"name":"number","value":null,"raw":null},"required":false},{"name":"popoverMaxHeight","docblock":"Defines the maximum height the results container will be","type":{"name":"number","value":null,"raw":null},"required":false}]}},{"node":{"displayName":"AutocompleteItem","description":null,"props":[{"name":"children","docblock":"","type":{"name":"node","value":null,"raw":null},"required":false},{"name":"style","docblock":"","type":{"name":"object","value":null,"raw":null},"required":false},{"name":"isSelected","docblock":"","type":{"name":"bool","value":null,"raw":null},"required":false},{"name":"isHighlighted","docblock":"","type":{"name":"bool","value":null,"raw":null},"required":false}]}},{"node":{"displayName":"CheckIcon","description":null,"props":[{"name":"fill","docblock":"","type":{"name":"string","value":null,"raw":null},"required":false}]}},{"node":{"displayName":"Checkbox","description":null,"props":[{"name":"id","docblock":"The id attribute of the checkbox.","type":{"name":"string","value":null,"raw":null},"required":false},{"name":"name","docblock":"The id attribute of the radio.","type":{"name":"string","value":null,"raw":null},"required":false},{"name":"label","docblock":"Label of the checkbox.","type":{"name":"node","value":null,"raw":null},"required":false},{"name":"value","docblock":"The value attribute of the radio.","type":{"name":"string","value":null,"raw":null},"required":false},{"name":"checked","docblock":"The checked attribute of the radio.","type":{"name":"bool","value":null,"raw":null},"required":false},{"name":"onChange","docblock":"Function called when state changes.","type":{"name":"func","value":null,"raw":null},"required":false},{"name":"disabled","docblock":"When true, the radio is disabled.","type":{"name":"bool","value":null,"raw":null},"required":false},{"name":"isInvalid","docblock":"When true, the aria-invalid attribute is true.\nUsed for accessibility.","type":{"name":"bool","value":null,"raw":null},"required":false},{"name":"appearance","docblock":"The appearance of the checkbox.\nThe default theme only comes with a default style.","type":{"name":"string","value":null,"raw":null},"required":false},{"name":"theme","docblock":"Theme provided by ThemeProvider.","type":{"name":"object","value":null,"raw":null},"required":true}]}},{"node":{"displayName":"ColorCompare","description":null,"props":[{"name":"oldColor","docblock":"","type":{"name":"string","value":null,"raw":null},"required":true},{"name":"oldColorString","docblock":"","type":{"name":"string","value":null,"raw":null},"required":true},{"name":"newColor","docblock":"","type":{"name":"string","value":null,"raw":null},"required":true},{"name":"newColorString","docblock":"","type":{"name":"string","value":null,"raw":null},"required":true}]}},{"node":{"displayName":"Group","description":null,"props":[{"name":"title","docblock":"","type":{"name":"string","value":null,"raw":null},"required":true},{"name":"colors","docblock":"","type":{"name":"array","value":null,"raw":null},"required":false}]}},{"node":{"displayName":"ColorMapping","description":null,"props":[]}},{"node":{"displayName":"ColorGroup","description":null,"props":[{"name":"title","docblock":"","type":{"name":"node","value":null,"raw":null},"required":false},{"name":"colorGroup","docblock":"","type":{"name":"object","value":null,"raw":null},"required":false},{"name":"name","docblock":"","type":{"name":"func","value":null,"raw":null},"required":false}]}},{"node":{"displayName":"ColorExamples","description":null,"props":[]}},{"node":{"displayName":"Swatch","description":null,"props":[{"name":"color","docblock":"","type":{"name":"string","value":null,"raw":null},"required":true},{"name":"name","docblock":"","type":{"name":"string","value":null,"raw":null},"required":true},{"name":"property","docblock":"","type":{"name":"string","value":null,"raw":null},"required":true}]}},{"node":{"displayName":"CornerDialog","description":null,"props":[{"name":"children","docblock":"Children can be a string, node or a function accepting `({ close })`.\nWhen passing a string, <Paragraph size={400} color=\"muted\" /> is used to wrap the string.","type":{"name":"union","value":[{"name":"node"},{"name":"func"}],"raw":null},"required":true},{"name":"intent","docblock":"The intent of the CornerDialog. Used for the button.","type":{"name":"enum","value":[{"value":"'none'","computed":false},{"value":"'success'","computed":false},{"value":"'warning'","computed":false},{"value":"'danger'","computed":false}],"raw":null},"required":false},{"name":"isShown","docblock":"When true, the dialog is shown.","type":{"name":"bool","value":null,"raw":null},"required":false},{"name":"title","docblock":"Title of the Dialog. Titles should use Title Case.","type":{"name":"node","value":null,"raw":null},"required":false},{"name":"onCloseComplete","docblock":"Function that will be called when the exit transition is complete.","type":{"name":"func","value":null,"raw":null},"required":false},{"name":"onOpenComplete","docblock":"Function that will be called when the enter transition is complete.","type":{"name":"func","value":null,"raw":null},"required":false},{"name":"hasFooter","docblock":"When true, the footer with the cancel and confirm button is shown.","type":{"name":"bool","value":null,"raw":null},"required":false},{"name":"onConfirm","docblock":"Function that will be called when the confirm button is clicked.\nThis does not close the Dialog. A close function will be passed\nas a paramater you can use to close the dialog.\n\n`onConfirm={(close) => close()}`","type":{"name":"func","value":null,"raw":null},"required":false},{"name":"confirmLabel","docblock":"Label of the confirm button.","type":{"name":"string","value":null,"raw":null},"required":false},{"name":"hasCancel","docblock":"When true, the cancel button is shown.","type":{"name":"bool","value":null,"raw":null},"required":false},{"name":"onCancel","docblock":"Function that will be called when the cancel button is clicked.\nThis closes the Dialog by default.\n\n`onCancel={(close) => close()}`","type":{"name":"func","value":null,"raw":null},"required":false},{"name":"cancelLabel","docblock":"Label of the cancel button.","type":{"name":"string","value":null,"raw":null},"required":false},{"name":"width","docblock":"Width of the Dialog.","type":{"name":"union","value":[{"name":"string"},{"name":"number"}],"raw":null},"required":false},{"name":"containerProps","docblock":"Props that are passed to the dialog container.","type":{"name":"object","value":null,"raw":null},"required":false}]}},{"node":{"displayName":"LoadingManager","description":null,"props":[{"name":"children","docblock":"","type":{"name":"func","value":null,"raw":null},"required":false}]}},{"node":{"displayName":"BackButton","description":null,"props":[{"name":"children","docblock":"","type":null,"required":false}]}},{"node":{"displayName":"Button","description":null,"props":[{"name":"intent","docblock":"The intent of the button.","type":{"name":"enum","value":[{"value":"'none'","computed":false},{"value":"'success'","computed":false},{"value":"'warning'","computed":false},{"value":"'danger'","computed":false}],"raw":null},"required":false},{"name":"appearance","docblock":"The appearance of the button.","type":{"name":"enum","value":[{"value":"'default'","computed":false},{"value":"'minimal'","computed":false},{"value":"'primary'","computed":false}],"raw":null},"required":false},{"name":"isLoading","docblock":"When true, show a loading spinner before the children.\nThis also disables the button.","type":{"name":"bool","value":null,"raw":null},"required":false},{"name":"isActive","docblock":"Forcefully set the active state of a button.\nUseful in conjuction with a Popover.","type":{"name":"bool","value":null,"raw":null},"required":false},{"name":"iconBefore","docblock":"Sets an icon before the text. Can be any icon from Evergreen.","type":{"name":"string","value":null,"raw":null},"required":false},{"name":"iconAfter","docblock":"Sets an icon after the text. Can be any icon from Evergreen.","type":{"name":"string","value":null,"raw":null},"required":false},{"name":"disabled","docblock":"When true, the button is disabled.\nisLoading also sets the button to disabled.","type":{"name":"bool","value":null,"raw":null},"required":false},{"name":"theme","docblock":"Theme provided by ThemeProvider.","type":{"name":"object","value":null,"raw":null},"required":true},{"name":"className","docblock":"Class name passed to the button.\nOnly use if you know what you are doing.","type":{"name":"string","value":null,"raw":null},"required":false},{"name":"height","docblock":"","type":null,"required":false},{"name":"paddingBottom","docblock":"","type":null,"required":false},{"name":"paddingTop","docblock":"","type":null,"required":false}]}},{"node":{"displayName":"TextDropdownButton","description":null,"props":[{"name":"isActive","docblock":"Forcefully set the active state of a button.\nUseful in conjuction with a Popover.","type":{"name":"bool","value":null,"raw":null},"required":false},{"name":"disabled","docblock":"When true, the button is disabled.\nisLoading also sets the button to disabled.","type":{"name":"bool","value":null,"raw":null},"required":false},{"name":"icon","docblock":"Name of a Blueprint UI icon, or an icon element, to render.\nThis prop is required because it determines the content of the component, but it can\nbe explicitly set to falsy values to render nothing.\n\n- If `null` or `undefined` or `false`, this component will render nothing.\n- If given an `IconName` (a string literal union of all icon names),\n  that icon will be rendered as an `<svg>` with `<path>` tags.\n- If given a `JSX.Element`, that element will be rendered and _all other props on this component are ignored._\n  This type is supported to simplify usage of this component in other Blueprint components.\n  As a consumer, you should never use `<Icon icon={<element />}` directly; simply render `<element />` instead.","type":{"name":"string","value":null,"raw":null},"required":false},{"name":"theme","docblock":"Theme provided by ThemeProvider.","type":{"name":"object","value":null,"raw":null},"required":true},{"name":"className","docblock":"Class name passed to the button.\nOnly use if you know what you are doing.","type":{"name":"string","value":null,"raw":null},"required":false}]}},{"node":{"displayName":"IconButton","description":null,"props":[{"name":"icon","docblock":"Name of a Blueprint UI icon, or an icon element, to render.\nThis prop is required because it determines the content of the component, but it can\nbe explicitly set to falsy values to render nothing.\n\n- If `null` or `undefined` or `false`, this component will render nothing.\n- If given an `IconName` (a string literal union of all icon names),\n  that icon will be rendered as an `<svg>` with `<path>` tags.\n- If given a `JSX.Element`, that element will be rendered and _all other props on this component are ignored._\n  This type is supported to simplify usage of this component in other Blueprint components.\n  As a consumer, you should never use `<Icon icon={<element />}` directly; simply render `<element />` instead.","type":{"name":"string","value":null,"raw":null},"required":false},{"name":"intent","docblock":"The intent of the button.","type":{"name":"enum","value":[{"value":"'none'","computed":false},{"value":"'success'","computed":false},{"value":"'warning'","computed":false},{"value":"'danger'","computed":false}],"raw":null},"required":false},{"name":"appearance","docblock":"The appearance of the button.","type":{"name":"enum","value":[{"value":"'default'","computed":false},{"value":"'minimal'","computed":false},{"value":"'primary'","computed":false}],"raw":null},"required":false},{"name":"isActive","docblock":"Forcefully set the active state of a button.\nUseful in conjuction with a Popover.","type":{"name":"bool","value":null,"raw":null},"required":false},{"name":"disabled","docblock":"When true, the button is disabled.\nisLoading also sets the button to disabled.","type":{"name":"bool","value":null,"raw":null},"required":false},{"name":"theme","docblock":"Theme provided by ThemeProvider.","type":{"name":"object","value":null,"raw":null},"required":true},{"name":"className","docblock":"Class name passed to the button.\nOnly use if you know what you are doing.","type":{"name":"string","value":null,"raw":null},"required":false},{"name":"height","docblock":"","type":null,"required":false}]}},{"node":{"displayName":"Combobox","description":null,"props":[{"name":"items","docblock":"The options to show in the menu.","type":{"name":"array","value":null,"raw":null},"required":true},{"name":"selectedItem","docblock":"The selected item when controlled.","type":{"name":"any","value":null,"raw":null},"required":false},{"name":"onChange","docblock":"Function called when value changes.","type":{"name":"func","value":null,"raw":null},"required":false},{"name":"openOnFocus","docblock":"When true, open the autocomplete on focus.","type":{"name":"bool","value":null,"raw":null},"required":false},{"name":"defaultSelectedItem","docblock":"Default selected item when uncontrolled.","type":{"name":"any","value":null,"raw":null},"required":false},{"name":"placeholder","docblock":"The placeholder text when there is no value present.","type":{"name":"string","value":null,"raw":null},"required":false},{"name":"itemToString","docblock":"In case the array of items is not an array of strings,\nthis function is used on each item to return the string that will be shown on the filter","type":{"name":"func","value":null,"raw":null},"required":false},{"name":"inputProps","docblock":"Properties forwarded to the input. Use with caution.","type":{"name":"object","value":null,"raw":null},"required":false},{"name":"buttonProps","docblock":"Properties forwarded to the button. Use with caution.","type":{"name":"object","value":null,"raw":null},"required":false},{"name":"autocompleteProps","docblock":"Properties forwarded to the autocomplete component. Use with caution.","type":{"name":"object","value":null,"raw":null},"required":false},{"name":"width","docblock":"","type":null,"required":false}]}},{"node":{"displayName":"FilePicker","description":null,"props":[{"name":"name","docblock":"","type":{"name":"string","value":null,"raw":null},"required":false},{"name":"accept","docblock":"","type":{"name":"union","value":[{"name":"string"},{"name":"arrayOf","value":{"name":"string"}}],"raw":null},"required":false},{"name":"required","docblock":"","type":{"name":"bool","value":null,"raw":null},"required":false},{"name":"multiple","docblock":"","type":{"name":"bool","value":null,"raw":null},"required":false},{"name":"disabled","docblock":"","type":{"name":"bool","value":null,"raw":null},"required":false},{"name":"capture","docblock":"","type":{"name":"bool","value":null,"raw":null},"required":false},{"name":"height","docblock":"","type":{"name":"number","value":null,"raw":null},"required":false},{"name":"onChange","docblock":"","type":{"name":"func","value":null,"raw":null},"required":false}]}},{"node":{"displayName":"DialogManager","description":null,"props":[{"name":"children","docblock":"","type":{"name":"func","value":null,"raw":null},"required":false}]}},{"node":{"displayName":"Dialog","description":null,"props":[{"name":"children","docblock":"Children can be a string, node or a function accepting `({ close })`.\nWhen passing a string, <Paragraph /> is used to wrap the string.","type":{"name":"union","value":[{"name":"node"},{"name":"func"}],"raw":null},"required":true},{"name":"intent","docblock":"The intent of the Dialog. Used for the button.","type":{"name":"enum","value":[{"value":"'none'","computed":false},{"value":"'success'","computed":false},{"value":"'warning'","computed":false},{"value":"'danger'","computed":false}],"raw":null},"required":false},{"name":"isShown","docblock":"When true, the dialog is shown.","type":{"name":"bool","value":null,"raw":null},"required":false},{"name":"title","docblock":"Title of the Dialog. Titles should use Title Case.","type":{"name":"node","value":null,"raw":null},"required":false},{"name":"hasHeader","docblock":"When true, the header with the title and close icon button is shown.","type":{"name":"bool","value":null,"raw":null},"required":false},{"name":"hasFooter","docblock":"When true, the footer with the cancel and confirm button is shown.","type":{"name":"bool","value":null,"raw":null},"required":false},{"name":"hasCancel","docblock":"When true, the cancel button is shown.","type":{"name":"bool","value":null,"raw":null},"required":false},{"name":"onCloseComplete","docblock":"Function that will be called when the exit transition is complete.","type":{"name":"func","value":null,"raw":null},"required":false},{"name":"onOpenComplete","docblock":"Function that will be called when the enter transition is complete.","type":{"name":"func","value":null,"raw":null},"required":false},{"name":"onConfirm","docblock":"Function that will be called when the confirm button is clicked.\nThis does not close the Dialog. A close function will be passed\nas a paramater you can use to close the dialog.\n\n`onConfirm={(close) => close()}`","type":{"name":"func","value":null,"raw":null},"required":false},{"name":"confirmLabel","docblock":"Label of the confirm button.","type":{"name":"string","value":null,"raw":null},"required":false},{"name":"isConfirmLoading","docblock":"When true, the confirm button is set to loading.","type":{"name":"bool","value":null,"raw":null},"required":false},{"name":"isConfirmDisabled","docblock":"When true, the confirm button is set to disabled.","type":{"name":"bool","value":null,"raw":null},"required":false},{"name":"onCancel","docblock":"Function that will be called when the cancel button is clicked.\nThis closes the Dialog by default.\n\n`onCancel={(close) => close()}`","type":{"name":"func","value":null,"raw":null},"required":false},{"name":"cancelLabel","docblock":"Label of the cancel button.","type":{"name":"string","value":null,"raw":null},"required":false},{"name":"width","docblock":"Width of the Dialog.","type":{"name":"union","value":[{"name":"string"},{"name":"number"}],"raw":null},"required":false},{"name":"topOffset","docblock":"The space above the dialog.\nThis offset is also used at the bottom when there is not enough space\navailable on screen — and the dialog scrolls internally.","type":{"name":"union","value":[{"name":"string"},{"name":"number"}],"raw":null},"required":false},{"name":"minHeightContent","docblock":"The min height of the body content.\nMakes it less weird when only showing little content.","type":{"name":"union","value":[{"name":"string"},{"name":"number"}],"raw":null},"required":false},{"name":"containerProps","docblock":"Props that are passed to the dialog container.","type":{"name":"object","value":null,"raw":null},"required":false}]}},{"node":{"displayName":"Icon","description":{"id":"/Users/jeroenransijn/dev/src/github.com/segmentio/evergreen/src/icon/src/Icon.js absPath of file--Icon--ComponentMetadata--ComponentDescription"},"props":[{"name":"color","docblock":"Color of icon. Equivalent to setting CSS `fill` property.","type":{"name":"string","value":null,"raw":null},"required":false},{"name":"icon","docblock":"Name of a Blueprint UI icon, or an icon element, to render.\nThis prop is required because it determines the content of the component, but it can\nbe explicitly set to falsy values to render nothing.\n\n- If `null` or `undefined` or `false`, this component will render nothing.\n- If given an `IconName` (a string literal union of all icon names),\n  that icon will be rendered as an `<svg>` with `<path>` tags.\n- If given a `JSX.Element`, that element will be rendered and _all other props on this component are ignored._\n  This type is supported to simplify usage of this component in other Blueprint components.\n  As a consumer, you should never use `<Icon icon={<element />}` directly; simply render `<element />` instead.","type":{"name":"string","value":null,"raw":null},"required":true},{"name":"size","docblock":"Size of the icon, in pixels.\nBlueprint contains 16px and 20px SVG icon images,\nand chooses the appropriate resolution based on this prop.","type":{"name":"number","value":null,"raw":null},"required":false},{"name":"title","docblock":"Description string.\nBrowsers usually render this as a tooltip on hover, whereas screen\nreaders will use it for aural feedback.\nBy default, this is set to the icon's name for accessibility.","type":{"name":"string","value":null,"raw":null},"required":false},{"name":"style","docblock":"CSS style properties.","type":{"name":"object","value":null,"raw":null},"required":false},{"name":"theme","docblock":"Theme provided by ThemeProvider.","type":{"name":"object","value":null,"raw":null},"required":true}]}},{"node":{"displayName":"PaneExample","description":null,"props":[{"name":"children","docblock":"","type":{"name":"node","value":null,"raw":null},"required":false}]}},{"node":{"displayName":"Card","description":null,"props":[]}},{"node":{"displayName":"Pane","description":null,"props":[{"name":"background","docblock":"Background property.\n`tint1`, `tint2` etc. from `theme.colors.background` are available.","type":{"name":"string","value":null,"raw":null},"required":false},{"name":"elevation","docblock":"Elevation of the Pane.\nValues: 0, 1, 2, 3, 4.","type":{"name":"enum","value":[{"value":"0","computed":false},{"value":"1","computed":false},{"value":"2","computed":false},{"value":"3","computed":false},{"value":"4","computed":false}],"raw":null},"required":false},{"name":"hoverElevation","docblock":"Elevation of the Pane on hover. Might get deprecated.\nValues: 0, 1, 2, 3, 4.","type":{"name":"enum","value":[{"value":"0","computed":false},{"value":"1","computed":false},{"value":"2","computed":false},{"value":"3","computed":false},{"value":"4","computed":false}],"raw":null},"required":false},{"name":"activeElevation","docblock":"Elevation of the Pane on click. Might get deprecated.\nValues: 0, 1, 2, 3, 4.","type":{"name":"enum","value":[{"value":"0","computed":false},{"value":"1","computed":false},{"value":"2","computed":false},{"value":"3","computed":false},{"value":"4","computed":false}],"raw":null},"required":false},{"name":"border","docblock":"Can be a explicit border value or a boolean.\nValues: true, muted, default.","type":{"name":"custom","value":null,"raw":"StringAndBoolPropType"},"required":false},{"name":"borderTop","docblock":"Can be a explicit border value or a boolean.\nValues: true, extraMuted, muted, default.","type":{"name":"custom","value":null,"raw":"StringAndBoolPropType"},"required":false},{"name":"borderRight","docblock":"Can be a explicit border value or a boolean.\nValues: true, extraMuted, muted, default.","type":{"name":"custom","value":null,"raw":"StringAndBoolPropType"},"required":false},{"name":"borderBottom","docblock":"Can be a explicit border value or a boolean.\nValues: true, extraMuted, muted, default.","type":{"name":"custom","value":null,"raw":"StringAndBoolPropType"},"required":false},{"name":"borderLeft","docblock":"Can be a explicit border value or a boolean.\nValues: true, extraMuted, muted, default.","type":{"name":"custom","value":null,"raw":"StringAndBoolPropType"},"required":false},{"name":"theme","docblock":"Theme provided by ThemeProvider.","type":{"name":"object","value":null,"raw":null},"required":true}]}},{"node":{"displayName":"FormField","description":null,"props":[{"name":"label","docblock":"The label used above the input element.","type":{"name":"node","value":null,"raw":null},"required":true},{"name":"labelFor","docblock":"Passed on the label as a htmlFor prop.","type":{"name":"string","value":null,"raw":null},"required":false},{"name":"isRequired","docblock":"Wether or not show a asterix after the label.","type":{"name":"bool","value":null,"raw":null},"required":false},{"name":"description","docblock":"A optional description of the field under the label, above the input element.","type":{"name":"node","value":null,"raw":null},"required":false},{"name":"hint","docblock":"A optional hint under the input element.","type":{"name":"node","value":null,"raw":null},"required":false},{"name":"validationMessage","docblock":"If a validation message is passed it is shown under the input element\nand above the hint.","type":{"name":"node","value":null,"raw":null},"required":false},{"name":"labelProps","docblock":"","type":null,"required":false}]}},{"node":{"displayName":"FormFieldDescription","description":null,"props":[]}},{"node":{"displayName":"FormFieldHint","description":null,"props":[]}},{"node":{"displayName":"FormFieldLabel","description":null,"props":[{"name":"isAstrixShown","docblock":"Wether or not tho show an asterix after the label.","type":{"name":"bool","value":null,"raw":null},"required":false}]}},{"node":{"displayName":"FormFieldValidationMessage","description":null,"props":[{"name":"children","docblock":"The contents of the validation message.\nThis is wrapped in a paragraph, use a string.","type":{"name":"node","value":null,"raw":null},"required":false},{"name":"theme","docblock":"Theme provided by ThemeProvider.","type":{"name":"object","value":null,"raw":null},"required":true}]}},{"node":{"displayName":"Menu","description":null,"props":[{"name":"children","docblock":"The children of the component.","type":{"name":"node","value":null,"raw":null},"required":false}]}},{"node":{"displayName":"MenuDivider","description":null,"props":[]}},{"node":{"displayName":"MenuGroup","description":null,"props":[{"name":"title","docblock":"Title of the menu group.","type":{"name":"node","value":null,"raw":null},"required":false},{"name":"children","docblock":"The children of the menu group.","type":{"name":"node","value":null,"raw":null},"required":false}]}},{"node":{"displayName":"MenuItem","description":null,"props":[{"name":"is","docblock":"Element type to use for the menu item.\nFor example: `<MenuItem is={ReactRouterLink}>...</MenuItem>`","type":{"name":"union","value":[{"name":"string"},{"name":"func"}],"raw":null},"required":false},{"name":"onSelect","docblock":"Function that is called on click and enter/space keypress.","type":{"name":"func","value":null,"raw":null},"required":false},{"name":"icon","docblock":"The icon before the label.","type":{"name":"node","value":null,"raw":null},"required":false},{"name":"children","docblock":"The children of the component.","type":{"name":"node","value":null,"raw":null},"required":false},{"name":"secondaryText","docblock":"Secondary text shown on the right.","type":{"name":"node","value":null,"raw":null},"required":false},{"name":"appearance","docblock":"The default theme only supports one default appearance.","type":{"name":"string","value":null,"raw":null},"required":false},{"name":"intent","docblock":"The intent of the menu item.","type":{"name":"enum","value":[{"value":"'none'","computed":false},{"value":"'success'","computed":false},{"value":"'warning'","computed":false},{"value":"'danger'","computed":false}],"raw":null},"required":false},{"name":"theme","docblock":"Theme provided by ThemeProvider.","type":{"name":"object","value":null,"raw":null},"required":true}]}},{"node":{"displayName":"MenuOption","description":null,"props":[{"name":"id","docblock":"The id attribute of the menu option.","type":{"name":"string","value":null,"raw":null},"required":false},{"name":"onSelect","docblock":"Function that is called on click and enter/space keypress.","type":{"name":"func","value":null,"raw":null},"required":false},{"name":"isSelected","docblock":"The icon before the label.","type":{"name":"bool","value":null,"raw":null},"required":false},{"name":"children","docblock":"The children of the component.","type":{"name":"node","value":null,"raw":null},"required":false},{"name":"secondaryText","docblock":"Secondary text shown on the right.","type":{"name":"node","value":null,"raw":null},"required":false},{"name":"appearance","docblock":"The default theme only supports one default appearance.","type":{"name":"string","value":null,"raw":null},"required":false},{"name":"theme","docblock":"Theme provided by ThemeProvider.","type":{"name":"object","value":null,"raw":null},"required":true},{"name":"onClick","docblock":"","type":null,"required":false},{"name":"onKeyPress","docblock":"","type":null,"required":false}]}},{"node":{"displayName":"MenuOptionsGroup","description":null,"props":[{"name":"title","docblock":"Title of the menu group.","type":{"name":"node","value":null,"raw":null},"required":false},{"name":"selected","docblock":"The current value of the option group.","type":{"name":"union","value":[{"name":"number"},{"name":"string"}],"raw":null},"required":false},{"name":"onChange","docblock":"Function called when selection changes.","type":{"name":"func","value":null,"raw":null},"required":false},{"name":"options","docblock":"List of options rendered in the group.","type":{"name":"array","value":null,"raw":null},"required":false}]}},{"node":{"displayName":"Image","description":null,"props":[{"name":"src","docblock":"","type":{"name":"string","value":null,"raw":null},"required":false}]}},{"node":{"displayName":"Manager","description":{"id":"/Users/jeroenransijn/dev/src/github.com/segmentio/evergreen/src/manager/src/Manager.js absPath of file--Manager--ComponentMetadata--ComponentDescription"},"props":[{"name":"children","docblock":"","type":{"name":"func","value":null,"raw":null},"required":false}]}},{"node":{"displayName":"Overlay","description":{"id":"/Users/jeroenransijn/dev/src/github.com/segmentio/evergreen/src/overlay/src/Overlay.js absPath of file--Overlay--ComponentMetadata--ComponentDescription"},"props":[{"name":"children","docblock":"Children can be a node or a function accepting `close: func`\nand `state: ENTERING | ENTERED | EXITING | EXITED`.","type":{"name":"union","value":[{"name":"node"},{"name":"func"}],"raw":null},"required":true},{"name":"isShown","docblock":"Show the component; triggers the enter or exit states.","type":{"name":"bool","value":null,"raw":null},"required":false},{"name":"containerProps","docblock":"Props to be passed through on the inner Box.","type":{"name":"object","value":null,"raw":null},"required":false},{"name":"onExit","docblock":"Callback fired before the \"exiting\" status is applied.\ntype: `Function(node: HtmlElement) -> void`","type":{"name":"func","value":null,"raw":null},"required":false},{"name":"onExiting","docblock":"Callback fired after the \"exiting\" status is applied.\ntype: `Function(node: HtmlElement) -> void`","type":{"name":"func","value":null,"raw":null},"required":false},{"name":"onExited","docblock":"Callback fired after the \"exited\" status is applied.\ntype: `Function(exitState: Any?, node: HtmlElement) -> void`","type":{"name":"func","value":null,"raw":null},"required":false},{"name":"onEnter","docblock":"Callback fired before the \"entering\" status is applied.\nAn extra parameter isAppearing is supplied to indicate if the enter stage\nis occurring on the initial mount.\n\ntype: `Function(node: HtmlElement, isAppearing: bool) -> void`","type":{"name":"func","value":null,"raw":null},"required":false},{"name":"onEntering","docblock":"Callback fired after the \"entering\" status is applied.\nAn extra parameter isAppearing is supplied to indicate if the enter stage\nis occurring on the initial mount.\n\ntype: `Function(node: HtmlElement, isAppearing: bool) -> void`","type":{"name":"func","value":null,"raw":null},"required":false},{"name":"onEntered","docblock":"Callback fired after the \"entered\" status is applied.\nAn extra parameter isAppearing is supplied to indicate if the enter stage\nis occurring on the initial mount.\n\ntype: `Function(node: HtmlElement, isAppearing: bool) -> void`","type":{"name":"func","value":null,"raw":null},"required":false},{"name":"theme","docblock":"Theme provided by ThemeProvider.","type":{"name":"object","value":null,"raw":null},"required":true},{"name":"onHide","docblock":"","type":null,"required":false}]}},{"node":{"displayName":"PopoverContent","description":null,"props":[]}},{"node":{"displayName":"OverlayManager","description":null,"props":[{"name":"children","docblock":"","type":{"name":"func","value":null,"raw":null},"required":false}]}},{"node":{"displayName":"PopoverContent","description":null,"props":[]}},{"node":{"displayName":"PopoverContentWithTextInput","description":null,"props":[]}},{"node":{"displayName":"ClosablePopoverContent","description":null,"props":[{"name":"close","docblock":"","type":{"name":"func","value":null,"raw":null},"required":false}]}},{"node":{"displayName":"controlUsage","description":null,"props":[]}},{"node":{"displayName":"Popover","description":null,"props":[{"name":"position","docblock":"The position the Popover is on. Smart positioning might override this.","type":{"name":"enum","value":"Object.keys(Position)","raw":null},"required":false},{"name":"isShown","docblock":"When true, the Popover is manually shown.","type":{"name":"bool","value":null,"raw":null},"required":false},{"name":"content","docblock":"The content of the Popover.","type":{"name":"union","value":[{"name":"node"},{"name":"func"}],"raw":null},"required":true},{"name":"children","docblock":"The target button of the Popover.\nWhen a function the following arguments are passed:\n({ toggle: Function -> Void, getRef: Function -> Ref, isShown: Bool })","type":{"name":"union","value":[{"name":"element"},{"name":"func"}],"raw":null},"required":true},{"name":"display","docblock":"The display property passed to the Popover card.","type":{"name":"string","value":null,"raw":null},"required":false},{"name":"minWidth","docblock":"The min width of the Popover card.","type":{"name":"union","value":[{"name":"number"},{"name":"string"}],"raw":null},"required":false},{"name":"minHeight","docblock":"The min height of the Popover card.","type":{"name":"union","value":[{"name":"number"},{"name":"string"}],"raw":null},"required":false},{"name":"statelessProps","docblock":"Properties passed through to the Popover card.","type":{"name":"objectOf","value":{"name":"custom","raw":"PopoverStateless.propTypes"},"raw":null},"required":false},{"name":"animationDuration","docblock":"Duration of the animation.","type":{"name":"number","value":null,"raw":null},"required":false},{"name":"onOpen","docblock":"Function called when the Popover opens.","type":{"name":"func","value":null,"raw":null},"required":false},{"name":"onClose","docblock":"Function fired when Popover closes.","type":{"name":"func","value":null,"raw":null},"required":false},{"name":"onOpenComplete","docblock":"Function that will be called when the enter transition is complete.","type":{"name":"func","value":null,"raw":null},"required":false},{"name":"onCloseComplete","docblock":"Function that will be called when the exit transition is complete.","type":{"name":"func","value":null,"raw":null},"required":false},{"name":"bringFocusInside","docblock":"When true, bring focus inside of the Popover on open.","type":{"name":"bool","value":null,"raw":null},"required":false}]}},{"node":{"displayName":"PopoverStateless","description":null,"props":[{"name":"children","docblock":"The content of the Popover.","type":{"name":"node","value":null,"raw":null},"required":false}]}},{"node":{"displayName":"Portal","description":null,"props":[{"name":"children","docblock":"","type":{"name":"node","value":null,"raw":null},"required":true}]}},{"node":{"displayName":"Positioner","description":null,"props":[{"name":"position","docblock":"The position the element that is being positioned is on.\nSmart positioning might override this.","type":{"name":"enum","value":"Object.keys(Position)","raw":null},"required":false},{"name":"isShown","docblock":"When true, show the element being positioned.","type":{"name":"bool","value":null,"raw":null},"required":false},{"name":"children","docblock":"Function that returns the element being positioned.","type":{"name":"func","value":null,"raw":null},"required":true},{"name":"innerRef","docblock":"Function that returns the ref of the element being positioned.","type":{"name":"func","value":null,"raw":null},"required":false},{"name":"bodyOffset","docblock":"The minimum distance from the body to the element being positioned.","type":{"name":"number","value":null,"raw":null},"required":false},{"name":"targetOffset","docblock":"The minimum distance from the target to the element being positioned.","type":{"name":"number","value":null,"raw":null},"required":false},{"name":"target","docblock":"Function that should return a node for the target.\n({ getRef: () -> Ref, isShown: Bool }) -> React Node","type":{"name":"func","value":null,"raw":null},"required":true},{"name":"initialScale","docblock":"Initial scale of the element being positioned.","type":{"name":"number","value":null,"raw":null},"required":false},{"name":"animationDuration","docblock":"Duration of the animation.","type":{"name":"number","value":null,"raw":null},"required":false},{"name":"onCloseComplete","docblock":"Function that will be called when the exit transition is complete.","type":{"name":"func","value":null,"raw":null},"required":false},{"name":"onOpenComplete","docblock":"Function that will be called when the enter transition is complete.","type":{"name":"func","value":null,"raw":null},"required":false}]}},{"node":{"displayName":"CircleIcon","description":null,"props":[{"name":"fill","docblock":"","type":{"name":"string","value":null,"raw":null},"required":false},{"name":"size","docblock":"","type":{"name":"number","value":null,"raw":null},"required":false}]}},{"node":{"displayName":"Radio","description":null,"props":[{"name":"id","docblock":"The id attribute of the radio.","type":{"name":"string","value":null,"raw":null},"required":false},{"name":"name","docblock":"The name attribute of the radio.","type":{"name":"string","value":null,"raw":null},"required":false},{"name":"label","docblock":"Label of the radio.","type":{"name":"node","value":null,"raw":null},"required":false},{"name":"value","docblock":"The value attribute of the radio.","type":{"name":"string","value":null,"raw":null},"required":false},{"name":"onChange","docblock":"Function called when state changes.","type":{"name":"func","value":null,"raw":null},"required":false},{"name":"disabled","docblock":"When true, the radio is disabled.","type":{"name":"bool","value":null,"raw":null},"required":false},{"name":"checked","docblock":"When true, the radio is checked.","type":{"name":"bool","value":null,"raw":null},"required":false},{"name":"size","docblock":"The size of the radio circle. This also informs the text size and spacing.","type":{"name":"enum","value":[{"value":"12","computed":false},{"value":"16","computed":false}],"raw":null},"required":false},{"name":"isRequired","docblock":"When true, the radio get the required attribute.","type":{"name":"bool","value":null,"raw":null},"required":false},{"name":"isInvalid","docblock":"When true, the aria-invalid attribute is true.\nUsed for accessibility.","type":{"name":"bool","value":null,"raw":null},"required":false},{"name":"appearance","docblock":"The appearance of the checkbox.\nThe default theme only comes with a default style.","type":{"name":"string","value":null,"raw":null},"required":false},{"name":"theme","docblock":"Theme provided by ThemeProvider.","type":{"name":"object","value":null,"raw":null},"required":true}]}},{"node":{"displayName":"RadioGroup","description":null,"props":[{"name":"options","docblock":"The options for the radios of the Radio Group.","type":{"name":"arrayOf","value":{"name":"shape","value":{"label":{"name":"node","required":true},"value":{"name":"string","required":true},"isDisabled":{"name":"bool","required":false}}},"raw":null},"required":false},{"name":"value","docblock":"The selected item value when controlled.","type":{"name":"string","value":null,"raw":null},"required":false},{"name":"defaultValue","docblock":"The default value of the Radio Group when uncontrolled.","type":{"name":"string","value":null,"raw":null},"required":false},{"name":"onChange","docblock":"Function called when state changes.","type":{"name":"func","value":null,"raw":null},"required":false},{"name":"label","docblock":"Label to display above the radio button options.","type":{"name":"string","value":null,"raw":null},"required":false},{"name":"size","docblock":"The size of the radio circle. This also informs the text size and spacing.","type":{"name":"enum","value":[{"value":"12","computed":false},{"value":"16","computed":false}],"raw":null},"required":false},{"name":"isRequired","docblock":"When true, the radio get the required attribute.","type":{"name":"bool","value":null,"raw":null},"required":false}]}},{"node":{"displayName":"StoryHeader","description":null,"props":[]}},{"node":{"displayName":"StoryHeading","description":null,"props":[]}},{"node":{"displayName":"StoryDescription","description":null,"props":[]}},{"node":{"displayName":"StorySection","description":null,"props":[]}},{"node":{"displayName":"SearchInput","description":null,"props":[{"name":"height","docblock":"","type":null,"required":false},{"name":"appearance","docblock":"","type":null,"required":false}]}},{"node":{"displayName":"SegmentedControl","description":null,"props":[{"name":"options","docblock":"The options for the radios of the Segmented Control.","type":{"name":"arrayOf","value":{"name":"shape","value":{"label":{"name":"node","required":true},"value":{"name":"union","value":[{"name":"number"},{"name":"string"},{"name":"bool"}],"required":true}}},"raw":null},"required":true},{"name":"value","docblock":"The current value of the Segmented Control when controlled.","type":{"name":"union","value":[{"name":"number"},{"name":"string"},{"name":"bool"}],"raw":null},"required":false},{"name":"defaultValue","docblock":"The default value of the Segmented Control when uncontrolled.","type":{"name":"union","value":[{"name":"number"},{"name":"string"},{"name":"bool"}],"raw":null},"required":false},{"name":"onChange","docblock":"Function called when the value changes.","type":{"name":"func","value":null,"raw":null},"required":false},{"name":"name","docblock":"The name of the radio group.","type":{"name":"string","value":null,"raw":null},"required":false},{"name":"height","docblock":"The height of the Segmented Control.","type":{"name":"number","value":null,"raw":null},"required":false}]}},{"node":{"displayName":"SegmentedControlRadio","description":null,"props":[{"name":"name","docblock":"The name attribute of the radio input.","type":{"name":"string","value":null,"raw":null},"required":true},{"name":"label","docblock":"The label used for the radio.","type":{"name":"node","value":null,"raw":null},"required":true},{"name":"value","docblock":"The value attribute of the radio input.","type":{"name":"string","value":null,"raw":null},"required":true},{"name":"height","docblock":"The height of the control.","type":{"name":"number","value":null,"raw":null},"required":true},{"name":"checked","docblock":"When true, the radio input is checked.","type":{"name":"bool","value":null,"raw":null},"required":true},{"name":"onChange","docblock":"Function called when the state changes.","type":{"name":"func","value":null,"raw":null},"required":true},{"name":"appearance","docblock":"The appearance of the control. Currently only `default` is possible.","type":{"name":"string","value":null,"raw":null},"required":true},{"name":"isFirstItem","docblock":"When true, this item is the first item.","type":{"name":"bool","value":null,"raw":null},"required":false},{"name":"isLastItem","docblock":"When true, this item is the last item.","type":{"name":"bool","value":null,"raw":null},"required":false},{"name":"id","docblock":"The unique id of the radio option.","type":{"name":"string","value":null,"raw":null},"required":false},{"name":"theme","docblock":"Theme provided by ThemeProvider.","type":{"name":"object","value":null,"raw":null},"required":true}]}},{"node":{"displayName":"SheetClose","description":null,"props":[{"name":"isClosing","docblock":"","type":{"name":"bool","value":null,"raw":null},"required":false}]}},{"node":{"displayName":"SideSheet","description":null,"props":[{"name":"children","docblock":"Children can be a string, node or a function accepting `({ close })`.","type":{"name":"union","value":[{"name":"node"},{"name":"func"}],"raw":null},"required":true},{"name":"isShown","docblock":"When true, the Side Sheet is shown.","type":{"name":"bool","value":null,"raw":null},"required":false},{"name":"onCloseComplete","docblock":"Function that will be called when the exit transition is complete.","type":{"name":"func","value":null,"raw":null},"required":false},{"name":"onOpenComplete","docblock":"Function that will be called when the enter transition is complete.","type":{"name":"func","value":null,"raw":null},"required":false},{"name":"width","docblock":"Width of the SideSheet.","type":{"name":"union","value":[{"name":"string"},{"name":"number"}],"raw":null},"required":false},{"name":"containerProps","docblock":"Properties to pass through the SideSheet container Pane.","type":{"name":"object","value":null,"raw":null},"required":false}]}},{"node":{"displayName":"Description","description":null,"props":[]}},{"node":{"displayName":"Select","description":null,"props":[{"name":"id","docblock":"The id attribute for the select.","type":{"name":"string","value":null,"raw":null},"required":false},{"name":"name","docblock":"The name attribute for the select.","type":{"name":"string","value":null,"raw":null},"required":false},{"name":"children","docblock":"The options that are passed to the select.","type":{"name":"node","value":null,"raw":null},"required":false},{"name":"defaultValue","docblock":"The initial value of an uncontrolled select","type":{"name":"any","value":null,"raw":null},"required":false},{"name":"onChange","docblock":"Function called when value changes.","type":{"name":"func","value":null,"raw":null},"required":false},{"name":"value","docblock":"The value of the select.","type":{"name":"any","value":null,"raw":null},"required":false},{"name":"required","docblock":"When true, the select is required.","type":{"name":"bool","value":null,"raw":null},"required":false},{"name":"autoFocus","docblock":"When true, the select should auto focus.","type":{"name":"bool","value":null,"raw":null},"required":false},{"name":"isInvalid","docblock":"When true, the select is invalid.","type":{"name":"bool","value":null,"raw":null},"required":false},{"name":"appearance","docblock":"The appearance of the select. The default theme only supports default.","type":{"name":"string","value":null,"raw":null},"required":false},{"name":"theme","docblock":"Theme provided by ThemeProvider.","type":{"name":"object","value":null,"raw":null},"required":true},{"name":"height","docblock":"","type":null,"required":false}]}},{"node":{"displayName":"TextInputField","description":null,"props":[{"name":"label","docblock":"The label used above the input element.","type":{"name":"node","value":null,"raw":null},"required":true},{"name":"labelFor","docblock":"Passed on the label as a htmlFor prop.","type":{"name":"string","value":null,"raw":null},"required":false},{"name":"isRequired","docblock":"Wether or not show a asterix after the label.","type":{"name":"bool","value":null,"raw":null},"required":false},{"name":"description","docblock":"A optional description of the field under the label, above the input element.","type":{"name":"node","value":null,"raw":null},"required":false},{"name":"hint","docblock":"A optional hint under the input element.","type":{"name":"node","value":null,"raw":null},"required":false},{"name":"validationMessage","docblock":"If a validation message is passed it is shown under the input element\nand above the hint.","type":{"name":"node","value":null,"raw":null},"required":false},{"name":"inputHeight","docblock":"The height of the input element.","type":{"name":"number","value":null,"raw":null},"required":false},{"name":"inputWidth","docblock":"The width of the input width.","type":{"name":"union","value":[{"name":"number"},{"name":"string"}],"raw":null},"required":false}]}},{"node":{"displayName":"Manager","description":null,"props":[{"name":"children","docblock":"","type":{"name":"func","value":null,"raw":null},"required":false}]}},{"node":{"displayName":"Option","description":null,"props":[{"name":"label","docblock":"","type":{"name":"string","value":null,"raw":null},"required":false},{"name":"style","docblock":"","type":{"name":"any","value":null,"raw":null},"required":false},{"name":"height","docblock":"","type":{"name":"number","value":null,"raw":null},"required":false},{"name":"onSelect","docblock":"","type":{"name":"func","value":null,"raw":null},"required":false},{"name":"onDeselect","docblock":"","type":{"name":"func","value":null,"raw":null},"required":false},{"name":"isHighlighted","docblock":"","type":{"name":"bool","value":null,"raw":null},"required":false},{"name":"isSelected","docblock":"","type":{"name":"bool","value":null,"raw":null},"required":false},{"name":"isSelectable","docblock":"","type":{"name":"bool","value":null,"raw":null},"required":false}]}},{"node":{"displayName":"itemRenderer","description":{"id":"/Users/jeroenransijn/dev/src/github.com/segmentio/evergreen/src/select-menu/src/OptionsList.js absPath of file--itemRenderer--ComponentMetadata--ComponentDescription"},"props":[]}},{"node":{"displayName":"OptionsList","description":null,"props":[{"name":"options","docblock":"","type":{"name":"arrayOf","value":{"name":"custom","raw":"OptionShapePropType"},"raw":null},"required":false},{"name":"close","docblock":"","type":{"name":"func","value":null,"raw":null},"required":false},{"name":"height","docblock":"","type":{"name":"number","value":null,"raw":null},"required":false},{"name":"width","docblock":"","type":{"name":"number","value":null,"raw":null},"required":false},{"name":"isMultiSelect","docblock":"When true, multi select is accounted for.","type":{"name":"bool","value":null,"raw":null},"required":false},{"name":"selected","docblock":"This holds the values of the options","type":{"name":"arrayOf","value":{"name":"string"},"raw":null},"required":false},{"name":"onSelect","docblock":"","type":{"name":"func","value":null,"raw":null},"required":false},{"name":"onDeselect","docblock":"","type":{"name":"func","value":null,"raw":null},"required":false},{"name":"hasFilter","docblock":"","type":{"name":"bool","value":null,"raw":null},"required":false},{"name":"optionSize","docblock":"","type":{"name":"number","value":null,"raw":null},"required":false},{"name":"renderItem","docblock":"","type":{"name":"func","value":null,"raw":null},"required":false},{"name":"placeholder","docblock":"","type":{"name":"string","value":null,"raw":null},"required":false},{"name":"optionsFilter","docblock":"","type":{"name":"func","value":null,"raw":null},"required":false},{"name":"defaultSearchValue","docblock":"","type":{"name":"string","value":null,"raw":null},"required":false}]}},{"node":{"displayName":"SelectMenu","description":null,"props":[{"name":"title","docblock":"The title of the Select Menu.","type":{"name":"string","value":null,"raw":null},"required":false},{"name":"width","docblock":"The width of the Select Menu.","type":{"name":"number","value":null,"raw":null},"required":false},{"name":"height","docblock":"The height of the Select Menu.","type":{"name":"number","value":null,"raw":null},"required":false},{"name":"options","docblock":"The options to show in the menu.\n[{ label: String, value: String | Number, labelInList?: String }]","type":{"name":"arrayOf","value":{"name":"custom","raw":"OptionShapePropType"},"raw":null},"required":false},{"name":"onSelect","docblock":"Function that is called when an option is selected.","type":{"name":"func","value":null,"raw":null},"required":false},{"name":"onDeselect","docblock":"Function that is called when an option is deselected.","type":{"name":"func","value":null,"raw":null},"required":false},{"name":"selected","docblock":"The selected value/values.","type":{"name":"custom","value":null,"raw":"SelectedPropType"},"required":false},{"name":"isMultiSelect","docblock":"When true, multi select is accounted for.","type":{"name":"bool","value":null,"raw":null},"required":false},{"name":"hasTitle","docblock":"When true, show the title.","type":{"name":"bool","value":null,"raw":null},"required":false},{"name":"hasFilter","docblock":"When true, show the filter.","type":{"name":"bool","value":null,"raw":null},"required":false},{"name":"position","docblock":"The position of the Select Menu.","type":{"name":"enum","value":"Object.keys(Position)","raw":null},"required":false},{"name":"detailView","docblock":"Can be a function that returns a node, or a node itself, that is\nrendered on the right side of the Select Menu to give additional\ninformation when an option is selected.","type":{"name":"union","value":[{"name":"func"},{"name":"node"}],"raw":null},"required":false}]}},{"node":{"displayName":"SelectMenuContent","description":null,"props":[{"name":"close","docblock":"","type":{"name":"func","value":null,"raw":null},"required":false},{"name":"title","docblock":"","type":{"name":"string","value":null,"raw":null},"required":false},{"name":"width","docblock":"","type":{"name":"number","value":null,"raw":null},"required":false},{"name":"height","docblock":"","type":{"name":"number","value":null,"raw":null},"required":false},{"name":"options","docblock":"","type":{"name":"arrayOf","value":{"name":"custom","raw":"OptionShapePropType"},"raw":null},"required":false},{"name":"hasTitle","docblock":"","type":{"name":"bool","value":null,"raw":null},"required":false},{"name":"hasFilter","docblock":"","type":{"name":"bool","value":null,"raw":null},"required":false},{"name":"listProps","docblock":"","type":{"name":"shape","value":"OptionsList.propTypes","raw":null},"required":false},{"name":"isMultiSelect","docblock":"When true, multi select is accounted for.","type":{"name":"bool","value":null,"raw":null},"required":false},{"name":"detailView","docblock":"Node that is placed right next to the options.","type":{"name":"node","value":null,"raw":null},"required":false}]}},{"node":{"displayName":"Stack","description":null,"props":[{"name":"children","docblock":"Function that takes the current z-index and returns a React Node.\n(zIndex) => ReactNode.","type":{"name":"func","value":null,"raw":null},"required":true},{"name":"value","docblock":"Set the value of the stack. This will increment for children.","type":{"name":"number","value":null,"raw":null},"required":false}]}},{"node":{"displayName":"Spinner","description":null,"props":[{"name":"size","docblock":"The size of the spinner.","type":{"name":"number","value":null,"raw":null},"required":false},{"name":"theme","docblock":"Theme provided by ThemeProvider.","type":{"name":"object","value":null,"raw":null},"required":true}]}},{"node":{"displayName":"StorySection","description":null,"props":[]}},{"node":{"displayName":"StoryHeader","description":null,"props":[]}},{"node":{"displayName":"StoryHeading","description":null,"props":[]}},{"node":{"displayName":"StoryDescription","description":null,"props":[]}},{"node":{"displayName":"TabManager","description":null,"props":[{"name":"children","docblock":"","type":{"name":"func","value":null,"raw":null},"required":false}]}},{"node":{"displayName":"SidebarTab","description":null,"props":[{"name":"height","docblock":"","type":null,"required":false}]}},{"node":{"displayName":"TabNavigation","description":null,"props":[]}},{"node":{"displayName":"Tab","description":null,"props":[{"name":"onSelect","docblock":"Function triggered when tab is selected.","type":{"name":"func","value":null,"raw":null},"required":false},{"name":"isSelected","docblock":"When true, the tab is selected.","type":{"name":"bool","value":null,"raw":null},"required":false},{"name":"appearance","docblock":"The appearance of the tab.\nThe default theme only comes with a default style.","type":{"name":"string","value":null,"raw":null},"required":false},{"name":"theme","docblock":"Theme provided by ThemeProvider.","type":{"name":"object","value":null,"raw":null},"required":true},{"name":"onClick","docblock":"","type":null,"required":false},{"name":"onKeyPress","docblock":"","type":null,"required":false},{"name":"is","docblock":"","type":null,"required":false},{"name":"height","docblock":"","type":null,"required":false}]}},{"node":{"displayName":"Tablist","description":null,"props":[]}},{"node":{"displayName":"AdvancedTable","description":null,"props":[]}},{"node":{"displayName":"EditableTable","description":null,"props":[]}},{"node":{"displayName":"VirtualTable","description":null,"props":[]}},{"node":{"displayName":"EditableCell","description":null,"props":[{"name":"isSelectable","docblock":"","type":{"name":"bool","value":null,"raw":null},"required":false},{"name":"disabled","docblock":"When true, the cell can't be edited.","type":{"name":"bool","value":null,"raw":null},"required":false},{"name":"placeholder","docblock":"Optional placeholder when children is falsy.","type":{"name":"node","value":null,"raw":null},"required":false},{"name":"size","docblock":"The size used for the TextTableCell and Textarea.","type":{"name":"enum","value":[{"value":"300","computed":false},{"value":"400","computed":false}],"raw":null},"required":false},{"name":"children","docblock":"This is the value of the cell.","type":{"name":"union","value":[{"name":"string"},{"name":"number"}],"raw":null},"required":false},{"name":"onChange","docblock":"Function called when value changes. (value: string) => void.","type":{"name":"func","value":null,"raw":null},"required":false}]}},{"node":{"displayName":"EditableCellField","description":null,"props":[{"name":"value","docblock":"Used as the defaultValue of the textarea.","type":{"name":"string","value":null,"raw":null},"required":true},{"name":"zIndex","docblock":"The z-index placed on the element.","type":{"name":"number","value":null,"raw":null},"required":true},{"name":"getTargetRef","docblock":"Function to get the target ref of the parent.\nUsed to mirror the position.","type":{"name":"func","value":null,"raw":null},"required":true},{"name":"minWidth","docblock":"Min width of the textarea.\nThe textarea can never be smaller than the cell.","type":{"name":"number","value":null,"raw":null},"required":false},{"name":"minHeight","docblock":"Min height of the textarea.\nThe textarea can never be smaller than the cell.","type":{"name":"number","value":null,"raw":null},"required":false},{"name":"onBlur","docblock":"Called when the textarea is blurred, pass the value back to the cell.","type":{"name":"func","value":null,"raw":null},"required":true},{"name":"size","docblock":"Text size of the textarea.","type":{"name":"number","value":null,"raw":null},"required":false}]}},{"node":{"displayName":"ScrollbarSize","description":null,"props":[{"name":"handleScrollbarSize","docblock":"Returns the size of the scrollbar by creating a hidden fixed div.","type":{"name":"func","value":null,"raw":null},"required":false}]}},{"node":{"displayName":"SearchTableHeaderCell","description":null,"props":[{"name":"value","docblock":"The value of the input.","type":{"name":"string","value":null,"raw":null},"required":false},{"name":"onChange","docblock":"Handler to be called when the input changes.","type":{"name":"func","value":null,"raw":null},"required":false},{"name":"autoFocus","docblock":"Sets whether the component should be automatically focused on component render.","type":{"name":"bool","value":null,"raw":null},"required":false},{"name":"spellCheck","docblock":"Sets whether to apply spell checking to the content.","type":{"name":"bool","value":null,"raw":null},"required":false},{"name":"placeholder","docblock":"Text to display in the input if the input is empty.","type":{"name":"string","value":null,"raw":null},"required":false}]}},{"node":{"displayName":"SelectMenuCell","description":null,"props":[{"name":"isSelectable","docblock":"","type":{"name":"bool","value":null,"raw":null},"required":false},{"name":"disabled","docblock":"When true, the cell can't be edited.","type":{"name":"bool","value":null,"raw":null},"required":false},{"name":"placeholder","docblock":"Optional placeholder when children is falsy.","type":{"name":"node","value":null,"raw":null},"required":false},{"name":"size","docblock":"The size used for the TextTableCell and Textarea.","type":{"name":"enum","value":[{"value":"300","computed":false},{"value":"400","computed":false}],"raw":null},"required":false},{"name":"selectMenuProps","docblock":"","type":{"name":"object","value":null,"raw":null},"required":false}]}},{"node":{"displayName":"Table","description":null,"props":[]}},{"node":{"displayName":"TableBody","description":null,"props":[]}},{"node":{"displayName":"TableCell","description":null,"props":[{"name":"isSelectable","docblock":"","type":{"name":"bool","value":null,"raw":null},"required":false},{"name":"appearance","docblock":"The appearance of the table row. Default theme only support default.","type":{"name":"string","value":null,"raw":null},"required":false},{"name":"rightView","docblock":"Optional node to be placed on the right side of the table cell.\nUseful for icons and icon buttons.","type":{"name":"node","value":null,"raw":null},"required":false},{"name":"theme","docblock":"Theme provided by ThemeProvider.","type":{"name":"object","value":null,"raw":null},"required":true},{"name":"className","docblock":"Class name passed to the table cell.\nOnly use if you know what you are doing.","type":{"name":"string","value":null,"raw":null},"required":false},{"name":"onClick","docblock":"","type":null,"required":false},{"name":"onSelect","docblock":"","type":null,"required":false},{"name":"onDeselect","docblock":"","type":null,"required":false},{"name":"onKeyPress","docblock":"","type":null,"required":false}]}},{"node":{"displayName":"TableHead","description":null,"props":[{"name":"height","docblock":"The height of the table head.","type":{"name":"number","value":null,"raw":null},"required":false},{"name":"accountForScrollbar","docblock":"This should always be true if you are using TableHead together with a TableBody.\nBecause TableBody has `overflowY: scroll` by default.","type":{"name":"bool","value":null,"raw":null},"required":false}]}},{"node":{"displayName":"TableHeaderCell","description":null,"props":[]}},{"node":{"displayName":"TableRow","description":null,"props":[{"name":"height","docblock":"The height of the row. Remember to add paddings when using \"auto\".","type":{"name":"union","value":[{"name":"number"},{"name":"string"}],"raw":null},"required":false},{"name":"onSelect","docblock":"Function that is called on click and enter/space keypress.","type":{"name":"func","value":null,"raw":null},"required":false},{"name":"onDeselect","docblock":"Function that is called on click and enter/space keypress.","type":{"name":"func","value":null,"raw":null},"required":false},{"name":"isSelectable","docblock":"Makes the TableRow selectable.","type":{"name":"bool","value":null,"raw":null},"required":false},{"name":"isSelected","docblock":"Makes the TableRow selected.","type":{"name":"bool","value":null,"raw":null},"required":false},{"name":"isHighlighted","docblock":"Manually set the TableRow to be highlighted.","type":{"name":"bool","value":null,"raw":null},"required":false},{"name":"intent","docblock":"The intent of the alert.","type":{"name":"enum","value":[{"value":"'none'","computed":false},{"value":"'success'","computed":false},{"value":"'warning'","computed":false},{"value":"'danger'","computed":false}],"raw":null},"required":false},{"name":"appearance","docblock":"The appearance of the table row. Default theme only support default.","type":{"name":"string","value":null,"raw":null},"required":false},{"name":"theme","docblock":"Theme provided by ThemeProvider.","type":{"name":"object","value":null,"raw":null},"required":true},{"name":"className","docblock":"Class name passed to the table row.\nOnly use if you know what you are doing.","type":{"name":"string","value":null,"raw":null},"required":false},{"name":"onClick","docblock":"","type":null,"required":false},{"name":"onKeyPress","docblock":"","type":null,"required":false}]}},{"node":{"displayName":"TableVirtualBody","description":null,"props":[{"name":"children","docblock":"Children needs to be an array of a single node.","type":{"name":"union","value":[{"name":"arrayOf","value":{"name":"node"}},{"name":"node"}],"raw":null},"required":false},{"name":"defaultHeight","docblock":"Default height of each row.\n48 is the default height of a TableRow.","type":{"name":"number","value":null,"raw":null},"required":false},{"name":"allowAutoHeight","docblock":"When true, support `height=\"auto\"` on children being rendered.\nThis is somewhat of an expirmental feature.","type":{"name":"bool","value":null,"raw":null},"required":false},{"name":"overscanCount","docblock":"The overscanCount property passed to react-tiny-virtual-list.","type":{"name":"number","value":null,"raw":null},"required":false},{"name":"estimatedItemSize","docblock":"When passed, this is used as the `estimatedItemSize` in react-tiny-virtual-list.\nOnly when `allowAutoHeight` and`useAverageAutoHeightEstimation` are false.","type":{"name":"number","value":null,"raw":null},"required":false},{"name":"useAverageAutoHeightEstimation","docblock":"When allowAutoHeight is true and this prop is true, the estimated height\nwill be computed based on the average height of auto height rows.","type":{"name":"bool","value":null,"raw":null},"required":false}]}},{"node":{"displayName":"TextTableCell","description":null,"props":[{"name":"isNumber","docblock":"Adds textAlign: right and fontFamily: mono.","type":{"name":"bool","value":null,"raw":null},"required":false},{"name":"textProps","docblock":"Pass additional props to the Text component.","type":{"name":"object","value":null,"raw":null},"required":false}]}},{"node":{"displayName":"TextTableHeaderCell","description":null,"props":[{"name":"textProps","docblock":"Pass additional props to the Text component.","type":{"name":"objectOf","value":{"name":"object"},"raw":null},"required":false}]}},{"node":{"displayName":"TextInput","description":null,"props":[{"name":"required","docblock":"Makes the input element required.","type":{"name":"bool","value":null,"raw":null},"required":false},{"name":"disabled","docblock":"Makes the input element disabled.","type":{"name":"bool","value":null,"raw":null},"required":false},{"name":"isInvalid","docblock":"Sets visual styling to be invalid.","type":{"name":"bool","value":null,"raw":null},"required":false},{"name":"spellCheck","docblock":"Use the native spell check functionality of the browser.","type":{"name":"bool","value":null,"raw":null},"required":false},{"name":"placeholder","docblock":"The placeholder text when there is no value present.","type":{"name":"string","value":null,"raw":null},"required":false},{"name":"appearance","docblock":"The appearance of the TextInput.","type":{"name":"string","value":null,"raw":null},"required":false},{"name":"width","docblock":"The width of the TextInput.","type":{"name":"union","value":[{"name":"string"},{"name":"number"}],"raw":null},"required":false},{"name":"theme","docblock":"Theme provided by ThemeProvider.","type":{"name":"object","value":null,"raw":null},"required":true},{"name":"className","docblock":"Class name passed to the button.\nOnly use if you know what you are doing.","type":{"name":"string","value":null,"raw":null},"required":false},{"name":"height","docblock":"","type":null,"required":false}]}},{"node":{"displayName":"TextInputField","description":null,"props":[{"name":"label","docblock":"The label used above the input element.","type":{"name":"node","value":null,"raw":null},"required":true},{"name":"labelFor","docblock":"Passed on the label as a htmlFor prop.","type":{"name":"string","value":null,"raw":null},"required":false},{"name":"isRequired","docblock":"Wether or not show a asterix after the label.","type":{"name":"bool","value":null,"raw":null},"required":false},{"name":"description","docblock":"A optional description of the field under the label, above the input element.","type":{"name":"node","value":null,"raw":null},"required":false},{"name":"hint","docblock":"A optional hint under the input element.","type":{"name":"node","value":null,"raw":null},"required":false},{"name":"validationMessage","docblock":"If a validation message is passed it is shown under the input element\nand above the hint.","type":{"name":"node","value":null,"raw":null},"required":false},{"name":"inputHeight","docblock":"The height of the input element.","type":{"name":"number","value":null,"raw":null},"required":false},{"name":"inputWidth","docblock":"The width of the input width.","type":{"name":"union","value":[{"name":"number"},{"name":"string"}],"raw":null},"required":false}]}},{"node":{"displayName":"Manager","description":null,"props":[{"name":"children","docblock":"","type":{"name":"func","value":null,"raw":null},"required":false}]}},{"node":{"displayName":"Textarea","description":null,"props":[{"name":"required","docblock":"Makes the textarea element required.","type":{"name":"bool","value":null,"raw":null},"required":false},{"name":"disabled","docblock":"Makes the textarea element disabled.","type":{"name":"bool","value":null,"raw":null},"required":false},{"name":"isInvalid","docblock":"Sets visual styling to be invalid.","type":{"name":"bool","value":null,"raw":null},"required":false},{"name":"spellCheck","docblock":"Use the native spell check functionality of the browser.","type":{"name":"bool","value":null,"raw":null},"required":false},{"name":"placeholder","docblock":"The placeholder text when there is no value present.","type":{"name":"string","value":null,"raw":null},"required":false},{"name":"appearance","docblock":"The appearance of the TextInput.","type":{"name":"string","value":null,"raw":null},"required":false},{"name":"width","docblock":"The width of the TextInput.","type":{"name":"union","value":[{"name":"string"},{"name":"number"}],"raw":null},"required":false},{"name":"theme","docblock":"Theme provided by ThemeProvider.","type":{"name":"object","value":null,"raw":null},"required":true},{"name":"className","docblock":"Class name passed to the button.\nOnly use if you know what you are doing.","type":{"name":"string","value":null,"raw":null},"required":false}]}},{"node":{"displayName":"Description","description":null,"props":[]}},{"node":{"displayName":"Manager","description":null,"props":[{"name":"children","docblock":"","type":{"name":"func","value":null,"raw":null},"required":false}]}},{"node":{"displayName":"Description","description":null,"props":[]}},{"node":{"displayName":"TooltipStateless","description":null,"props":[{"name":"children","docblock":"","type":{"name":"node","value":null,"raw":null},"required":false},{"name":"appearance","docblock":"The appearance of the tooltip.","type":{"name":"enum","value":[{"value":"'default'","computed":false},{"value":"'card'","computed":false}],"raw":null},"required":true},{"name":"theme","docblock":"Theme provided by ThemeProvider.","type":{"name":"object","value":null,"raw":null},"required":true}]}},{"node":{"displayName":"Tooltip","description":null,"props":[{"name":"appearance","docblock":"The appearance of the tooltip.","type":{"name":"enum","value":[{"value":"'default'","computed":false},{"value":"'card'","computed":false}],"raw":null},"required":false},{"name":"position","docblock":"The position the Popover is on.","type":{"name":"enum","value":"Object.keys(Position)","raw":null},"required":false},{"name":"content","docblock":"The content of the Popover.","type":{"name":"node","value":null,"raw":null},"required":true},{"name":"hideDelay","docblock":"Time in ms before hiding the Tooltip.","type":{"name":"number","value":null,"raw":null},"required":false},{"name":"isShown","docblock":"When True, manually show the Tooltip.","type":{"name":"bool","value":null,"raw":null},"required":false},{"name":"children","docblock":"The target button of the Tooltip.","type":{"name":"node","value":null,"raw":null},"required":true},{"name":"statelessProps","docblock":"Properties passed through to the Tooltip.","type":{"name":"object","value":null,"raw":null},"required":false}]}},{"node":{"displayName":"Toast","description":null,"props":[{"name":"zIndex","docblock":"The z-index of the toast.","type":{"name":"number","value":null,"raw":null},"required":false},{"name":"duration","docblock":"Duration of the toast.","type":{"name":"number","value":null,"raw":null},"required":false},{"name":"onRemove","docblock":"Function called when the toast is all the way closed.","type":{"name":"func","value":null,"raw":null},"required":false},{"name":"intent","docblock":"The type of the alert.","type":{"name":"enum","value":[{"value":"'none'","computed":false},{"value":"'success'","computed":false},{"value":"'warning'","computed":false},{"value":"'danger'","computed":false}],"raw":null},"required":false},{"name":"title","docblock":"The title of the alert.","type":{"name":"node","value":null,"raw":null},"required":false},{"name":"children","docblock":"Description of the alert.","type":{"name":"node","value":null,"raw":null},"required":false},{"name":"hasCloseButton","docblock":"When true, show a close icon button inside of the toast.","type":{"name":"bool","value":null,"raw":null},"required":false},{"name":"isShown","docblock":"When false, will close the Toast and call onRemove when finished.","type":{"name":"bool","value":null,"raw":null},"required":false}]}},{"node":{"displayName":"ToastManager","description":null,"props":[{"name":"bindNotify","docblock":"Function called with the `this.notify` function.","type":{"name":"func","value":null,"raw":null},"required":true},{"name":"bindGetToasts","docblock":"Function called with the `this.getToasts` function.","type":{"name":"func","value":null,"raw":null},"required":true},{"name":"bindCloseAll","docblock":"Function called with the `this.closeAll` function.","type":{"name":"func","value":null,"raw":null},"required":true}]}},{"node":{"displayName":"designGuidelines","description":null,"props":[]}},{"node":{"displayName":"TextStylePreview","description":null,"props":[{"name":"renderComponent","docblock":"","type":{"name":"func","value":null,"raw":null},"required":true},{"name":"fontSize","docblock":"","type":{"name":"string","value":null,"raw":null},"required":false},{"name":"fontWeight","docblock":"","type":{"name":"string","value":null,"raw":null},"required":false},{"name":"lineHeight","docblock":"","type":{"name":"string","value":null,"raw":null},"required":false},{"name":"letterSpacing","docblock":"","type":{"name":"string","value":null,"raw":null},"required":false},{"name":"marginTop","docblock":"","type":{"name":"number","value":null,"raw":null},"required":false},{"name":"fontFamilies","docblock":"","type":{"name":"object","value":null,"raw":null},"required":false},{"name":"fontFamily","docblock":"","type":{"name":"string","value":null,"raw":null},"required":false},{"name":"color","docblock":"","type":{"name":"string","value":null,"raw":null},"required":false}]}},{"node":{"displayName":"customExample","description":null,"props":[]}},{"node":{"displayName":"previewTextComponent","description":null,"props":[]}},{"node":{"displayName":"Code","description":null,"props":[{"name":"appearance","docblock":"The appearance of the code.","type":{"name":"enum","value":[{"value":"'default'","computed":false},{"value":"'minimal'","computed":false}],"raw":null},"required":false},{"name":"theme","docblock":"Theme provided by ThemeProvider.","type":{"name":"object","value":null,"raw":null},"required":true},{"name":"className","docblock":"Class name passed to the button.\nOnly use if you know what you are doing.","type":{"name":"string","value":null,"raw":null},"required":false}]}},{"node":{"displayName":"Heading","description":null,"props":[{"name":"size","docblock":"The size of the heading.","type":{"name":"enum","value":[{"value":"100","computed":false},{"value":"200","computed":false},{"value":"300","computed":false},{"value":"400","computed":false},{"value":"500","computed":false},{"value":"600","computed":false},{"value":"700","computed":false},{"value":"800","computed":false},{"value":"900","computed":false}],"raw":null},"required":false},{"name":"marginTop","docblock":"Pass `default` to use the default margin top for that size.","type":{"name":"union","value":[{"name":"bool"},{"name":"number"},{"name":"string"}],"raw":null},"required":false},{"name":"theme","docblock":"Theme provided by ThemeProvider.","type":{"name":"object","value":null,"raw":null},"required":true}]}},{"node":{"displayName":"Label","description":null,"props":[]}},{"node":{"displayName":"ListItem","description":null,"props":[{"name":"icon","docblock":"When passed, adds a icon before the list item.\nSee Evergreen `Icon` for documentation.","type":{"name":"string","value":null,"raw":null},"required":false},{"name":"iconColor","docblock":"The color of the icon.","type":{"name":"string","value":null,"raw":null},"required":false}]}},{"node":{"displayName":"Link","description":null,"props":[{"name":"rel","docblock":"This attribute names a relationship of the linked document to the current document.\nCommon use case is: rel=\"noopener noreferrer\".","type":{"name":"string","value":null,"raw":null},"required":false},{"name":"href","docblock":"Specifies the URL of the linked resource. A URL might be absolute or relative.","type":{"name":"string","value":null,"raw":null},"required":false},{"name":"target","docblock":"Target atrribute, common use case is target=\"_blank.\"","type":{"name":"string","value":null,"raw":null},"required":false},{"name":"color","docblock":"The color (and styling) of the Link. Can be default, blue, green or neutral.","type":{"name":"string","value":null,"raw":null},"required":false},{"name":"theme","docblock":"Theme provided by ThemeProvider.","type":{"name":"object","value":null,"raw":null},"required":true},{"name":"className","docblock":"Class name passed to the link.\nOnly use if you know what you are doing.","type":{"name":"string","value":null,"raw":null},"required":false}]}},{"node":{"displayName":"OrderedList","description":null,"props":[{"name":"size","docblock":"Size of the text used in a list item.\nCan be: 300, 400, 500, 600.","type":{"name":"enum","value":[{"value":"300","computed":false},{"value":"400","computed":false},{"value":"500","computed":false},{"value":"600","computed":false}],"raw":null},"required":true}]}},{"node":{"displayName":"Paragraph","description":null,"props":[{"name":"size","docblock":"Size of the text style.\nCan be: 300, 400, 500.","type":{"name":"enum","value":[{"value":"300","computed":false},{"value":"400","computed":false},{"value":"500","computed":false}],"raw":null},"required":false},{"name":"fontFamily","docblock":"Font family.\nCan be: `ui`, `display` or `mono` or a custom font family.","type":{"name":"string","value":null,"raw":null},"required":false},{"name":"theme","docblock":"Theme provided by ThemeProvider.","type":{"name":"object","value":null,"raw":null},"required":true},{"name":"color","docblock":"","type":null,"required":false}]}},{"node":{"displayName":"Pre","description":null,"props":[]}},{"node":{"displayName":"Small","description":{"id":"/Users/jeroenransijn/dev/src/github.com/segmentio/evergreen/src/typography/src/Small.js absPath of file--Small--ComponentMetadata--ComponentDescription"},"props":[]}},{"node":{"displayName":"Strong","description":null,"props":[]}},{"node":{"displayName":"Text","description":null,"props":[{"name":"size","docblock":"Size of the text style.\nCan be: 300, 400, 500, 600.","type":{"name":"enum","value":[{"value":"300","computed":false},{"value":"400","computed":false},{"value":"500","computed":false},{"value":"600","computed":false}],"raw":null},"required":false},{"name":"fontFamily","docblock":"Font family.\nCan be: `ui`, `display` or `mono` or a custom font family.","type":{"name":"string","value":null,"raw":null},"required":false},{"name":"theme","docblock":"Theme provided by ThemeProvider.","type":{"name":"object","value":null,"raw":null},"required":true},{"name":"color","docblock":"","type":null,"required":false}]}},{"node":{"displayName":"UnorderedList","description":null,"props":[{"name":"size","docblock":"Size of the text used in a list item.\nCan be: 300, 400, 500, 600.","type":{"name":"enum","value":[{"value":"300","computed":false},{"value":"400","computed":false},{"value":"500","computed":false},{"value":"600","computed":false}],"raw":null},"required":true},{"name":"icon","docblock":"When passed, adds a icon before each list item in the list\nYou can override this on a individual list item.","type":{"name":"string","value":null,"raw":null},"required":false},{"name":"iconColor","docblock":"The color of the icon in each list item in the list.","type":{"name":"string","value":null,"raw":null},"required":false}]}}]}}}