{"version":3,"sources":["webpack:///./node_modules/prism-react-renderer/es/vendor/prism/index.js","webpack:///./node_modules/prism-react-renderer/es/defaultProps.js","webpack:///./node_modules/prism-react-renderer/es/utils/normalizeTokens.js","webpack:///./node_modules/prism-react-renderer/es/utils/themeToDict.js","webpack:///./node_modules/prism-react-renderer/es/components/Highlight.js","webpack:///./node_modules/prism-react-renderer/es/index.js","webpack:///./node_modules/prism-react-renderer/es/vendor/prism/prism-core.js","webpack:///./node_modules/prism-react-renderer/themes/duotoneDark.js"],"names":["Prism","comment","interpolation","funcPattern","insideEqu","prism_core_default","a","languages","markup","prolog","doctype","cdata","tag","pattern","greedy","inside","punctuation","namespace","attr-value","lookbehind","attr-name","entity","hooks","add","env","type","attributes","title","content","replace","xml","html","mathml","svg","insideString","variable","number","operator","bash","shebang","alias","string","function","keyword","boolean","shell","clike","class-name","c","extend","insertBefore","macro","directive","constant","cpp","raw-string","css","atrule","rule","url","selector","property","important","rest","style","style-attr","javascript","regex","function-variable","template-string","interpolation-punctuation","script","js","util","clone","jsx","spread","script-punctuation","stringifyToken","token","map","join","language","walkTokens","tokens","openedTags","i","length","notTagNorBrace","tagName","pop","push","openedBraces","plainText","splice","Token","coffeescript","class-member","multiline-comment","block-regex","inline-javascript","delimiter","multiline-string","actionscript","pseudo-element","pseudo-class","class","id","attribute","hexcode","diff","coord","deleted","inserted","docker","dockerfile","elixir","atom","capture","argument","forEach","o","erlang","quoted-function","quoted-atom","git","command","parameter","commit_sha1","go","builtin","graphql","Object","defineProperties","buildPlaceholders","value","placeholderPattern","replaceFilter","tokenStack","code","match","indexOf","toUpperCase","grammar","tokenizePlaceholders","j","keys","k","t","s","index","replacement","before","substring","middle","tokenize","after","filter","v","Array","prototype","apply","concat","handlebars","block","brackets","haskell","char","import_statement","hvariable","java","annotation","generics","json","null","jsonp","equation-command","latex","equation","headline","less","mixin-usage","makefile","symbol","markdown","blockquote","hr","list","url-reference","bold","italic","objectivec","ocaml","php","shell-comment","package","nowdoc-string","heredoc-string","single-quoted-string","double-quoted-string","string_interpolation","test","this","global","scope","python","triple-quoted-string","reason","character","constructor","label","ruby","rust","lifetime-annotation","macro-rules","closure-params","sass","atrule-line","variable-line","property-line","scss","parent","placeholder","statement","sql","func","stylus","atrule-declaration","variable-declaration","property-declaration","swift","typescript","ts","vim","yaml","scalar","key","datetime","prism","d","n","es_defaultProps","theme","newlineRe","normalizeEmptyLines","line","types","empty","_extends","assign","target","arguments","source","hasOwnProperty","call","utils_themeToDict","plain","themeDict","styles","reduce","acc","themeEntry","includes","accStyle","root","backgroundColor","Highlight_extends","_objectWithoutPropertiesLoose","excluded","sourceKeys","components_Highlight","_Component","subClass","superClass","Highlight","props","_this","getLineProps","_ref","className","output","getStyleForToken","_ref2","typesSize","display","baseStyle","typeStyles","getTokenProps","_ref3","children","create","__proto__","render","_this$props","typeArrStack","tokenArrStack","tokenArrIndexStack","tokenArrSizeStack","stackIndex","currentLine","splitByNewlines","split","newlineCount","_i","utils_normalizeTokens","mixedTokens","Component","u","__webpack_exports__","y","554","e","uniqueId","_","encode","toString","objId","obj","__id","defineProperty","visited","redef","lang","insert","newToken","ret","DFS","callback","plugins","highlight","text","stringify","matchGrammar","strarr","startPos","oneshot","patterns","lookbehindLength","flags","RegExp","pos","str","lastIndex","exec","from","to","p","len","delNum","slice","args","wrapped","matchedStr","element","classes","aliases","name","module","exports","default","color","opacity","textDecorationLine","fontStyle","fontWeight"],"mappings":"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","file":"4-c2f1832ec8ac03e9626b.js","sourcesContent":["import Prism from './prism-core';\n\n/* This content is auto-generated to include some prismjs language components: */\n\n/* \"prismjs/components/prism-markup\" */\nPrism.languages.markup = {\n  'comment': /<!--[\\s\\S]*?-->/,\n  'prolog': /<\\?[\\s\\S]+?\\?>/,\n  'doctype': /<!DOCTYPE[\\s\\S]+?>/i,\n  'cdata': /<!\\[CDATA\\[[\\s\\S]*?]]>/i,\n  'tag': {\n    pattern: /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s+[^\\s>\\/=]+(?:=(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+))?)*\\s*\\/?>/i,\n    greedy: true,\n    inside: {\n      'tag': {\n        pattern: /^<\\/?[^\\s>\\/]+/i,\n        inside: {\n          'punctuation': /^<\\/?/,\n          'namespace': /^[^\\s>\\/:]+:/\n        }\n      },\n      'attr-value': {\n        pattern: /=(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+)/i,\n        inside: {\n          'punctuation': [/^=/, {\n            pattern: /(^|[^\\\\])[\"']/,\n            lookbehind: true\n          }]\n        }\n      },\n      'punctuation': /\\/?>/,\n      'attr-name': {\n        pattern: /[^\\s>\\/]+/,\n        inside: {\n          'namespace': /^[^\\s>\\/:]+:/\n        }\n      }\n    }\n  },\n  'entity': /&#?[\\da-z]{1,8};/i\n};\nPrism.languages.markup['tag'].inside['attr-value'].inside['entity'] = Prism.languages.markup['entity']; // Plugin to make entity title show the real entity, idea by Roman Komarov\n\nPrism.hooks.add('wrap', function (env) {\n  if (env.type === 'entity') {\n    env.attributes['title'] = env.content.replace(/&amp;/, '&');\n  }\n});\nPrism.languages.xml = Prism.languages.markup;\nPrism.languages.html = Prism.languages.markup;\nPrism.languages.mathml = Prism.languages.markup;\nPrism.languages.svg = Prism.languages.markup;\n/* \"prismjs/components/prism-bash\" */\n\n(function (Prism) {\n  var insideString = {\n    variable: [// Arithmetic Environment\n    {\n      pattern: /\\$?\\(\\([\\s\\S]+?\\)\\)/,\n      inside: {\n        // If there is a $ sign at the beginning highlight $(( and )) as variable\n        variable: [{\n          pattern: /(^\\$\\(\\([\\s\\S]+)\\)\\)/,\n          lookbehind: true\n        }, /^\\$\\(\\(/],\n        number: /\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[Ee]-?\\d+)?/,\n        // Operators according to https://www.gnu.org/software/bash/manual/bashref.html#Shell-Arithmetic\n        operator: /--?|-=|\\+\\+?|\\+=|!=?|~|\\*\\*?|\\*=|\\/=?|%=?|<<=?|>>=?|<=?|>=?|==?|&&?|&=|\\^=?|\\|\\|?|\\|=|\\?|:/,\n        // If there is no $ sign at the beginning highlight (( and )) as punctuation\n        punctuation: /\\(\\(?|\\)\\)?|,|;/\n      }\n    }, // Command Substitution\n    {\n      pattern: /\\$\\([^)]+\\)|`[^`]+`/,\n      greedy: true,\n      inside: {\n        variable: /^\\$\\(|^`|\\)$|`$/\n      }\n    }, /\\$(?:[\\w#?*!@]+|\\{[^}]+\\})/i]\n  };\n  Prism.languages.bash = {\n    'shebang': {\n      pattern: /^#!\\s*\\/bin\\/bash|^#!\\s*\\/bin\\/sh/,\n      alias: 'important'\n    },\n    'comment': {\n      pattern: /(^|[^\"{\\\\])#.*/,\n      lookbehind: true\n    },\n    'string': [//Support for Here-Documents https://en.wikipedia.org/wiki/Here_document\n    {\n      pattern: /((?:^|[^<])<<\\s*)[\"']?(\\w+?)[\"']?\\s*\\r?\\n(?:[\\s\\S])*?\\r?\\n\\2/,\n      lookbehind: true,\n      greedy: true,\n      inside: insideString\n    }, {\n      pattern: /([\"'])(?:\\\\[\\s\\S]|\\$\\([^)]+\\)|`[^`]+`|(?!\\1)[^\\\\])*\\1/,\n      greedy: true,\n      inside: insideString\n    }],\n    'variable': insideString.variable,\n    // Originally based on http://ss64.com/bash/\n    'function': {\n      pattern: /(^|[\\s;|&])(?:alias|apropos|apt-get|aptitude|aspell|awk|basename|bash|bc|bg|builtin|bzip2|cal|cat|cd|cfdisk|chgrp|chmod|chown|chroot|chkconfig|cksum|clear|cmp|comm|command|cp|cron|crontab|csplit|curl|cut|date|dc|dd|ddrescue|df|diff|diff3|dig|dir|dircolors|dirname|dirs|dmesg|du|egrep|eject|enable|env|ethtool|eval|exec|expand|expect|export|expr|fdformat|fdisk|fg|fgrep|file|find|fmt|fold|format|free|fsck|ftp|fuser|gawk|getopts|git|grep|groupadd|groupdel|groupmod|groups|gzip|hash|head|help|hg|history|hostname|htop|iconv|id|ifconfig|ifdown|ifup|import|install|jobs|join|kill|killall|less|link|ln|locate|logname|logout|look|lpc|lpr|lprint|lprintd|lprintq|lprm|ls|lsof|make|man|mkdir|mkfifo|mkisofs|mknod|more|most|mount|mtools|mtr|mv|mmv|nano|netstat|nice|nl|nohup|notify-send|npm|nslookup|open|op|passwd|paste|pathchk|ping|pkill|popd|pr|printcap|printenv|printf|ps|pushd|pv|pwd|quota|quotacheck|quotactl|ram|rar|rcp|read|readarray|readonly|reboot|rename|renice|remsync|rev|rm|rmdir|rsync|screen|scp|sdiff|sed|seq|service|sftp|shift|shopt|shutdown|sleep|slocate|sort|source|split|ssh|stat|strace|su|sudo|sum|suspend|sync|tail|tar|tee|test|time|timeout|times|touch|top|traceroute|trap|tr|tsort|tty|type|ulimit|umask|umount|unalias|uname|unexpand|uniq|units|unrar|unshar|uptime|useradd|userdel|usermod|users|uuencode|uudecode|v|vdir|vi|vmstat|wait|watch|wc|wget|whereis|which|who|whoami|write|xargs|xdg-open|yes|zip)(?=$|[\\s;|&])/,\n      lookbehind: true\n    },\n    'keyword': {\n      pattern: /(^|[\\s;|&])(?:let|:|\\.|if|then|else|elif|fi|for|break|continue|while|in|case|function|select|do|done|until|echo|exit|return|set|declare)(?=$|[\\s;|&])/,\n      lookbehind: true\n    },\n    'boolean': {\n      pattern: /(^|[\\s;|&])(?:true|false)(?=$|[\\s;|&])/,\n      lookbehind: true\n    },\n    'operator': /&&?|\\|\\|?|==?|!=?|<<<?|>>|<=?|>=?|=~/,\n    'punctuation': /\\$?\\(\\(?|\\)\\)?|\\.\\.|[{}[\\];]/\n  };\n  var inside = insideString.variable[1].inside;\n  inside.string = Prism.languages.bash.string;\n  inside['function'] = Prism.languages.bash['function'];\n  inside.keyword = Prism.languages.bash.keyword;\n  inside['boolean'] = Prism.languages.bash['boolean'];\n  inside.operator = Prism.languages.bash.operator;\n  inside.punctuation = Prism.languages.bash.punctuation;\n  Prism.languages.shell = Prism.languages.bash;\n})(Prism);\n/* \"prismjs/components/prism-clike\" */\n\n\nPrism.languages.clike = {\n  'comment': [{\n    pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n    lookbehind: true\n  }, {\n    pattern: /(^|[^\\\\:])\\/\\/.*/,\n    lookbehind: true,\n    greedy: true\n  }],\n  'string': {\n    pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: true\n  },\n  'class-name': {\n    pattern: /((?:\\b(?:class|interface|extends|implements|trait|instanceof|new)\\s+)|(?:catch\\s+\\())[\\w.\\\\]+/i,\n    lookbehind: true,\n    inside: {\n      punctuation: /[.\\\\]/\n    }\n  },\n  'keyword': /\\b(?:if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\\b/,\n  'boolean': /\\b(?:true|false)\\b/,\n  'function': /[a-z0-9_]+(?=\\()/i,\n  'number': /\\b0x[\\da-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,\n  'operator': /--?|\\+\\+?|!=?=?|<=?|>=?|==?=?|&&?|\\|\\|?|\\?|\\*|\\/|~|\\^|%/,\n  'punctuation': /[{}[\\];(),.:]/\n};\n/* \"prismjs/components/prism-c\" */\n\nPrism.languages.c = Prism.languages.extend('clike', {\n  'keyword': /\\b(?:_Alignas|_Alignof|_Atomic|_Bool|_Complex|_Generic|_Imaginary|_Noreturn|_Static_assert|_Thread_local|asm|typeof|inline|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|union|unsigned|void|volatile|while)\\b/,\n  'operator': /-[>-]?|\\+\\+?|!=?|<<?=?|>>?=?|==?|&&?|\\|\\|?|[~^%?*\\/]/,\n  'number': /(?:\\b0x[\\da-f]+|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?)[ful]*/i\n});\nPrism.languages.insertBefore('c', 'string', {\n  'macro': {\n    // allow for multiline macro definitions\n    // spaces after the # character compile fine with gcc\n    pattern: /(^\\s*)#\\s*[a-z]+(?:[^\\r\\n\\\\]|\\\\(?:\\r\\n|[\\s\\S]))*/im,\n    lookbehind: true,\n    alias: 'property',\n    inside: {\n      // highlight the path of the include statement as a string\n      'string': {\n        pattern: /(#\\s*include\\s*)(?:<.+?>|(\"|')(?:\\\\?.)+?\\2)/,\n        lookbehind: true\n      },\n      // highlight macro directives as keywords\n      'directive': {\n        pattern: /(#\\s*)\\b(?:define|defined|elif|else|endif|error|ifdef|ifndef|if|import|include|line|pragma|undef|using)\\b/,\n        lookbehind: true,\n        alias: 'keyword'\n      }\n    }\n  },\n  // highlight predefined macros as constants\n  'constant': /\\b(?:__FILE__|__LINE__|__DATE__|__TIME__|__TIMESTAMP__|__func__|EOF|NULL|SEEK_CUR|SEEK_END|SEEK_SET|stdin|stdout|stderr)\\b/\n});\ndelete Prism.languages.c['class-name'];\ndelete Prism.languages.c['boolean'];\n/* \"prismjs/components/prism-cpp\" */\n\nPrism.languages.cpp = Prism.languages.extend('c', {\n  'keyword': /\\b(?:alignas|alignof|asm|auto|bool|break|case|catch|char|char16_t|char32_t|class|compl|const|constexpr|const_cast|continue|decltype|default|delete|do|double|dynamic_cast|else|enum|explicit|export|extern|float|for|friend|goto|if|inline|int|int8_t|int16_t|int32_t|int64_t|uint8_t|uint16_t|uint32_t|uint64_t|long|mutable|namespace|new|noexcept|nullptr|operator|private|protected|public|register|reinterpret_cast|return|short|signed|sizeof|static|static_assert|static_cast|struct|switch|template|this|thread_local|throw|try|typedef|typeid|typename|union|unsigned|using|virtual|void|volatile|wchar_t|while)\\b/,\n  'boolean': /\\b(?:true|false)\\b/,\n  'operator': /--?|\\+\\+?|!=?|<{1,2}=?|>{1,2}=?|->|:{1,2}|={1,2}|\\^|~|%|&{1,2}|\\|\\|?|\\?|\\*|\\/|\\b(?:and|and_eq|bitand|bitor|not|not_eq|or|or_eq|xor|xor_eq)\\b/\n});\nPrism.languages.insertBefore('cpp', 'keyword', {\n  'class-name': {\n    pattern: /(class\\s+)\\w+/i,\n    lookbehind: true\n  }\n});\nPrism.languages.insertBefore('cpp', 'string', {\n  'raw-string': {\n    pattern: /R\"([^()\\\\ ]{0,16})\\([\\s\\S]*?\\)\\1\"/,\n    alias: 'string',\n    greedy: true\n  }\n});\n/* \"prismjs/components/prism-css\" */\n\nPrism.languages.css = {\n  'comment': /\\/\\*[\\s\\S]*?\\*\\//,\n  'atrule': {\n    pattern: /@[\\w-]+?.*?(?:;|(?=\\s*\\{))/i,\n    inside: {\n      'rule': /@[\\w-]+/ // See rest below\n\n    }\n  },\n  'url': /url\\((?:([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1|.*?)\\)/i,\n  'selector': /[^{}\\s][^{};]*?(?=\\s*\\{)/,\n  'string': {\n    pattern: /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: true\n  },\n  'property': /[-_a-z\\xA0-\\uFFFF][-\\w\\xA0-\\uFFFF]*(?=\\s*:)/i,\n  'important': /\\B!important\\b/i,\n  'function': /[-a-z0-9]+(?=\\()/i,\n  'punctuation': /[(){};:]/\n};\nPrism.languages.css['atrule'].inside.rest = Prism.languages.css;\n\nif (Prism.languages.markup) {\n  Prism.languages.insertBefore('markup', 'tag', {\n    'style': {\n      pattern: /(<style[\\s\\S]*?>)[\\s\\S]*?(?=<\\/style>)/i,\n      lookbehind: true,\n      inside: Prism.languages.css,\n      alias: 'language-css',\n      greedy: true\n    }\n  });\n  Prism.languages.insertBefore('inside', 'attr-value', {\n    'style-attr': {\n      pattern: /\\s*style=(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/i,\n      inside: {\n        'attr-name': {\n          pattern: /^\\s*style/i,\n          inside: Prism.languages.markup.tag.inside\n        },\n        'punctuation': /^\\s*=\\s*['\"]|['\"]\\s*$/,\n        'attr-value': {\n          pattern: /.+/i,\n          inside: Prism.languages.css\n        }\n      },\n      alias: 'language-css'\n    }\n  }, Prism.languages.markup.tag);\n}\n/* \"prismjs/components/prism-javascript\" */\n\n\nPrism.languages.javascript = Prism.languages.extend('clike', {\n  'keyword': /\\b(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|var|void|while|with|yield)\\b/,\n  'number': /\\b(?:0[xX][\\dA-Fa-f]+|0[bB][01]+|0[oO][0-7]+|NaN|Infinity)\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[Ee][+-]?\\d+)?/,\n  // Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)\n  'function': /[_$a-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*\\()/i,\n  'operator': /-[-=]?|\\+[+=]?|!=?=?|<<?=?|>>?>?=?|=(?:==?|>)?|&[&=]?|\\|[|=]?|\\*\\*?=?|\\/=?|~|\\^=?|%=?|\\?|\\.{3}/\n});\nPrism.languages.insertBefore('javascript', 'keyword', {\n  'regex': {\n    pattern: /((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s])\\s*)\\/(\\[[^\\]\\r\\n]+]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[gimyu]{0,5}(?=\\s*($|[\\r\\n,.;})\\]]))/,\n    lookbehind: true,\n    greedy: true\n  },\n  // This must be declared before keyword because we use \"function\" inside the look-forward\n  'function-variable': {\n    pattern: /[_$a-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*=\\s*(?:function\\b|(?:\\([^()]*\\)|[_$a-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*)\\s*=>))/i,\n    alias: 'function'\n  },\n  'constant': /\\b[A-Z][A-Z\\d_]*\\b/\n});\nPrism.languages.insertBefore('javascript', 'string', {\n  'template-string': {\n    pattern: /`(?:\\\\[\\s\\S]|\\${[^}]+}|[^\\\\`])*`/,\n    greedy: true,\n    inside: {\n      'interpolation': {\n        pattern: /\\${[^}]+}/,\n        inside: {\n          'interpolation-punctuation': {\n            pattern: /^\\${|}$/,\n            alias: 'punctuation'\n          },\n          rest: null // See below\n\n        }\n      },\n      'string': /[\\s\\S]+/\n    }\n  }\n});\nPrism.languages.javascript['template-string'].inside['interpolation'].inside.rest = Prism.languages.javascript;\n\nif (Prism.languages.markup) {\n  Prism.languages.insertBefore('markup', 'tag', {\n    'script': {\n      pattern: /(<script[\\s\\S]*?>)[\\s\\S]*?(?=<\\/script>)/i,\n      lookbehind: true,\n      inside: Prism.languages.javascript,\n      alias: 'language-javascript',\n      greedy: true\n    }\n  });\n}\n\nPrism.languages.js = Prism.languages.javascript;\n/* \"prismjs/components/prism-jsx\" */\n\n(function (Prism) {\n  var javascript = Prism.util.clone(Prism.languages.javascript);\n  Prism.languages.jsx = Prism.languages.extend('markup', javascript);\n  Prism.languages.jsx.tag.pattern = /<\\/?(?:[\\w.:-]+\\s*(?:\\s+(?:[\\w.:-]+(?:=(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s{'\">=]+|\\{(?:\\{(?:\\{[^}]*\\}|[^{}])*\\}|[^{}])+\\}))?|\\{\\.{3}[a-z_$][\\w$]*(?:\\.[a-z_$][\\w$]*)*\\}))*\\s*\\/?)?>/i;\n  Prism.languages.jsx.tag.inside['tag'].pattern = /^<\\/?[^\\s>\\/]*/i;\n  Prism.languages.jsx.tag.inside['attr-value'].pattern = /=(?!\\{)(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s'\">]+)/i;\n  Prism.languages.insertBefore('inside', 'attr-name', {\n    'spread': {\n      pattern: /\\{\\.{3}[a-z_$][\\w$]*(?:\\.[a-z_$][\\w$]*)*\\}/,\n      inside: {\n        'punctuation': /\\.{3}|[{}.]/,\n        'attr-value': /\\w+/\n      }\n    }\n  }, Prism.languages.jsx.tag);\n  Prism.languages.insertBefore('inside', 'attr-value', {\n    'script': {\n      // Allow for two levels of nesting\n      pattern: /=(\\{(?:\\{(?:\\{[^}]*\\}|[^}])*\\}|[^}])+\\})/i,\n      inside: {\n        'script-punctuation': {\n          pattern: /^=(?={)/,\n          alias: 'punctuation'\n        },\n        rest: Prism.languages.jsx\n      },\n      'alias': 'language-javascript'\n    }\n  }, Prism.languages.jsx.tag); // The following will handle plain text inside tags\n\n  var stringifyToken = function stringifyToken(token) {\n    if (!token) {\n      return '';\n    }\n\n    if (typeof token === 'string') {\n      return token;\n    }\n\n    if (typeof token.content === 'string') {\n      return token.content;\n    }\n\n    return token.content.map(stringifyToken).join('');\n  };\n\n  var walkTokens = function walkTokens(tokens) {\n    var openedTags = [];\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i];\n      var notTagNorBrace = false;\n\n      if (typeof token !== 'string') {\n        if (token.type === 'tag' && token.content[0] && token.content[0].type === 'tag') {\n          // We found a tag, now find its kind\n          if (token.content[0].content[0].content === '</') {\n            // Closing tag\n            if (openedTags.length > 0 && openedTags[openedTags.length - 1].tagName === stringifyToken(token.content[0].content[1])) {\n              // Pop matching opening tag\n              openedTags.pop();\n            }\n          } else {\n            if (token.content[token.content.length - 1].content === '/>') {} else {\n              // Opening tag\n              openedTags.push({\n                tagName: stringifyToken(token.content[0].content[1]),\n                openedBraces: 0\n              });\n            }\n          }\n        } else if (openedTags.length > 0 && token.type === 'punctuation' && token.content === '{') {\n          // Here we might have entered a JSX context inside a tag\n          openedTags[openedTags.length - 1].openedBraces++;\n        } else if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces > 0 && token.type === 'punctuation' && token.content === '}') {\n          // Here we might have left a JSX context inside a tag\n          openedTags[openedTags.length - 1].openedBraces--;\n        } else {\n          notTagNorBrace = true;\n        }\n      }\n\n      if (notTagNorBrace || typeof token === 'string') {\n        if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces === 0) {\n          // Here we are inside a tag, and not inside a JSX context.\n          // That's plain text: drop any tokens matched.\n          var plainText = stringifyToken(token); // And merge text with adjacent text\n\n          if (i < tokens.length - 1 && (typeof tokens[i + 1] === 'string' || tokens[i + 1].type === 'plain-text')) {\n            plainText += stringifyToken(tokens[i + 1]);\n            tokens.splice(i + 1, 1);\n          }\n\n          if (i > 0 && (typeof tokens[i - 1] === 'string' || tokens[i - 1].type === 'plain-text')) {\n            plainText = stringifyToken(tokens[i - 1]) + plainText;\n            tokens.splice(i - 1, 1);\n            i--;\n          }\n\n          tokens[i] = new Prism.Token('plain-text', plainText, null, plainText);\n        }\n      }\n\n      if (token.content && typeof token.content !== 'string') {\n        walkTokens(token.content);\n      }\n    }\n  };\n\n  Prism.hooks.add('after-tokenize', function (env) {\n    if (env.language !== 'jsx' && env.language !== 'tsx') {\n      return;\n    }\n\n    walkTokens(env.tokens);\n  });\n})(Prism);\n/* \"prismjs/components/prism-coffeescript\" */\n\n\n(function (Prism) {\n  // Ignore comments starting with { to privilege string interpolation highlighting\n  var comment = /#(?!\\{).+/,\n      interpolation = {\n    pattern: /#\\{[^}]+\\}/,\n    alias: 'variable'\n  };\n  Prism.languages.coffeescript = Prism.languages.extend('javascript', {\n    'comment': comment,\n    'string': [// Strings are multiline\n    {\n      pattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n      greedy: true\n    }, {\n      // Strings are multiline\n      pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n      greedy: true,\n      inside: {\n        'interpolation': interpolation\n      }\n    }],\n    'keyword': /\\b(?:and|break|by|catch|class|continue|debugger|delete|do|each|else|extend|extends|false|finally|for|if|in|instanceof|is|isnt|let|loop|namespace|new|no|not|null|of|off|on|or|own|return|super|switch|then|this|throw|true|try|typeof|undefined|unless|until|when|while|window|with|yes|yield)\\b/,\n    'class-member': {\n      pattern: /@(?!\\d)\\w+/,\n      alias: 'variable'\n    }\n  });\n  Prism.languages.insertBefore('coffeescript', 'comment', {\n    'multiline-comment': {\n      pattern: /###[\\s\\S]+?###/,\n      alias: 'comment'\n    },\n    // Block regexp can contain comments and interpolation\n    'block-regex': {\n      pattern: /\\/{3}[\\s\\S]*?\\/{3}/,\n      alias: 'regex',\n      inside: {\n        'comment': comment,\n        'interpolation': interpolation\n      }\n    }\n  });\n  Prism.languages.insertBefore('coffeescript', 'string', {\n    'inline-javascript': {\n      pattern: /`(?:\\\\[\\s\\S]|[^\\\\`])*`/,\n      inside: {\n        'delimiter': {\n          pattern: /^`|`$/,\n          alias: 'punctuation'\n        },\n        rest: Prism.languages.javascript\n      }\n    },\n    // Block strings\n    'multiline-string': [{\n      pattern: /'''[\\s\\S]*?'''/,\n      greedy: true,\n      alias: 'string'\n    }, {\n      pattern: /\"\"\"[\\s\\S]*?\"\"\"/,\n      greedy: true,\n      alias: 'string',\n      inside: {\n        interpolation: interpolation\n      }\n    }]\n  });\n  Prism.languages.insertBefore('coffeescript', 'keyword', {\n    // Object property\n    'property': /(?!\\d)\\w+(?=\\s*:(?!:))/\n  });\n  delete Prism.languages.coffeescript['template-string'];\n})(Prism);\n/* \"prismjs/components/prism-actionscript\" */\n\n\nPrism.languages.actionscript = Prism.languages.extend('javascript', {\n  'keyword': /\\b(?:as|break|case|catch|class|const|default|delete|do|else|extends|finally|for|function|if|implements|import|in|instanceof|interface|internal|is|native|new|null|package|private|protected|public|return|super|switch|this|throw|try|typeof|use|var|void|while|with|dynamic|each|final|get|include|namespace|native|override|set|static)\\b/,\n  'operator': /\\+\\+|--|(?:[+\\-*\\/%^]|&&?|\\|\\|?|<<?|>>?>?|[!=]=?)=?|[~?@]/\n});\nPrism.languages.actionscript['class-name'].alias = 'function';\n\nif (Prism.languages.markup) {\n  Prism.languages.insertBefore('actionscript', 'string', {\n    'xml': {\n      pattern: /(^|[^.])<\\/?\\w+(?:\\s+[^\\s>\\/=]+=(\"|')(?:\\\\[\\s\\S]|(?!\\2)[^\\\\])*\\2)*\\s*\\/?>/,\n      lookbehind: true,\n      inside: {\n        rest: Prism.languages.markup\n      }\n    }\n  });\n}\n/* \"prismjs/components/prism-css-extras\" */\n\n\nPrism.languages.css.selector = {\n  pattern: /[^{}\\s][^{}]*(?=\\s*\\{)/,\n  inside: {\n    'pseudo-element': /:(?:after|before|first-letter|first-line|selection)|::[-\\w]+/,\n    'pseudo-class': /:[-\\w]+(?:\\(.*\\))?/,\n    'class': /\\.[-:.\\w]+/,\n    'id': /#[-:.\\w]+/,\n    'attribute': /\\[[^\\]]+\\]/\n  }\n};\nPrism.languages.insertBefore('css', 'function', {\n  'hexcode': /#[\\da-f]{3,8}/i,\n  'entity': /\\\\[\\da-f]{1,8}/i,\n  'number': /[\\d%.]+/\n});\n/* \"prismjs/components/prism-diff\" */\n\nPrism.languages.diff = {\n  'coord': [// Match all kinds of coord lines (prefixed by \"+++\", \"---\" or \"***\").\n  /^(?:\\*{3}|-{3}|\\+{3}).*$/m, // Match \"@@ ... @@\" coord lines in unified diff.\n  /^@@.*@@$/m, // Match coord lines in normal diff (starts with a number).\n  /^\\d+.*$/m],\n  // Match inserted and deleted lines. Support both +/- and >/< styles.\n  'deleted': /^[-<].*$/m,\n  'inserted': /^[+>].*$/m,\n  // Match \"different\" lines (prefixed with \"!\") in context diff.\n  'diff': {\n    'pattern': /^!(?!!).+$/m,\n    'alias': 'important'\n  }\n};\n/* \"prismjs/components/prism-docker\" */\n\nPrism.languages.docker = {\n  'keyword': {\n    pattern: /(^\\s*)(?:ADD|ARG|CMD|COPY|ENTRYPOINT|ENV|EXPOSE|FROM|HEALTHCHECK|LABEL|MAINTAINER|ONBUILD|RUN|SHELL|STOPSIGNAL|USER|VOLUME|WORKDIR)(?=\\s)/mi,\n    lookbehind: true\n  },\n  'string': /(\"|')(?:(?!\\1)[^\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\\1/,\n  'comment': /#.*/,\n  'punctuation': /---|\\.\\.\\.|[:[\\]{}\\-,|>?]/\n};\nPrism.languages.dockerfile = Prism.languages.docker;\n/* \"prismjs/components/prism-elixir\" */\n\nPrism.languages.elixir = {\n  'comment': {\n    pattern: /#.*/m,\n    lookbehind: true\n  },\n  // ~r\"\"\"foo\"\"\" (multi-line), ~r'''foo''' (multi-line), ~r/foo/, ~r|foo|, ~r\"foo\", ~r'foo', ~r(foo), ~r[foo], ~r{foo}, ~r<foo>\n  'regex': {\n    pattern: /~[rR](?:(\"\"\"|''')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1|([\\/|\"'])(?:\\\\.|(?!\\2)[^\\\\\\r\\n])+\\2|\\((?:\\\\.|[^\\\\)\\r\\n])+\\)|\\[(?:\\\\.|[^\\\\\\]\\r\\n])+\\]|\\{(?:\\\\.|[^\\\\}\\r\\n])+\\}|<(?:\\\\.|[^\\\\>\\r\\n])+>)[uismxfr]*/,\n    greedy: true\n  },\n  'string': [{\n    // ~s\"\"\"foo\"\"\" (multi-line), ~s'''foo''' (multi-line), ~s/foo/, ~s|foo|, ~s\"foo\", ~s'foo', ~s(foo), ~s[foo], ~s{foo} (with interpolation care), ~s<foo>\n    pattern: /~[cCsSwW](?:(\"\"\"|''')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1|([\\/|\"'])(?:\\\\.|(?!\\2)[^\\\\\\r\\n])+\\2|\\((?:\\\\.|[^\\\\)\\r\\n])+\\)|\\[(?:\\\\.|[^\\\\\\]\\r\\n])+\\]|\\{(?:\\\\.|#\\{[^}]+\\}|[^\\\\}\\r\\n])+\\}|<(?:\\\\.|[^\\\\>\\r\\n])+>)[csa]?/,\n    greedy: true,\n    inside: {}\n  }, {\n    pattern: /(\"\"\"|''')[\\s\\S]*?\\1/,\n    greedy: true,\n    inside: {}\n  }, {\n    // Multi-line strings are allowed\n    pattern: /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: true,\n    inside: {}\n  }],\n  'atom': {\n    // Look-behind prevents bad highlighting of the :: operator\n    pattern: /(^|[^:]):\\w+/,\n    lookbehind: true,\n    alias: 'symbol'\n  },\n  // Look-ahead prevents bad highlighting of the :: operator\n  'attr-name': /\\w+:(?!:)/,\n  'capture': {\n    // Look-behind prevents bad highlighting of the && operator\n    pattern: /(^|[^&])&(?:[^&\\s\\d()][^\\s()]*|(?=\\())/,\n    lookbehind: true,\n    alias: 'function'\n  },\n  'argument': {\n    // Look-behind prevents bad highlighting of the && operator\n    pattern: /(^|[^&])&\\d+/,\n    lookbehind: true,\n    alias: 'variable'\n  },\n  'attribute': {\n    pattern: /@\\w+/,\n    alias: 'variable'\n  },\n  'number': /\\b(?:0[box][a-f\\d_]+|\\d[\\d_]*)(?:\\.[\\d_]+)?(?:e[+-]?[\\d_]+)?\\b/i,\n  'keyword': /\\b(?:after|alias|and|case|catch|cond|def(?:callback|exception|impl|module|p|protocol|struct)?|do|else|end|fn|for|if|import|not|or|require|rescue|try|unless|use|when)\\b/,\n  'boolean': /\\b(?:true|false|nil)\\b/,\n  'operator': [/\\bin\\b|&&?|\\|[|>]?|\\\\\\\\|::|\\.\\.\\.?|\\+\\+?|-[->]?|<[-=>]|>=|!==?|\\B!|=(?:==?|[>~])?|[*\\/^]/, {\n    // We don't want to match <<\n    pattern: /([^<])<(?!<)/,\n    lookbehind: true\n  }, {\n    // We don't want to match >>\n    pattern: /([^>])>(?!>)/,\n    lookbehind: true\n  }],\n  'punctuation': /<<|>>|[.,%\\[\\]{}()]/\n};\nPrism.languages.elixir.string.forEach(function (o) {\n  o.inside = {\n    'interpolation': {\n      pattern: /#\\{[^}]+\\}/,\n      inside: {\n        'delimiter': {\n          pattern: /^#\\{|\\}$/,\n          alias: 'punctuation'\n        },\n        rest: Prism.languages.elixir\n      }\n    }\n  };\n});\n/* \"prismjs/components/prism-erlang\" */\n\nPrism.languages.erlang = {\n  'comment': /%.+/,\n  'string': {\n    pattern: /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,\n    greedy: true\n  },\n  'quoted-function': {\n    pattern: /'(?:\\\\.|[^\\\\'\\r\\n])+'(?=\\()/,\n    alias: 'function'\n  },\n  'quoted-atom': {\n    pattern: /'(?:\\\\.|[^\\\\'\\r\\n])+'/,\n    alias: 'atom'\n  },\n  'boolean': /\\b(?:true|false)\\b/,\n  'keyword': /\\b(?:fun|when|case|of|end|if|receive|after|try|catch)\\b/,\n  'number': [/\\$\\\\?./, /\\d+#[a-z0-9]+/i, /(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?/i],\n  'function': /\\b[a-z][\\w@]*(?=\\()/,\n  'variable': {\n    // Look-behind is used to prevent wrong highlighting of atoms containing \"@\"\n    pattern: /(^|[^@])(?:\\b|\\?)[A-Z_][\\w@]*/,\n    lookbehind: true\n  },\n  'operator': [/[=\\/<>:]=|=[:\\/]=|\\+\\+?|--?|[=*\\/!]|\\b(?:bnot|div|rem|band|bor|bxor|bsl|bsr|not|and|or|xor|orelse|andalso)\\b/, {\n    // We don't want to match <<\n    pattern: /(^|[^<])<(?!<)/,\n    lookbehind: true\n  }, {\n    // We don't want to match >>\n    pattern: /(^|[^>])>(?!>)/,\n    lookbehind: true\n  }],\n  'atom': /\\b[a-z][\\w@]*/,\n  'punctuation': /[()[\\]{}:;,.#|]|<<|>>/\n};\n/* \"prismjs/components/prism-git\" */\n\nPrism.languages.git = {\n  /*\n   * A simple one line comment like in a git status command\n   * For instance:\n   * $ git status\n   * # On branch infinite-scroll\n   * # Your branch and 'origin/sharedBranches/frontendTeam/infinite-scroll' have diverged,\n   * # and have 1 and 2 different commits each, respectively.\n   * nothing to commit (working directory clean)\n   */\n  'comment': /^#.*/m,\n\n  /*\n   * Regexp to match the changed lines in a git diff output. Check the example below.\n   */\n  'deleted': /^[-–].*/m,\n  'inserted': /^\\+.*/m,\n\n  /*\n   * a string (double and simple quote)\n   */\n  'string': /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/m,\n\n  /*\n   * a git command. It starts with a random prompt finishing by a $, then \"git\" then some other parameters\n   * For instance:\n   * $ git add file.txt\n   */\n  'command': {\n    pattern: /^.*\\$ git .*$/m,\n    inside: {\n      /*\n       * A git command can contain a parameter starting by a single or a double dash followed by a string\n       * For instance:\n       * $ git diff --cached\n       * $ git log -p\n       */\n      'parameter': /\\s--?\\w+/m\n    }\n  },\n\n  /*\n   * Coordinates displayed in a git diff command\n   * For instance:\n   * $ git diff\n   * diff --git file.txt file.txt\n   * index 6214953..1d54a52 100644\n   * --- file.txt\n   * +++ file.txt\n   * @@ -1 +1,2 @@\n   * -Here's my tetx file\n   * +Here's my text file\n   * +And this is the second line\n   */\n  'coord': /^@@.*@@$/m,\n\n  /*\n   * Match a \"commit [SHA1]\" line in a git log output.\n   * For instance:\n   * $ git log\n   * commit a11a14ef7e26f2ca62d4b35eac455ce636d0dc09\n   * Author: lgiraudel\n   * Date:   Mon Feb 17 11:18:34 2014 +0100\n   *\n   *     Add of a new line\n   */\n  'commit_sha1': /^commit \\w{40}$/m\n};\n/* \"prismjs/components/prism-go\" */\n\nPrism.languages.go = Prism.languages.extend('clike', {\n  'keyword': /\\b(?:break|case|chan|const|continue|default|defer|else|fallthrough|for|func|go(?:to)?|if|import|interface|map|package|range|return|select|struct|switch|type|var)\\b/,\n  'builtin': /\\b(?:bool|byte|complex(?:64|128)|error|float(?:32|64)|rune|string|u?int(?:8|16|32|64)?|uintptr|append|cap|close|complex|copy|delete|imag|len|make|new|panic|print(?:ln)?|real|recover)\\b/,\n  'boolean': /\\b(?:_|iota|nil|true|false)\\b/,\n  'operator': /[*\\/%^!=]=?|\\+[=+]?|-[=-]?|\\|[=|]?|&(?:=|&|\\^=?)?|>(?:>=?|=)?|<(?:<=?|=|-)?|:=|\\.\\.\\./,\n  'number': /(?:\\b0x[a-f\\d]+|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[-+]?\\d+)?)i?/i,\n  'string': {\n    pattern: /([\"'`])(\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,\n    greedy: true\n  }\n});\ndelete Prism.languages.go['class-name'];\n/* \"prismjs/components/prism-graphql\" */\n\nPrism.languages.graphql = {\n  'comment': /#.*/,\n  'string': {\n    pattern: /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,\n    greedy: true\n  },\n  'number': /(?:\\B-|\\b)\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?\\b/i,\n  'boolean': /\\b(?:true|false)\\b/,\n  'variable': /\\$[a-z_]\\w*/i,\n  'directive': {\n    pattern: /@[a-z_]\\w*/i,\n    alias: 'function'\n  },\n  'attr-name': /[a-z_]\\w*(?=\\s*:)/i,\n  'keyword': [{\n    pattern: /(fragment\\s+(?!on)[a-z_]\\w*\\s+|\\.{3}\\s*)on\\b/,\n    lookbehind: true\n  }, /\\b(?:query|fragment|mutation)\\b/],\n  'operator': /!|=|\\.{3}/,\n  'punctuation': /[!(){}\\[\\]:=,]/\n};\n/* \"prismjs/components/prism-markup-templating\" */\n\nPrism.languages['markup-templating'] = {};\nObject.defineProperties(Prism.languages['markup-templating'], {\n  buildPlaceholders: {\n    // Tokenize all inline templating expressions matching placeholderPattern\n    // If the replaceFilter function is provided, it will be called with every match.\n    // If it returns false, the match will not be replaced.\n    value: function value(env, language, placeholderPattern, replaceFilter) {\n      if (env.language !== language) {\n        return;\n      }\n\n      env.tokenStack = [];\n      env.code = env.code.replace(placeholderPattern, function (match) {\n        if (typeof replaceFilter === 'function' && !replaceFilter(match)) {\n          return match;\n        }\n\n        var i = env.tokenStack.length; // Check for existing strings\n\n        while (env.code.indexOf('___' + language.toUpperCase() + i + '___') !== -1) {\n          ++i;\n        } // Create a sparse array\n\n\n        env.tokenStack[i] = match;\n        return '___' + language.toUpperCase() + i + '___';\n      }); // Switch the grammar to markup\n\n      env.grammar = Prism.languages.markup;\n    }\n  },\n  tokenizePlaceholders: {\n    // Replace placeholders with proper tokens after tokenizing\n    value: function value(env, language) {\n      if (env.language !== language || !env.tokenStack) {\n        return;\n      } // Switch the grammar back\n\n\n      env.grammar = Prism.languages[language];\n      var j = 0;\n      var keys = Object.keys(env.tokenStack);\n\n      var walkTokens = function walkTokens(tokens) {\n        if (j >= keys.length) {\n          return;\n        }\n\n        for (var i = 0; i < tokens.length; i++) {\n          var token = tokens[i];\n\n          if (typeof token === 'string' || token.content && typeof token.content === 'string') {\n            var k = keys[j];\n            var t = env.tokenStack[k];\n            var s = typeof token === 'string' ? token : token.content;\n            var index = s.indexOf('___' + language.toUpperCase() + k + '___');\n\n            if (index > -1) {\n              ++j;\n              var before = s.substring(0, index);\n              var middle = new Prism.Token(language, Prism.tokenize(t, env.grammar, language), 'language-' + language, t);\n              var after = s.substring(index + ('___' + language.toUpperCase() + k + '___').length);\n              var replacement;\n\n              if (before || after) {\n                replacement = [before, middle, after].filter(function (v) {\n                  return !!v;\n                });\n                walkTokens(replacement);\n              } else {\n                replacement = middle;\n              }\n\n              if (typeof token === 'string') {\n                Array.prototype.splice.apply(tokens, [i, 1].concat(replacement));\n              } else {\n                token.content = replacement;\n              }\n\n              if (j >= keys.length) {\n                break;\n              }\n            }\n          } else if (token.content && typeof token.content !== 'string') {\n            walkTokens(token.content);\n          }\n        }\n      };\n\n      walkTokens(env.tokens);\n    }\n  }\n});\n/* \"prismjs/components/prism-handlebars\" */\n\n(function (Prism) {\n  Prism.languages.handlebars = {\n    'comment': /\\{\\{![\\s\\S]*?\\}\\}/,\n    'delimiter': {\n      pattern: /^\\{\\{\\{?|\\}\\}\\}?$/i,\n      alias: 'punctuation'\n    },\n    'string': /([\"'])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    'number': /\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[Ee][+-]?\\d+)?/,\n    'boolean': /\\b(?:true|false)\\b/,\n    'block': {\n      pattern: /^(\\s*~?\\s*)[#\\/]\\S+?(?=\\s*~?\\s*$|\\s)/i,\n      lookbehind: true,\n      alias: 'keyword'\n    },\n    'brackets': {\n      pattern: /\\[[^\\]]+\\]/,\n      inside: {\n        punctuation: /\\[|\\]/,\n        variable: /[\\s\\S]+/\n      }\n    },\n    'punctuation': /[!\"#%&'()*+,.\\/;<=>@\\[\\\\\\]^`{|}~]/,\n    'variable': /[^!\"#%&'()*+,.\\/;<=>@\\[\\\\\\]^`{|}~\\s]+/\n  };\n  Prism.hooks.add('before-tokenize', function (env) {\n    var handlebarsPattern = /\\{\\{\\{[\\s\\S]+?\\}\\}\\}|\\{\\{[\\s\\S]+?\\}\\}/g;\n    Prism.languages['markup-templating'].buildPlaceholders(env, 'handlebars', handlebarsPattern);\n  });\n  Prism.hooks.add('after-tokenize', function (env) {\n    Prism.languages['markup-templating'].tokenizePlaceholders(env, 'handlebars');\n  });\n})(Prism);\n/* \"prismjs/components/prism-haskell\" */\n\n\nPrism.languages.haskell = {\n  'comment': {\n    pattern: /(^|[^-!#$%*+=?&@|~.:<>^\\\\\\/])(?:--[^-!#$%*+=?&@|~.:<>^\\\\\\/].*|{-[\\s\\S]*?-})/m,\n    lookbehind: true\n  },\n  'char': /'(?:[^\\\\']|\\\\(?:[abfnrtv\\\\\"'&]|\\^[A-Z@[\\]^_]|NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL|\\d+|o[0-7]+|x[0-9a-fA-F]+))'/,\n  'string': {\n    pattern: /\"(?:[^\\\\\"]|\\\\(?:[abfnrtv\\\\\"'&]|\\^[A-Z@[\\]^_]|NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL|\\d+|o[0-7]+|x[0-9a-fA-F]+)|\\\\\\s+\\\\)*\"/,\n    greedy: true\n  },\n  'keyword': /\\b(?:case|class|data|deriving|do|else|if|in|infixl|infixr|instance|let|module|newtype|of|primitive|then|type|where)\\b/,\n  'import_statement': {\n    // The imported or hidden names are not included in this import\n    // statement. This is because we want to highlight those exactly like\n    // we do for the names in the program.\n    pattern: /((?:\\r?\\n|\\r|^)\\s*)import\\s+(?:qualified\\s+)?(?:[A-Z][\\w']*)(?:\\.[A-Z][\\w']*)*(?:\\s+as\\s+(?:[A-Z][_a-zA-Z0-9']*)(?:\\.[A-Z][\\w']*)*)?(?:\\s+hiding\\b)?/m,\n    lookbehind: true,\n    inside: {\n      'keyword': /\\b(?:import|qualified|as|hiding)\\b/\n    }\n  },\n  // These are builtin variables only. Constructors are highlighted later as a constant.\n  'builtin': /\\b(?:abs|acos|acosh|all|and|any|appendFile|approxRational|asTypeOf|asin|asinh|atan|atan2|atanh|basicIORun|break|catch|ceiling|chr|compare|concat|concatMap|const|cos|cosh|curry|cycle|decodeFloat|denominator|digitToInt|div|divMod|drop|dropWhile|either|elem|encodeFloat|enumFrom|enumFromThen|enumFromThenTo|enumFromTo|error|even|exp|exponent|fail|filter|flip|floatDigits|floatRadix|floatRange|floor|fmap|foldl|foldl1|foldr|foldr1|fromDouble|fromEnum|fromInt|fromInteger|fromIntegral|fromRational|fst|gcd|getChar|getContents|getLine|group|head|id|inRange|index|init|intToDigit|interact|ioError|isAlpha|isAlphaNum|isAscii|isControl|isDenormalized|isDigit|isHexDigit|isIEEE|isInfinite|isLower|isNaN|isNegativeZero|isOctDigit|isPrint|isSpace|isUpper|iterate|last|lcm|length|lex|lexDigits|lexLitChar|lines|log|logBase|lookup|map|mapM|mapM_|max|maxBound|maximum|maybe|min|minBound|minimum|mod|negate|not|notElem|null|numerator|odd|or|ord|otherwise|pack|pi|pred|primExitWith|print|product|properFraction|putChar|putStr|putStrLn|quot|quotRem|range|rangeSize|read|readDec|readFile|readFloat|readHex|readIO|readInt|readList|readLitChar|readLn|readOct|readParen|readSigned|reads|readsPrec|realToFrac|recip|rem|repeat|replicate|return|reverse|round|scaleFloat|scanl|scanl1|scanr|scanr1|seq|sequence|sequence_|show|showChar|showInt|showList|showLitChar|showParen|showSigned|showString|shows|showsPrec|significand|signum|sin|sinh|snd|sort|span|splitAt|sqrt|subtract|succ|sum|tail|take|takeWhile|tan|tanh|threadToIOResult|toEnum|toInt|toInteger|toLower|toRational|toUpper|truncate|uncurry|undefined|unlines|until|unwords|unzip|unzip3|userError|words|writeFile|zip|zip3|zipWith|zipWith3)\\b/,\n  // decimal integers and floating point numbers | octal integers | hexadecimal integers\n  'number': /\\b(?:\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?|0o[0-7]+|0x[0-9a-f]+)\\b/i,\n  // Most of this is needed because of the meaning of a single '.'.\n  // If it stands alone freely, it is the function composition.\n  // It may also be a separator between a module name and an identifier => no\n  // operator. If it comes together with other special characters it is an\n  // operator too.\n  'operator': /\\s\\.\\s|[-!#$%*+=?&@|~.:<>^\\\\\\/]*\\.[-!#$%*+=?&@|~.:<>^\\\\\\/]+|[-!#$%*+=?&@|~.:<>^\\\\\\/]+\\.[-!#$%*+=?&@|~.:<>^\\\\\\/]*|[-!#$%*+=?&@|~:<>^\\\\\\/]+|`([A-Z][\\w']*\\.)*[_a-z][\\w']*`/,\n  // In Haskell, nearly everything is a variable, do not highlight these.\n  'hvariable': /\\b(?:[A-Z][\\w']*\\.)*[_a-z][\\w']*\\b/,\n  'constant': /\\b(?:[A-Z][\\w']*\\.)*[A-Z][\\w']*\\b/,\n  'punctuation': /[{}[\\];(),.:]/\n};\n/* \"prismjs/components/prism-java\" */\n\nPrism.languages.java = Prism.languages.extend('clike', {\n  'keyword': /\\b(?:abstract|continue|for|new|switch|assert|default|goto|package|synchronized|boolean|do|if|private|this|break|double|implements|protected|throw|byte|else|import|public|throws|case|enum|instanceof|return|transient|catch|extends|int|short|try|char|final|interface|static|void|class|finally|long|strictfp|volatile|const|float|native|super|while)\\b/,\n  'number': /\\b0b[01]+\\b|\\b0x[\\da-f]*\\.?[\\da-fp-]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?[df]?/i,\n  'operator': {\n    pattern: /(^|[^.])(?:\\+[+=]?|-[-=]?|!=?|<<?=?|>>?>?=?|==?|&[&=]?|\\|[|=]?|\\*=?|\\/=?|%=?|\\^=?|[?:~])/m,\n    lookbehind: true\n  }\n});\nPrism.languages.insertBefore('java', 'function', {\n  'annotation': {\n    alias: 'punctuation',\n    pattern: /(^|[^.])@\\w+/,\n    lookbehind: true\n  }\n});\nPrism.languages.insertBefore('java', 'class-name', {\n  'generics': {\n    pattern: /<\\s*\\w+(?:\\.\\w+)?(?:\\s*,\\s*\\w+(?:\\.\\w+)?)*>/i,\n    alias: 'function',\n    inside: {\n      keyword: Prism.languages.java.keyword,\n      punctuation: /[<>(),.:]/\n    }\n  }\n});\n/* \"prismjs/components/prism-json\" */\n\nPrism.languages.json = {\n  'property': /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"(?=\\s*:)/i,\n  'string': {\n    pattern: /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"(?!\\s*:)/,\n    greedy: true\n  },\n  'number': /\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[Ee][+-]?\\d+)?/,\n  'punctuation': /[{}[\\]);,]/,\n  'operator': /:/g,\n  'boolean': /\\b(?:true|false)\\b/i,\n  'null': /\\bnull\\b/i\n};\nPrism.languages.jsonp = Prism.languages.json;\n/* \"prismjs/components/prism-latex\" */\n\n(function (Prism) {\n  var funcPattern = /\\\\(?:[^a-z()[\\]]|[a-z*]+)/i,\n      insideEqu = {\n    'equation-command': {\n      pattern: funcPattern,\n      alias: 'regex'\n    }\n  };\n  Prism.languages.latex = {\n    'comment': /%.*/m,\n    // the verbatim environment prints whitespace to the document\n    'cdata': {\n      pattern: /(\\\\begin\\{((?:verbatim|lstlisting)\\*?)\\})[\\s\\S]*?(?=\\\\end\\{\\2\\})/,\n      lookbehind: true\n    },\n\n    /*\n     * equations can be between $ $ or \\( \\) or \\[ \\]\n     * (all are multiline)\n     */\n    'equation': [{\n      pattern: /\\$(?:\\\\[\\s\\S]|[^\\\\$])*\\$|\\\\\\([\\s\\S]*?\\\\\\)|\\\\\\[[\\s\\S]*?\\\\\\]/,\n      inside: insideEqu,\n      alias: 'string'\n    }, {\n      pattern: /(\\\\begin\\{((?:equation|math|eqnarray|align|multline|gather)\\*?)\\})[\\s\\S]*?(?=\\\\end\\{\\2\\})/,\n      lookbehind: true,\n      inside: insideEqu,\n      alias: 'string'\n    }],\n\n    /*\n     * arguments which are keywords or references are highlighted\n     * as keywords\n     */\n    'keyword': {\n      pattern: /(\\\\(?:begin|end|ref|cite|label|usepackage|documentclass)(?:\\[[^\\]]+\\])?\\{)[^}]+(?=\\})/,\n      lookbehind: true\n    },\n    'url': {\n      pattern: /(\\\\url\\{)[^}]+(?=\\})/,\n      lookbehind: true\n    },\n\n    /*\n     * section or chapter headlines are highlighted as bold so that\n     * they stand out more\n     */\n    'headline': {\n      pattern: /(\\\\(?:part|chapter|section|subsection|frametitle|subsubsection|paragraph|subparagraph|subsubparagraph|subsubsubparagraph)\\*?(?:\\[[^\\]]+\\])?\\{)[^}]+(?=\\}(?:\\[[^\\]]+\\])?)/,\n      lookbehind: true,\n      alias: 'class-name'\n    },\n    'function': {\n      pattern: funcPattern,\n      alias: 'selector'\n    },\n    'punctuation': /[[\\]{}&]/\n  };\n})(Prism);\n/* \"prismjs/components/prism-less\" */\n\n/* FIXME :\n :extend() is not handled specifically : its highlighting is buggy.\n Mixin usage must be inside a ruleset to be highlighted.\n At-rules (e.g. import) containing interpolations are buggy.\n Detached rulesets are highlighted as at-rules.\n A comment before a mixin usage prevents the latter to be properly highlighted.\n */\n\n\nPrism.languages.less = Prism.languages.extend('css', {\n  'comment': [/\\/\\*[\\s\\S]*?\\*\\//, {\n    pattern: /(^|[^\\\\])\\/\\/.*/,\n    lookbehind: true\n  }],\n  'atrule': {\n    pattern: /@[\\w-]+?(?:\\([^{}]+\\)|[^(){};])*?(?=\\s*\\{)/i,\n    inside: {\n      'punctuation': /[:()]/\n    }\n  },\n  // selectors and mixins are considered the same\n  'selector': {\n    pattern: /(?:@\\{[\\w-]+\\}|[^{};\\s@])(?:@\\{[\\w-]+\\}|\\([^{}]*\\)|[^{};@])*?(?=\\s*\\{)/,\n    inside: {\n      // mixin parameters\n      'variable': /@+[\\w-]+/\n    }\n  },\n  'property': /(?:@\\{[\\w-]+\\}|[\\w-])+(?:\\+_?)?(?=\\s*:)/i,\n  'punctuation': /[{}();:,]/,\n  'operator': /[+\\-*\\/]/\n}); // Invert function and punctuation positions\n\nPrism.languages.insertBefore('less', 'punctuation', {\n  'function': Prism.languages.less.function\n});\nPrism.languages.insertBefore('less', 'property', {\n  'variable': [// Variable declaration (the colon must be consumed!)\n  {\n    pattern: /@[\\w-]+\\s*:/,\n    inside: {\n      \"punctuation\": /:/\n    }\n  }, // Variable usage\n  /@@?[\\w-]+/],\n  'mixin-usage': {\n    pattern: /([{;]\\s*)[.#](?!\\d)[\\w-]+.*?(?=[(;])/,\n    lookbehind: true,\n    alias: 'function'\n  }\n});\n/* \"prismjs/components/prism-makefile\" */\n\nPrism.languages.makefile = {\n  'comment': {\n    pattern: /(^|[^\\\\])#(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n])*/,\n    lookbehind: true\n  },\n  'string': {\n    pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: true\n  },\n  // Built-in target names\n  'builtin': /\\.[A-Z][^:#=\\s]+(?=\\s*:(?!=))/,\n  // Targets\n  'symbol': {\n    pattern: /^[^:=\\r\\n]+(?=\\s*:(?!=))/m,\n    inside: {\n      'variable': /\\$+(?:[^(){}:#=\\s]+|(?=[({]))/\n    }\n  },\n  'variable': /\\$+(?:[^(){}:#=\\s]+|\\([@*%<^+?][DF]\\)|(?=[({]))/,\n  'keyword': [// Directives\n  /-include\\b|\\b(?:define|else|endef|endif|export|ifn?def|ifn?eq|include|override|private|sinclude|undefine|unexport|vpath)\\b/, // Functions\n  {\n    pattern: /(\\()(?:addsuffix|abspath|and|basename|call|dir|error|eval|file|filter(?:-out)?|findstring|firstword|flavor|foreach|guile|if|info|join|lastword|load|notdir|or|origin|patsubst|realpath|shell|sort|strip|subst|suffix|value|warning|wildcard|word(?:s|list)?)(?=[ \\t])/,\n    lookbehind: true\n  }],\n  'operator': /(?:::|[?:+!])?=|[|@]/,\n  'punctuation': /[:;(){}]/\n};\n/* \"prismjs/components/prism-markdown\" */\n\nPrism.languages.markdown = Prism.languages.extend('markup', {});\nPrism.languages.insertBefore('markdown', 'prolog', {\n  'blockquote': {\n    // > ...\n    pattern: /^>(?:[\\t ]*>)*/m,\n    alias: 'punctuation'\n  },\n  'code': [{\n    // Prefixed by 4 spaces or 1 tab\n    pattern: /^(?: {4}|\\t).+/m,\n    alias: 'keyword'\n  }, {\n    // `code`\n    // ``code``\n    pattern: /``.+?``|`[^`\\n]+`/,\n    alias: 'keyword'\n  }],\n  'title': [{\n    // title 1\n    // =======\n    // title 2\n    // -------\n    pattern: /\\w+.*(?:\\r?\\n|\\r)(?:==+|--+)/,\n    alias: 'important',\n    inside: {\n      punctuation: /==+$|--+$/\n    }\n  }, {\n    // # title 1\n    // ###### title 6\n    pattern: /(^\\s*)#+.+/m,\n    lookbehind: true,\n    alias: 'important',\n    inside: {\n      punctuation: /^#+|#+$/\n    }\n  }],\n  'hr': {\n    // ***\n    // ---\n    // * * *\n    // -----------\n    pattern: /(^\\s*)([*-])(?:[\\t ]*\\2){2,}(?=\\s*$)/m,\n    lookbehind: true,\n    alias: 'punctuation'\n  },\n  'list': {\n    // * item\n    // + item\n    // - item\n    // 1. item\n    pattern: /(^\\s*)(?:[*+-]|\\d+\\.)(?=[\\t ].)/m,\n    lookbehind: true,\n    alias: 'punctuation'\n  },\n  'url-reference': {\n    // [id]: http://example.com \"Optional title\"\n    // [id]: http://example.com 'Optional title'\n    // [id]: http://example.com (Optional title)\n    // [id]: <http://example.com> \"Optional title\"\n    pattern: /!?\\[[^\\]]+\\]:[\\t ]+(?:\\S+|<(?:\\\\.|[^>\\\\])+>)(?:[\\t ]+(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\)))?/,\n    inside: {\n      'variable': {\n        pattern: /^(!?\\[)[^\\]]+/,\n        lookbehind: true\n      },\n      'string': /(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\))$/,\n      'punctuation': /^[\\[\\]!:]|[<>]/\n    },\n    alias: 'url'\n  },\n  'bold': {\n    // **strong**\n    // __strong__\n    // Allow only one line break\n    pattern: /(^|[^\\\\])(\\*\\*|__)(?:(?:\\r?\\n|\\r)(?!\\r?\\n|\\r)|.)+?\\2/,\n    lookbehind: true,\n    inside: {\n      'punctuation': /^\\*\\*|^__|\\*\\*$|__$/\n    }\n  },\n  'italic': {\n    // *em*\n    // _em_\n    // Allow only one line break\n    pattern: /(^|[^\\\\])([*_])(?:(?:\\r?\\n|\\r)(?!\\r?\\n|\\r)|.)+?\\2/,\n    lookbehind: true,\n    inside: {\n      'punctuation': /^[*_]|[*_]$/\n    }\n  },\n  'url': {\n    // [example](http://example.com \"Optional title\")\n    // [example] [id]\n    pattern: /!?\\[[^\\]]+\\](?:\\([^\\s)]+(?:[\\t ]+\"(?:\\\\.|[^\"\\\\])*\")?\\)| ?\\[[^\\]\\n]*\\])/,\n    inside: {\n      'variable': {\n        pattern: /(!?\\[)[^\\]]+(?=\\]$)/,\n        lookbehind: true\n      },\n      'string': {\n        pattern: /\"(?:\\\\.|[^\"\\\\])*\"(?=\\)$)/\n      }\n    }\n  }\n});\nPrism.languages.markdown['bold'].inside['url'] = Prism.languages.markdown['url'];\nPrism.languages.markdown['italic'].inside['url'] = Prism.languages.markdown['url'];\nPrism.languages.markdown['bold'].inside['italic'] = Prism.languages.markdown['italic'];\nPrism.languages.markdown['italic'].inside['bold'] = Prism.languages.markdown['bold'];\n/* \"prismjs/components/prism-objectivec\" */\n\nPrism.languages.objectivec = Prism.languages.extend('c', {\n  'keyword': /\\b(?:asm|typeof|inline|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|union|unsigned|void|volatile|while|in|self|super)\\b|(?:@interface|@end|@implementation|@protocol|@class|@public|@protected|@private|@property|@try|@catch|@finally|@throw|@synthesize|@dynamic|@selector)\\b/,\n  'string': /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1|@\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"/,\n  'operator': /-[->]?|\\+\\+?|!=?|<<?=?|>>?=?|==?|&&?|\\|\\|?|[~^%?*\\/@]/\n});\n/* \"prismjs/components/prism-ocaml\" */\n\nPrism.languages.ocaml = {\n  'comment': /\\(\\*[\\s\\S]*?\\*\\)/,\n  'string': [{\n    pattern: /\"(?:\\\\.|[^\\\\\\r\\n\"])*\"/,\n    greedy: true\n  }, {\n    pattern: /(['`])(?:\\\\(?:\\d+|x[\\da-f]+|.)|(?!\\1)[^\\\\\\r\\n])\\1/i,\n    greedy: true\n  }],\n  'number': /\\b(?:0x[\\da-f][\\da-f_]+|(?:0[bo])?\\d[\\d_]*\\.?[\\d_]*(?:e[+-]?[\\d_]+)?)/i,\n  'type': {\n    pattern: /\\B['`]\\w*/,\n    alias: 'variable'\n  },\n  'directive': {\n    pattern: /\\B#\\w+/,\n    alias: 'function'\n  },\n  'keyword': /\\b(?:as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|match|method|module|mutable|new|object|of|open|prefix|private|rec|then|sig|struct|to|try|type|val|value|virtual|where|while|with)\\b/,\n  'boolean': /\\b(?:false|true)\\b/,\n  // Custom operators are allowed\n  'operator': /:=|[=<>@^|&+\\-*\\/$%!?~][!$%&*+\\-.\\/:<=>?@^|~]*|\\b(?:and|asr|land|lor|lxor|lsl|lsr|mod|nor|or)\\b/,\n  'punctuation': /[(){}\\[\\]|_.,:;]/\n};\n/* \"prismjs/components/prism-php\" */\n\n/**\n * Original by Aaron Harun: http://aahacreative.com/2012/07/31/php-syntax-highlighting-prism/\n * Modified by Miles Johnson: http://milesj.me\n *\n * Supports the following:\n * \t\t- Extends clike syntax\n * \t\t- Support for PHP 5.3+ (namespaces, traits, generators, etc)\n * \t\t- Smarter constant and function matching\n *\n * Adds the following new token classes:\n * \t\tconstant, delimiter, variable, function, package\n */\n\n(function (Prism) {\n  Prism.languages.php = Prism.languages.extend('clike', {\n    'keyword': /\\b(?:and|or|xor|array|as|break|case|cfunction|class|const|continue|declare|default|die|do|else|elseif|enddeclare|endfor|endforeach|endif|endswitch|endwhile|extends|for|foreach|function|include|include_once|global|if|new|return|static|switch|use|require|require_once|var|while|abstract|interface|public|implements|private|protected|parent|throw|null|echo|print|trait|namespace|final|yield|goto|instanceof|finally|try|catch)\\b/i,\n    'constant': /\\b[A-Z0-9_]{2,}\\b/,\n    'comment': {\n      pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n      lookbehind: true\n    }\n  });\n  Prism.languages.insertBefore('php', 'string', {\n    'shell-comment': {\n      pattern: /(^|[^\\\\])#.*/,\n      lookbehind: true,\n      alias: 'comment'\n    }\n  });\n  Prism.languages.insertBefore('php', 'keyword', {\n    'delimiter': {\n      pattern: /\\?>|<\\?(?:php|=)?/i,\n      alias: 'important'\n    },\n    'variable': /\\$+(?:\\w+\\b|(?={))/i,\n    'package': {\n      pattern: /(\\\\|namespace\\s+|use\\s+)[\\w\\\\]+/,\n      lookbehind: true,\n      inside: {\n        punctuation: /\\\\/\n      }\n    }\n  }); // Must be defined after the function pattern\n\n  Prism.languages.insertBefore('php', 'operator', {\n    'property': {\n      pattern: /(->)[\\w]+/,\n      lookbehind: true\n    }\n  });\n  Prism.languages.insertBefore('php', 'string', {\n    'nowdoc-string': {\n      pattern: /<<<'([^']+)'(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\1;/,\n      greedy: true,\n      alias: 'string',\n      inside: {\n        'delimiter': {\n          pattern: /^<<<'[^']+'|[a-z_]\\w*;$/i,\n          alias: 'symbol',\n          inside: {\n            'punctuation': /^<<<'?|[';]$/\n          }\n        }\n      }\n    },\n    'heredoc-string': {\n      pattern: /<<<(?:\"([^\"]+)\"(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\1;|([a-z_]\\w*)(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\2;)/i,\n      greedy: true,\n      alias: 'string',\n      inside: {\n        'delimiter': {\n          pattern: /^<<<(?:\"[^\"]+\"|[a-z_]\\w*)|[a-z_]\\w*;$/i,\n          alias: 'symbol',\n          inside: {\n            'punctuation': /^<<<\"?|[\";]$/\n          }\n        },\n        'interpolation': null // See below\n\n      }\n    },\n    'single-quoted-string': {\n      pattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n      greedy: true,\n      alias: 'string'\n    },\n    'double-quoted-string': {\n      pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n      greedy: true,\n      alias: 'string',\n      inside: {\n        'interpolation': null // See below\n\n      }\n    }\n  }); // The different types of PHP strings \"replace\" the C-like standard string\n\n  delete Prism.languages.php['string'];\n  var string_interpolation = {\n    pattern: /{\\$(?:{(?:{[^{}]+}|[^{}]+)}|[^{}])+}|(^|[^\\\\{])\\$+(?:\\w+(?:\\[.+?]|->\\w+)*)/,\n    lookbehind: true,\n    inside: {\n      rest: Prism.languages.php\n    }\n  };\n  Prism.languages.php['heredoc-string'].inside['interpolation'] = string_interpolation;\n  Prism.languages.php['double-quoted-string'].inside['interpolation'] = string_interpolation;\n  Prism.hooks.add('before-tokenize', function (env) {\n    if (!/(?:<\\?php|<\\?)/ig.test(env.code)) {\n      return;\n    }\n\n    var phpPattern = /(?:<\\?php|<\\?)[\\s\\S]*?(?:\\?>|$)/ig;\n    Prism.languages['markup-templating'].buildPlaceholders(env, 'php', phpPattern);\n  });\n  Prism.hooks.add('after-tokenize', function (env) {\n    Prism.languages['markup-templating'].tokenizePlaceholders(env, 'php');\n  });\n})(Prism);\n/* \"prismjs/components/prism-php-extras\" */\n\n\nPrism.languages.insertBefore('php', 'variable', {\n  'this': /\\$this\\b/,\n  'global': /\\$(?:_(?:SERVER|GET|POST|FILES|REQUEST|SESSION|ENV|COOKIE)|GLOBALS|HTTP_RAW_POST_DATA|argc|argv|php_errormsg|http_response_header)\\b/,\n  'scope': {\n    pattern: /\\b[\\w\\\\]+::/,\n    inside: {\n      keyword: /static|self|parent/,\n      punctuation: /::|\\\\/\n    }\n  }\n});\n/* \"prismjs/components/prism-python\" */\n\nPrism.languages.python = {\n  'comment': {\n    pattern: /(^|[^\\\\])#.*/,\n    lookbehind: true\n  },\n  'triple-quoted-string': {\n    pattern: /(\"\"\"|''')[\\s\\S]+?\\1/,\n    greedy: true,\n    alias: 'string'\n  },\n  'string': {\n    pattern: /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: true\n  },\n  'function': {\n    pattern: /((?:^|\\s)def[ \\t]+)[a-zA-Z_]\\w*(?=\\s*\\()/g,\n    lookbehind: true\n  },\n  'class-name': {\n    pattern: /(\\bclass\\s+)\\w+/i,\n    lookbehind: true\n  },\n  'keyword': /\\b(?:as|assert|async|await|break|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|nonlocal|pass|print|raise|return|try|while|with|yield)\\b/,\n  'builtin': /\\b(?:__import__|abs|all|any|apply|ascii|basestring|bin|bool|buffer|bytearray|bytes|callable|chr|classmethod|cmp|coerce|compile|complex|delattr|dict|dir|divmod|enumerate|eval|execfile|file|filter|float|format|frozenset|getattr|globals|hasattr|hash|help|hex|id|input|int|intern|isinstance|issubclass|iter|len|list|locals|long|map|max|memoryview|min|next|object|oct|open|ord|pow|property|range|raw_input|reduce|reload|repr|reversed|round|set|setattr|slice|sorted|staticmethod|str|sum|super|tuple|type|unichr|unicode|vars|xrange|zip)\\b/,\n  'boolean': /\\b(?:True|False|None)\\b/,\n  'number': /(?:\\b(?=\\d)|\\B(?=\\.))(?:0[bo])?(?:(?:\\d|0x[\\da-f])[\\da-f]*\\.?\\d*|\\.\\d+)(?:e[+-]?\\d+)?j?\\b/i,\n  'operator': /[-+%=]=?|!=|\\*\\*?=?|\\/\\/?=?|<[<=>]?|>[=>]?|[&|^~]|\\b(?:or|and|not)\\b/,\n  'punctuation': /[{}[\\];(),.:]/\n};\n/* \"prismjs/components/prism-reason\" */\n\nPrism.languages.reason = Prism.languages.extend('clike', {\n  'comment': {\n    pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,\n    lookbehind: true\n  },\n  'string': {\n    pattern: /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n\"])*\"/,\n    greedy: true\n  },\n  // 'class-name' must be matched *after* 'constructor' defined below\n  'class-name': /\\b[A-Z]\\w*/,\n  'keyword': /\\b(?:and|as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|method|module|mutable|new|nonrec|object|of|open|or|private|rec|sig|struct|switch|then|to|try|type|val|virtual|when|while|with)\\b/,\n  'operator': /\\.{3}|:[:=]|=(?:==?|>)?|<=?|>=?|[|^?'#!~`]|[+\\-*\\/]\\.?|\\b(?:mod|land|lor|lxor|lsl|lsr|asr)\\b/\n});\nPrism.languages.insertBefore('reason', 'class-name', {\n  'character': {\n    pattern: /'(?:\\\\x[\\da-f]{2}|\\\\o[0-3][0-7][0-7]|\\\\\\d{3}|\\\\.|[^'\\\\\\r\\n])'/,\n    alias: 'string'\n  },\n  'constructor': {\n    // Negative look-ahead prevents from matching things like String.capitalize\n    pattern: /\\b[A-Z]\\w*\\b(?!\\s*\\.)/,\n    alias: 'variable'\n  },\n  'label': {\n    pattern: /\\b[a-z]\\w*(?=::)/,\n    alias: 'symbol'\n  }\n}); // We can't match functions property, so let's not even try.\n\ndelete Prism.languages.reason.function;\n/* \"prismjs/components/prism-ruby\" */\n\n/**\n * Original by Samuel Flores\n *\n * Adds the following new token classes:\n * \t\tconstant, builtin, variable, symbol, regex\n */\n\n(function (Prism) {\n  Prism.languages.ruby = Prism.languages.extend('clike', {\n    'comment': [/#.*/, {\n      pattern: /^=begin(?:\\r?\\n|\\r)(?:.*(?:\\r?\\n|\\r))*?=end/m,\n      greedy: true\n    }],\n    'keyword': /\\b(?:alias|and|BEGIN|begin|break|case|class|def|define_method|defined|do|each|else|elsif|END|end|ensure|false|for|if|in|module|new|next|nil|not|or|protected|private|public|raise|redo|require|rescue|retry|return|self|super|then|throw|true|undef|unless|until|when|while|yield)\\b/\n  });\n  var interpolation = {\n    pattern: /#\\{[^}]+\\}/,\n    inside: {\n      'delimiter': {\n        pattern: /^#\\{|\\}$/,\n        alias: 'tag'\n      },\n      rest: Prism.languages.ruby\n    }\n  };\n  Prism.languages.insertBefore('ruby', 'keyword', {\n    'regex': [{\n      pattern: /%r([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1[gim]{0,3}/,\n      greedy: true,\n      inside: {\n        'interpolation': interpolation\n      }\n    }, {\n      pattern: /%r\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)[gim]{0,3}/,\n      greedy: true,\n      inside: {\n        'interpolation': interpolation\n      }\n    }, {\n      // Here we need to specifically allow interpolation\n      pattern: /%r\\{(?:[^#{}\\\\]|#(?:\\{[^}]+\\})?|\\\\[\\s\\S])*\\}[gim]{0,3}/,\n      greedy: true,\n      inside: {\n        'interpolation': interpolation\n      }\n    }, {\n      pattern: /%r\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\][gim]{0,3}/,\n      greedy: true,\n      inside: {\n        'interpolation': interpolation\n      }\n    }, {\n      pattern: /%r<(?:[^<>\\\\]|\\\\[\\s\\S])*>[gim]{0,3}/,\n      greedy: true,\n      inside: {\n        'interpolation': interpolation\n      }\n    }, {\n      pattern: /(^|[^/])\\/(?!\\/)(\\[.+?]|\\\\.|[^/\\\\\\r\\n])+\\/[gim]{0,3}(?=\\s*($|[\\r\\n,.;})]))/,\n      lookbehind: true,\n      greedy: true\n    }],\n    'variable': /[@$]+[a-zA-Z_]\\w*(?:[?!]|\\b)/,\n    'symbol': {\n      pattern: /(^|[^:]):[a-zA-Z_]\\w*(?:[?!]|\\b)/,\n      lookbehind: true\n    }\n  });\n  Prism.languages.insertBefore('ruby', 'number', {\n    'builtin': /\\b(?:Array|Bignum|Binding|Class|Continuation|Dir|Exception|FalseClass|File|Stat|Fixnum|Float|Hash|Integer|IO|MatchData|Method|Module|NilClass|Numeric|Object|Proc|Range|Regexp|String|Struct|TMS|Symbol|ThreadGroup|Thread|Time|TrueClass)\\b/,\n    'constant': /\\b[A-Z]\\w*(?:[?!]|\\b)/\n  });\n  Prism.languages.ruby.string = [{\n    pattern: /%[qQiIwWxs]?([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,\n    greedy: true,\n    inside: {\n      'interpolation': interpolation\n    }\n  }, {\n    pattern: /%[qQiIwWxs]?\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)/,\n    greedy: true,\n    inside: {\n      'interpolation': interpolation\n    }\n  }, {\n    // Here we need to specifically allow interpolation\n    pattern: /%[qQiIwWxs]?\\{(?:[^#{}\\\\]|#(?:\\{[^}]+\\})?|\\\\[\\s\\S])*\\}/,\n    greedy: true,\n    inside: {\n      'interpolation': interpolation\n    }\n  }, {\n    pattern: /%[qQiIwWxs]?\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\]/,\n    greedy: true,\n    inside: {\n      'interpolation': interpolation\n    }\n  }, {\n    pattern: /%[qQiIwWxs]?<(?:[^<>\\\\]|\\\\[\\s\\S])*>/,\n    greedy: true,\n    inside: {\n      'interpolation': interpolation\n    }\n  }, {\n    pattern: /(\"|')(?:#\\{[^}]+\\}|\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: true,\n    inside: {\n      'interpolation': interpolation\n    }\n  }];\n})(Prism);\n/* \"prismjs/components/prism-rust\" */\n\n/* TODO\n\tAdd support for Markdown notation inside doc comments\n\tAdd support for nested block comments...\n\tMatch closure params even when not followed by dash or brace\n\tAdd better support for macro definition\n*/\n\n\nPrism.languages.rust = {\n  'comment': [{\n    pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,\n    lookbehind: true\n  }, {\n    pattern: /(^|[^\\\\:])\\/\\/.*/,\n    lookbehind: true\n  }],\n  'string': [{\n    pattern: /b?r(#*)\"(?:\\\\.|(?!\"\\1)[^\\\\\\r\\n])*\"\\1/,\n    greedy: true\n  }, {\n    pattern: /b?\"(?:\\\\.|[^\\\\\\r\\n\"])*\"/,\n    greedy: true\n  }],\n  'char': {\n    pattern: /b?'(?:\\\\(?:x[0-7][\\da-fA-F]|u{(?:[\\da-fA-F]_*){1,6}|.)|[^\\\\\\r\\n\\t'])'/,\n    alias: 'string'\n  },\n  'lifetime-annotation': {\n    pattern: /'[^\\s>']+/,\n    alias: 'symbol'\n  },\n  'keyword': /\\b(?:abstract|alignof|as|be|box|break|const|continue|crate|do|else|enum|extern|false|final|fn|for|if|impl|in|let|loop|match|mod|move|mut|offsetof|once|override|priv|pub|pure|ref|return|sizeof|static|self|struct|super|true|trait|type|typeof|unsafe|unsized|use|virtual|where|while|yield)\\b/,\n  'attribute': {\n    pattern: /#!?\\[.+?\\]/,\n    greedy: true,\n    alias: 'attr-name'\n  },\n  'function': [/\\w+(?=\\s*\\()/, // Macros can use parens or brackets\n  /\\w+!(?=\\s*\\(|\\[)/],\n  'macro-rules': {\n    pattern: /\\w+!/,\n    alias: 'function'\n  },\n  // Hex, oct, bin, dec numbers with visual separators and type suffix\n  'number': /\\b(?:0x[\\dA-Fa-f](?:_?[\\dA-Fa-f])*|0o[0-7](?:_?[0-7])*|0b[01](?:_?[01])*|(\\d(?:_?\\d)*)?\\.?\\d(?:_?\\d)*(?:[Ee][+-]?\\d+)?)(?:_?(?:[iu](?:8|16|32|64)?|f32|f64))?\\b/,\n  // Closure params should not be confused with bitwise OR |\n  'closure-params': {\n    pattern: /\\|[^|]*\\|(?=\\s*[{-])/,\n    inside: {\n      'punctuation': /[|:,]/,\n      'operator': /[&*]/\n    }\n  },\n  'punctuation': /[{}[\\];(),:]|\\.+|->/,\n  'operator': /[-+*\\/%!^]=?|=[=>]?|@|&[&=]?|\\|[|=]?|<<?=?|>>?=?/\n};\n/* \"prismjs/components/prism-sass\" */\n\n(function (Prism) {\n  Prism.languages.sass = Prism.languages.extend('css', {\n    // Sass comments don't need to be closed, only indented\n    'comment': {\n      pattern: /^([ \\t]*)\\/[\\/*].*(?:(?:\\r?\\n|\\r)\\1[ \\t]+.+)*/m,\n      lookbehind: true\n    }\n  });\n  Prism.languages.insertBefore('sass', 'atrule', {\n    // We want to consume the whole line\n    'atrule-line': {\n      // Includes support for = and + shortcuts\n      pattern: /^(?:[ \\t]*)[@+=].+/m,\n      inside: {\n        'atrule': /(?:@[\\w-]+|[+=])/m\n      }\n    }\n  });\n  delete Prism.languages.sass.atrule;\n  var variable = /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/;\n  var operator = [/[+*\\/%]|[=!]=|<=?|>=?|\\b(?:and|or|not)\\b/, {\n    pattern: /(\\s+)-(?=\\s)/,\n    lookbehind: true\n  }];\n  Prism.languages.insertBefore('sass', 'property', {\n    // We want to consume the whole line\n    'variable-line': {\n      pattern: /^[ \\t]*\\$.+/m,\n      inside: {\n        'punctuation': /:/,\n        'variable': variable,\n        'operator': operator\n      }\n    },\n    // We want to consume the whole line\n    'property-line': {\n      pattern: /^[ \\t]*(?:[^:\\s]+ *:.*|:[^:\\s]+.*)/m,\n      inside: {\n        'property': [/[^:\\s]+(?=\\s*:)/, {\n          pattern: /(:)[^:\\s]+/,\n          lookbehind: true\n        }],\n        'punctuation': /:/,\n        'variable': variable,\n        'operator': operator,\n        'important': Prism.languages.sass.important\n      }\n    }\n  });\n  delete Prism.languages.sass.property;\n  delete Prism.languages.sass.important; // Now that whole lines for other patterns are consumed,\n  // what's left should be selectors\n\n  delete Prism.languages.sass.selector;\n  Prism.languages.insertBefore('sass', 'punctuation', {\n    'selector': {\n      pattern: /([ \\t]*)\\S(?:,?[^,\\r\\n]+)*(?:,(?:\\r?\\n|\\r)\\1[ \\t]+\\S(?:,?[^,\\r\\n]+)*)*/,\n      lookbehind: true\n    }\n  });\n})(Prism);\n/* \"prismjs/components/prism-scss\" */\n\n\nPrism.languages.scss = Prism.languages.extend('css', {\n  'comment': {\n    pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n    lookbehind: true\n  },\n  'atrule': {\n    pattern: /@[\\w-]+(?:\\([^()]+\\)|[^(])*?(?=\\s+[{;])/,\n    inside: {\n      'rule': /@[\\w-]+/ // See rest below\n\n    }\n  },\n  // url, compassified\n  'url': /(?:[-a-z]+-)*url(?=\\()/i,\n  // CSS selector regex is not appropriate for Sass\n  // since there can be lot more things (var, @ directive, nesting..)\n  // a selector must start at the end of a property or after a brace (end of other rules or nesting)\n  // it can contain some characters that aren't used for defining rules or end of selector, & (parent selector), or interpolated variable\n  // the end of a selector is found when there is no rules in it ( {} or {\\s}) or if there is a property (because an interpolated var\n  // can \"pass\" as a selector- e.g: proper#{$erty})\n  // this one was hard to do, so please be careful if you edit this one :)\n  'selector': {\n    // Initial look-ahead is used to prevent matching of blank selectors\n    pattern: /(?=\\S)[^@;{}()]?(?:[^@;{}()]|&|#\\{\\$[-\\w]+\\})+(?=\\s*\\{(?:\\}|\\s|[^}]+[:{][^}]+))/m,\n    inside: {\n      'parent': {\n        pattern: /&/,\n        alias: 'important'\n      },\n      'placeholder': /%[-\\w]+/,\n      'variable': /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n    }\n  }\n});\nPrism.languages.insertBefore('scss', 'atrule', {\n  'keyword': [/@(?:if|else(?: if)?|for|each|while|import|extend|debug|warn|mixin|include|function|return|content)/i, {\n    pattern: /( +)(?:from|through)(?= )/,\n    lookbehind: true\n  }]\n});\nPrism.languages.scss.property = {\n  pattern: /(?:[\\w-]|\\$[-\\w]+|#\\{\\$[-\\w]+\\})+(?=\\s*:)/i,\n  inside: {\n    'variable': /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n  }\n};\nPrism.languages.insertBefore('scss', 'important', {\n  // var and interpolated vars\n  'variable': /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n});\nPrism.languages.insertBefore('scss', 'function', {\n  'placeholder': {\n    pattern: /%[-\\w]+/,\n    alias: 'selector'\n  },\n  'statement': {\n    pattern: /\\B!(?:default|optional)\\b/i,\n    alias: 'keyword'\n  },\n  'boolean': /\\b(?:true|false)\\b/,\n  'null': /\\bnull\\b/,\n  'operator': {\n    pattern: /(\\s)(?:[-+*\\/%]|[=!]=|<=?|>=?|and|or|not)(?=\\s)/,\n    lookbehind: true\n  }\n});\nPrism.languages.scss['atrule'].inside.rest = Prism.languages.scss;\n/* \"prismjs/components/prism-sql\" */\n\nPrism.languages.sql = {\n  'comment': {\n    pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|(?:--|\\/\\/|#).*)/,\n    lookbehind: true\n  },\n  'string': {\n    pattern: /(^|[^@\\\\])(\"|')(?:\\\\[\\s\\S]|(?!\\2)[^\\\\])*\\2/,\n    greedy: true,\n    lookbehind: true\n  },\n  'variable': /@[\\w.$]+|@([\"'`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1/,\n  'function': /\\b(?:AVG|COUNT|FIRST|FORMAT|LAST|LCASE|LEN|MAX|MID|MIN|MOD|NOW|ROUND|SUM|UCASE)(?=\\s*\\()/i,\n  // Should we highlight user defined functions too?\n  'keyword': /\\b(?:ACTION|ADD|AFTER|ALGORITHM|ALL|ALTER|ANALYZE|ANY|APPLY|AS|ASC|AUTHORIZATION|AUTO_INCREMENT|BACKUP|BDB|BEGIN|BERKELEYDB|BIGINT|BINARY|BIT|BLOB|BOOL|BOOLEAN|BREAK|BROWSE|BTREE|BULK|BY|CALL|CASCADED?|CASE|CHAIN|CHAR(?:ACTER|SET)?|CHECK(?:POINT)?|CLOSE|CLUSTERED|COALESCE|COLLATE|COLUMNS?|COMMENT|COMMIT(?:TED)?|COMPUTE|CONNECT|CONSISTENT|CONSTRAINT|CONTAINS(?:TABLE)?|CONTINUE|CONVERT|CREATE|CROSS|CURRENT(?:_DATE|_TIME|_TIMESTAMP|_USER)?|CURSOR|CYCLE|DATA(?:BASES?)?|DATE(?:TIME)?|DAY|DBCC|DEALLOCATE|DEC|DECIMAL|DECLARE|DEFAULT|DEFINER|DELAYED|DELETE|DELIMITERS?|DENY|DESC|DESCRIBE|DETERMINISTIC|DISABLE|DISCARD|DISK|DISTINCT|DISTINCTROW|DISTRIBUTED|DO|DOUBLE|DROP|DUMMY|DUMP(?:FILE)?|DUPLICATE|ELSE(?:IF)?|ENABLE|ENCLOSED|END|ENGINE|ENUM|ERRLVL|ERRORS|ESCAPED?|EXCEPT|EXEC(?:UTE)?|EXISTS|EXIT|EXPLAIN|EXTENDED|FETCH|FIELDS|FILE|FILLFACTOR|FIRST|FIXED|FLOAT|FOLLOWING|FOR(?: EACH ROW)?|FORCE|FOREIGN|FREETEXT(?:TABLE)?|FROM|FULL|FUNCTION|GEOMETRY(?:COLLECTION)?|GLOBAL|GOTO|GRANT|GROUP|HANDLER|HASH|HAVING|HOLDLOCK|HOUR|IDENTITY(?:_INSERT|COL)?|IF|IGNORE|IMPORT|INDEX|INFILE|INNER|INNODB|INOUT|INSERT|INT|INTEGER|INTERSECT|INTERVAL|INTO|INVOKER|ISOLATION|ITERATE|JOIN|KEYS?|KILL|LANGUAGE|LAST|LEAVE|LEFT|LEVEL|LIMIT|LINENO|LINES|LINESTRING|LOAD|LOCAL|LOCK|LONG(?:BLOB|TEXT)|LOOP|MATCH(?:ED)?|MEDIUM(?:BLOB|INT|TEXT)|MERGE|MIDDLEINT|MINUTE|MODE|MODIFIES|MODIFY|MONTH|MULTI(?:LINESTRING|POINT|POLYGON)|NATIONAL|NATURAL|NCHAR|NEXT|NO|NONCLUSTERED|NULLIF|NUMERIC|OFF?|OFFSETS?|ON|OPEN(?:DATASOURCE|QUERY|ROWSET)?|OPTIMIZE|OPTION(?:ALLY)?|ORDER|OUT(?:ER|FILE)?|OVER|PARTIAL|PARTITION|PERCENT|PIVOT|PLAN|POINT|POLYGON|PRECEDING|PRECISION|PREPARE|PREV|PRIMARY|PRINT|PRIVILEGES|PROC(?:EDURE)?|PUBLIC|PURGE|QUICK|RAISERROR|READS?|REAL|RECONFIGURE|REFERENCES|RELEASE|RENAME|REPEAT(?:ABLE)?|REPLACE|REPLICATION|REQUIRE|RESIGNAL|RESTORE|RESTRICT|RETURNS?|REVOKE|RIGHT|ROLLBACK|ROUTINE|ROW(?:COUNT|GUIDCOL|S)?|RTREE|RULE|SAVE(?:POINT)?|SCHEMA|SECOND|SELECT|SERIAL(?:IZABLE)?|SESSION(?:_USER)?|SET(?:USER)?|SHARE|SHOW|SHUTDOWN|SIMPLE|SMALLINT|SNAPSHOT|SOME|SONAME|SQL|START(?:ING)?|STATISTICS|STATUS|STRIPED|SYSTEM_USER|TABLES?|TABLESPACE|TEMP(?:ORARY|TABLE)?|TERMINATED|TEXT(?:SIZE)?|THEN|TIME(?:STAMP)?|TINY(?:BLOB|INT|TEXT)|TOP?|TRAN(?:SACTIONS?)?|TRIGGER|TRUNCATE|TSEQUAL|TYPES?|UNBOUNDED|UNCOMMITTED|UNDEFINED|UNION|UNIQUE|UNLOCK|UNPIVOT|UNSIGNED|UPDATE(?:TEXT)?|USAGE|USE|USER|USING|VALUES?|VAR(?:BINARY|CHAR|CHARACTER|YING)|VIEW|WAITFOR|WARNINGS|WHEN|WHERE|WHILE|WITH(?: ROLLUP|IN)?|WORK|WRITE(?:TEXT)?|YEAR)\\b/i,\n  'boolean': /\\b(?:TRUE|FALSE|NULL)\\b/i,\n  'number': /\\b0x[\\da-f]+\\b|\\b\\d+\\.?\\d*|\\B\\.\\d+\\b/i,\n  'operator': /[-+*\\/=%^~]|&&?|\\|\\|?|!=?|<(?:=>?|<|>)?|>[>=]?|\\b(?:AND|BETWEEN|IN|LIKE|NOT|OR|IS|DIV|REGEXP|RLIKE|SOUNDS LIKE|XOR)\\b/i,\n  'punctuation': /[;[\\]()`,.]/\n};\n/* \"prismjs/components/prism-stylus\" */\n\n(function (Prism) {\n  var inside = {\n    'url': /url\\(([\"']?).*?\\1\\)/i,\n    'string': {\n      pattern: /(\"|')(?:(?!\\1)[^\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\\1/,\n      greedy: true\n    },\n    'interpolation': null,\n    // See below\n    'func': null,\n    // See below\n    'important': /\\B!(?:important|optional)\\b/i,\n    'keyword': {\n      pattern: /(^|\\s+)(?:(?:if|else|for|return|unless)(?=\\s+|$)|@[\\w-]+)/,\n      lookbehind: true\n    },\n    'hexcode': /#[\\da-f]{3,6}/i,\n    'number': /\\b\\d+(?:\\.\\d+)?%?/,\n    'boolean': /\\b(?:true|false)\\b/,\n    'operator': [// We want non-word chars around \"-\" because it is\n    // accepted in property names.\n    /~|[+!\\/%<>?=]=?|[-:]=|\\*[*=]?|\\.+|&&|\\|\\||\\B-\\B|\\b(?:and|in|is(?: a| defined| not|nt)?|not|or)\\b/],\n    'punctuation': /[{}()\\[\\];:,]/\n  };\n  inside['interpolation'] = {\n    pattern: /\\{[^\\r\\n}:]+\\}/,\n    alias: 'variable',\n    inside: {\n      'delimiter': {\n        pattern: /^{|}$/,\n        alias: 'punctuation'\n      },\n      rest: inside\n    }\n  };\n  inside['func'] = {\n    pattern: /[\\w-]+\\([^)]*\\).*/,\n    inside: {\n      'function': /^[^(]+/,\n      rest: inside\n    }\n  };\n  Prism.languages.stylus = {\n    'comment': {\n      pattern: /(^|[^\\\\])(\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n      lookbehind: true\n    },\n    'atrule-declaration': {\n      pattern: /(^\\s*)@.+/m,\n      lookbehind: true,\n      inside: {\n        'atrule': /^@[\\w-]+/,\n        rest: inside\n      }\n    },\n    'variable-declaration': {\n      pattern: /(^[ \\t]*)[\\w$-]+\\s*.?=[ \\t]*(?:(?:\\{[^}]*\\}|.+)|$)/m,\n      lookbehind: true,\n      inside: {\n        'variable': /^\\S+/,\n        rest: inside\n      }\n    },\n    'statement': {\n      pattern: /(^[ \\t]*)(?:if|else|for|return|unless)[ \\t]+.+/m,\n      lookbehind: true,\n      inside: {\n        keyword: /^\\S+/,\n        rest: inside\n      }\n    },\n    // A property/value pair cannot end with a comma or a brace\n    // It cannot have indented content unless it ended with a semicolon\n    'property-declaration': {\n      pattern: /((?:^|\\{)([ \\t]*))(?:[\\w-]|\\{[^}\\r\\n]+\\})+(?:\\s*:\\s*|[ \\t]+)[^{\\r\\n]*(?:;|[^{\\r\\n,](?=$)(?!(\\r?\\n|\\r)(?:\\{|\\2[ \\t]+)))/m,\n      lookbehind: true,\n      inside: {\n        'property': {\n          pattern: /^[^\\s:]+/,\n          inside: {\n            'interpolation': inside.interpolation\n          }\n        },\n        rest: inside\n      }\n    },\n    // A selector can contain parentheses only as part of a pseudo-element\n    // It can span multiple lines.\n    // It must end with a comma or an accolade or have indented content.\n    'selector': {\n      pattern: /(^[ \\t]*)(?:(?=\\S)(?:[^{}\\r\\n:()]|::?[\\w-]+(?:\\([^)\\r\\n]*\\))?|\\{[^}\\r\\n]+\\})+)(?:(?:\\r?\\n|\\r)(?:\\1(?:(?=\\S)(?:[^{}\\r\\n:()]|::?[\\w-]+(?:\\([^)\\r\\n]*\\))?|\\{[^}\\r\\n]+\\})+)))*(?:,$|\\{|(?=(?:\\r?\\n|\\r)(?:\\{|\\1[ \\t]+)))/m,\n      lookbehind: true,\n      inside: {\n        'interpolation': inside.interpolation,\n        'punctuation': /[{},]/\n      }\n    },\n    'func': inside.func,\n    'string': inside.string,\n    'interpolation': inside.interpolation,\n    'punctuation': /[{}()\\[\\];:.]/\n  };\n})(Prism);\n/* \"prismjs/components/prism-swift\" */\n// issues: nested multiline comments\n\n\nPrism.languages.swift = Prism.languages.extend('clike', {\n  'string': {\n    pattern: /(\"|')(\\\\(?:\\((?:[^()]|\\([^)]+\\))+\\)|\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: true,\n    inside: {\n      'interpolation': {\n        pattern: /\\\\\\((?:[^()]|\\([^)]+\\))+\\)/,\n        inside: {\n          delimiter: {\n            pattern: /^\\\\\\(|\\)$/,\n            alias: 'variable' // See rest below\n\n          }\n        }\n      }\n    }\n  },\n  'keyword': /\\b(?:as|associativity|break|case|catch|class|continue|convenience|default|defer|deinit|didSet|do|dynamic(?:Type)?|else|enum|extension|fallthrough|final|for|func|get|guard|if|import|in|infix|init|inout|internal|is|lazy|left|let|mutating|new|none|nonmutating|operator|optional|override|postfix|precedence|prefix|private|protocol|public|repeat|required|rethrows|return|right|safe|self|Self|set|static|struct|subscript|super|switch|throws?|try|Type|typealias|unowned|unsafe|var|weak|where|while|willSet|__(?:COLUMN__|FILE__|FUNCTION__|LINE__))\\b/,\n  'number': /\\b(?:[\\d_]+(?:\\.[\\de_]+)?|0x[a-f0-9_]+(?:\\.[a-f0-9p_]+)?|0b[01_]+|0o[0-7_]+)\\b/i,\n  'constant': /\\b(?:nil|[A-Z_]{2,}|k[A-Z][A-Za-z_]+)\\b/,\n  'atrule': /@\\b(?:IB(?:Outlet|Designable|Action|Inspectable)|class_protocol|exported|noreturn|NS(?:Copying|Managed)|objc|UIApplicationMain|auto_closure)\\b/,\n  'builtin': /\\b(?:[A-Z]\\S+|abs|advance|alignof(?:Value)?|assert|contains|count(?:Elements)?|debugPrint(?:ln)?|distance|drop(?:First|Last)|dump|enumerate|equal|filter|find|first|getVaList|indices|isEmpty|join|last|lexicographicalCompare|map|max(?:Element)?|min(?:Element)?|numericCast|overlaps|partition|print(?:ln)?|reduce|reflect|reverse|sizeof(?:Value)?|sort(?:ed)?|split|startsWith|stride(?:of(?:Value)?)?|suffix|swap|toDebugString|toString|transcode|underestimateCount|unsafeBitCast|with(?:ExtendedLifetime|Unsafe(?:MutablePointers?|Pointers?)|VaList))\\b/\n});\nPrism.languages.swift['string'].inside['interpolation'].inside.rest = Prism.languages.swift;\n/* \"prismjs/components/prism-typescript\" */\n\nPrism.languages.typescript = Prism.languages.extend('javascript', {\n  // From JavaScript Prism keyword list and TypeScript language spec: https://github.com/Microsoft/TypeScript/blob/master/doc/spec.md#221-reserved-words\n  'keyword': /\\b(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|var|void|while|with|yield|module|declare|constructor|namespace|abstract|require|type)\\b/,\n  'builtin': /\\b(?:string|Function|any|number|boolean|Array|symbol|console)\\b/\n});\nPrism.languages.ts = Prism.languages.typescript;\n/* \"prismjs/components/prism-vim\" */\n\nPrism.languages.vim = {\n  'string': /\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"|'(?:[^'\\r\\n]|'')*'/,\n  'comment': /\".*/,\n  'function': /\\w+(?=\\()/,\n  'keyword': /\\b(?:ab|abbreviate|abc|abclear|abo|aboveleft|al|all|arga|argadd|argd|argdelete|argdo|arge|argedit|argg|argglobal|argl|arglocal|ar|args|argu|argument|as|ascii|bad|badd|ba|ball|bd|bdelete|be|bel|belowright|bf|bfirst|bl|blast|bm|bmodified|bn|bnext|bN|bNext|bo|botright|bp|bprevious|brea|break|breaka|breakadd|breakd|breakdel|breakl|breaklist|br|brewind|bro|browse|bufdo|b|buffer|buffers|bun|bunload|bw|bwipeout|ca|cabbrev|cabc|cabclear|caddb|caddbuffer|cad|caddexpr|caddf|caddfile|cal|call|cat|catch|cb|cbuffer|cc|ccl|cclose|cd|ce|center|cex|cexpr|cf|cfile|cfir|cfirst|cgetb|cgetbuffer|cgete|cgetexpr|cg|cgetfile|c|change|changes|chd|chdir|che|checkpath|checkt|checktime|cla|clast|cl|clist|clo|close|cmapc|cmapclear|cnew|cnewer|cn|cnext|cN|cNext|cnf|cnfile|cNfcNfile|cnorea|cnoreabbrev|col|colder|colo|colorscheme|comc|comclear|comp|compiler|conf|confirm|con|continue|cope|copen|co|copy|cpf|cpfile|cp|cprevious|cq|cquit|cr|crewind|cuna|cunabbrev|cu|cunmap|cw|cwindow|debugg|debuggreedy|delc|delcommand|d|delete|delf|delfunction|delm|delmarks|diffg|diffget|diffoff|diffpatch|diffpu|diffput|diffsplit|diffthis|diffu|diffupdate|dig|digraphs|di|display|dj|djump|dl|dlist|dr|drop|ds|dsearch|dsp|dsplit|earlier|echoe|echoerr|echom|echomsg|echon|e|edit|el|else|elsei|elseif|em|emenu|endfo|endfor|endf|endfunction|endfun|en|endif|endt|endtry|endw|endwhile|ene|enew|ex|exi|exit|exu|exusage|f|file|files|filetype|fina|finally|fin|find|fini|finish|fir|first|fix|fixdel|fo|fold|foldc|foldclose|folddoc|folddoclosed|foldd|folddoopen|foldo|foldopen|for|fu|fun|function|go|goto|gr|grep|grepa|grepadd|ha|hardcopy|h|help|helpf|helpfind|helpg|helpgrep|helpt|helptags|hid|hide|his|history|ia|iabbrev|iabc|iabclear|if|ij|ijump|il|ilist|imapc|imapclear|in|inorea|inoreabbrev|isearch|isp|isplit|iuna|iunabbrev|iu|iunmap|j|join|ju|jumps|k|keepalt|keepj|keepjumps|kee|keepmarks|laddb|laddbuffer|lad|laddexpr|laddf|laddfile|lan|language|la|last|later|lb|lbuffer|lc|lcd|lch|lchdir|lcl|lclose|let|left|lefta|leftabove|lex|lexpr|lf|lfile|lfir|lfirst|lgetb|lgetbuffer|lgete|lgetexpr|lg|lgetfile|lgr|lgrep|lgrepa|lgrepadd|lh|lhelpgrep|l|list|ll|lla|llast|lli|llist|lmak|lmake|lm|lmap|lmapc|lmapclear|lnew|lnewer|lne|lnext|lN|lNext|lnf|lnfile|lNf|lNfile|ln|lnoremap|lo|loadview|loc|lockmarks|lockv|lockvar|lol|lolder|lop|lopen|lpf|lpfile|lp|lprevious|lr|lrewind|ls|lt|ltag|lu|lunmap|lv|lvimgrep|lvimgrepa|lvimgrepadd|lw|lwindow|mak|make|ma|mark|marks|mat|match|menut|menutranslate|mk|mkexrc|mks|mksession|mksp|mkspell|mkvie|mkview|mkv|mkvimrc|mod|mode|m|move|mzf|mzfile|mz|mzscheme|nbkey|new|n|next|N|Next|nmapc|nmapclear|noh|nohlsearch|norea|noreabbrev|nu|number|nun|nunmap|omapc|omapclear|on|only|o|open|opt|options|ou|ounmap|pc|pclose|ped|pedit|pe|perl|perld|perldo|po|pop|popu|popup|pp|ppop|pre|preserve|prev|previous|p|print|P|Print|profd|profdel|prof|profile|promptf|promptfind|promptr|promptrepl|ps|psearch|pta|ptag|ptf|ptfirst|ptj|ptjump|ptl|ptlast|ptn|ptnext|ptN|ptNext|ptp|ptprevious|ptr|ptrewind|pts|ptselect|pu|put|pw|pwd|pyf|pyfile|py|python|qa|qall|q|quit|quita|quitall|r|read|rec|recover|redi|redir|red|redo|redr|redraw|redraws|redrawstatus|reg|registers|res|resize|ret|retab|retu|return|rew|rewind|ri|right|rightb|rightbelow|rub|ruby|rubyd|rubydo|rubyf|rubyfile|ru|runtime|rv|rviminfo|sal|sall|san|sandbox|sa|sargument|sav|saveas|sba|sball|sbf|sbfirst|sbl|sblast|sbm|sbmodified|sbn|sbnext|sbN|sbNext|sbp|sbprevious|sbr|sbrewind|sb|sbuffer|scripte|scriptencoding|scrip|scriptnames|se|set|setf|setfiletype|setg|setglobal|setl|setlocal|sf|sfind|sfir|sfirst|sh|shell|sign|sil|silent|sim|simalt|sla|slast|sl|sleep|sm|smagic|sm|smap|smapc|smapclear|sme|smenu|sn|snext|sN|sNext|sni|sniff|sno|snomagic|snor|snoremap|snoreme|snoremenu|sor|sort|so|source|spelld|spelldump|spe|spellgood|spelli|spellinfo|spellr|spellrepall|spellu|spellundo|spellw|spellwrong|sp|split|spr|sprevious|sre|srewind|sta|stag|startg|startgreplace|star|startinsert|startr|startreplace|stj|stjump|st|stop|stopi|stopinsert|sts|stselect|sun|sunhide|sunm|sunmap|sus|suspend|sv|sview|syncbind|t|tab|tabc|tabclose|tabd|tabdo|tabe|tabedit|tabf|tabfind|tabfir|tabfirst|tabl|tablast|tabm|tabmove|tabnew|tabn|tabnext|tabN|tabNext|tabo|tabonly|tabp|tabprevious|tabr|tabrewind|tabs|ta|tag|tags|tc|tcl|tcld|tcldo|tclf|tclfile|te|tearoff|tf|tfirst|th|throw|tj|tjump|tl|tlast|tm|tm|tmenu|tn|tnext|tN|tNext|to|topleft|tp|tprevious|tr|trewind|try|ts|tselect|tu|tu|tunmenu|una|unabbreviate|u|undo|undoj|undojoin|undol|undolist|unh|unhide|unlet|unlo|unlockvar|unm|unmap|up|update|verb|verbose|ve|version|vert|vertical|vie|view|vim|vimgrep|vimgrepa|vimgrepadd|vi|visual|viu|viusage|vmapc|vmapclear|vne|vnew|vs|vsplit|vu|vunmap|wa|wall|wh|while|winc|wincmd|windo|winp|winpos|win|winsize|wn|wnext|wN|wNext|wp|wprevious|wq|wqa|wqall|w|write|ws|wsverb|wv|wviminfo|X|xa|xall|x|xit|xm|xmap|xmapc|xmapclear|xme|xmenu|XMLent|XMLns|xn|xnoremap|xnoreme|xnoremenu|xu|xunmap|y|yank)\\b/,\n  'builtin': /\\b(?:autocmd|acd|ai|akm|aleph|allowrevins|altkeymap|ambiwidth|ambw|anti|antialias|arab|arabic|arabicshape|ari|arshape|autochdir|autoindent|autoread|autowrite|autowriteall|aw|awa|background|backspace|backup|backupcopy|backupdir|backupext|backupskip|balloondelay|ballooneval|balloonexpr|bdir|bdlay|beval|bex|bexpr|bg|bh|bin|binary|biosk|bioskey|bk|bkc|bomb|breakat|brk|browsedir|bs|bsdir|bsk|bt|bufhidden|buflisted|buftype|casemap|ccv|cdpath|cedit|cfu|ch|charconvert|ci|cin|cindent|cink|cinkeys|cino|cinoptions|cinw|cinwords|clipboard|cmdheight|cmdwinheight|cmp|cms|columns|com|comments|commentstring|compatible|complete|completefunc|completeopt|consk|conskey|copyindent|cot|cpo|cpoptions|cpt|cscopepathcomp|cscopeprg|cscopequickfix|cscopetag|cscopetagorder|cscopeverbose|cspc|csprg|csqf|cst|csto|csverb|cuc|cul|cursorcolumn|cursorline|cwh|debug|deco|def|define|delcombine|dex|dg|dict|dictionary|diff|diffexpr|diffopt|digraph|dip|dir|directory|dy|ea|ead|eadirection|eb|ed|edcompatible|ef|efm|ei|ek|enc|encoding|endofline|eol|ep|equalalways|equalprg|errorbells|errorfile|errorformat|esckeys|et|eventignore|expandtab|exrc|fcl|fcs|fdc|fde|fdi|fdl|fdls|fdm|fdn|fdo|fdt|fen|fenc|fencs|fex|ff|ffs|fileencoding|fileencodings|fileformat|fileformats|fillchars|fk|fkmap|flp|fml|fmr|foldcolumn|foldenable|foldexpr|foldignore|foldlevel|foldlevelstart|foldmarker|foldmethod|foldminlines|foldnestmax|foldtext|formatexpr|formatlistpat|formatoptions|formatprg|fp|fs|fsync|ft|gcr|gd|gdefault|gfm|gfn|gfs|gfw|ghr|gp|grepformat|grepprg|gtl|gtt|guicursor|guifont|guifontset|guifontwide|guiheadroom|guioptions|guipty|guitablabel|guitabtooltip|helpfile|helpheight|helplang|hf|hh|hi|hidden|highlight|hk|hkmap|hkmapp|hkp|hl|hlg|hls|hlsearch|ic|icon|iconstring|ignorecase|im|imactivatekey|imak|imc|imcmdline|imd|imdisable|imi|iminsert|ims|imsearch|inc|include|includeexpr|incsearch|inde|indentexpr|indentkeys|indk|inex|inf|infercase|insertmode|isf|isfname|isi|isident|isk|iskeyword|isprint|joinspaces|js|key|keymap|keymodel|keywordprg|km|kmp|kp|langmap|langmenu|laststatus|lazyredraw|lbr|lcs|linebreak|lines|linespace|lisp|lispwords|listchars|loadplugins|lpl|lsp|lz|macatsui|magic|makeef|makeprg|matchpairs|matchtime|maxcombine|maxfuncdepth|maxmapdepth|maxmem|maxmempattern|maxmemtot|mco|mef|menuitems|mfd|mh|mis|mkspellmem|ml|mls|mm|mmd|mmp|mmt|modeline|modelines|modifiable|modified|more|mouse|mousef|mousefocus|mousehide|mousem|mousemodel|mouses|mouseshape|mouset|mousetime|mp|mps|msm|mzq|mzquantum|nf|nrformats|numberwidth|nuw|odev|oft|ofu|omnifunc|opendevice|operatorfunc|opfunc|osfiletype|pa|para|paragraphs|paste|pastetoggle|patchexpr|patchmode|path|pdev|penc|pex|pexpr|pfn|ph|pheader|pi|pm|pmbcs|pmbfn|popt|preserveindent|previewheight|previewwindow|printdevice|printencoding|printexpr|printfont|printheader|printmbcharset|printmbfont|printoptions|prompt|pt|pumheight|pvh|pvw|qe|quoteescape|readonly|remap|report|restorescreen|revins|rightleft|rightleftcmd|rl|rlc|ro|rs|rtp|ruf|ruler|rulerformat|runtimepath|sbo|sc|scb|scr|scroll|scrollbind|scrolljump|scrolloff|scrollopt|scs|sect|sections|secure|sel|selection|selectmode|sessionoptions|sft|shcf|shellcmdflag|shellpipe|shellquote|shellredir|shellslash|shelltemp|shelltype|shellxquote|shiftround|shiftwidth|shm|shortmess|shortname|showbreak|showcmd|showfulltag|showmatch|showmode|showtabline|shq|si|sidescroll|sidescrolloff|siso|sj|slm|smartcase|smartindent|smarttab|smc|smd|softtabstop|sol|spc|spell|spellcapcheck|spellfile|spelllang|spellsuggest|spf|spl|splitbelow|splitright|sps|sr|srr|ss|ssl|ssop|stal|startofline|statusline|stl|stmp|su|sua|suffixes|suffixesadd|sw|swapfile|swapsync|swb|swf|switchbuf|sws|sxq|syn|synmaxcol|syntax|tabline|tabpagemax|tabstop|tagbsearch|taglength|tagrelative|tagstack|tal|tb|tbi|tbidi|tbis|tbs|tenc|term|termbidi|termencoding|terse|textauto|textmode|textwidth|tgst|thesaurus|tildeop|timeout|timeoutlen|title|titlelen|titleold|titlestring|toolbar|toolbariconsize|top|tpm|tsl|tsr|ttimeout|ttimeoutlen|ttm|tty|ttybuiltin|ttyfast|ttym|ttymouse|ttyscroll|ttytype|tw|tx|uc|ul|undolevels|updatecount|updatetime|ut|vb|vbs|vdir|verbosefile|vfile|viewdir|viewoptions|viminfo|virtualedit|visualbell|vop|wak|warn|wb|wc|wcm|wd|weirdinvert|wfh|wfw|whichwrap|wi|wig|wildchar|wildcharm|wildignore|wildmenu|wildmode|wildoptions|wim|winaltkeys|window|winfixheight|winfixwidth|winheight|winminheight|winminwidth|winwidth|wiv|wiw|wm|wmh|wmnu|wmw|wop|wrap|wrapmargin|wrapscan|writeany|writebackup|writedelay|ww|noacd|noai|noakm|noallowrevins|noaltkeymap|noanti|noantialias|noar|noarab|noarabic|noarabicshape|noari|noarshape|noautochdir|noautoindent|noautoread|noautowrite|noautowriteall|noaw|noawa|nobackup|noballooneval|nobeval|nobin|nobinary|nobiosk|nobioskey|nobk|nobl|nobomb|nobuflisted|nocf|noci|nocin|nocindent|nocompatible|noconfirm|noconsk|noconskey|nocopyindent|nocp|nocscopetag|nocscopeverbose|nocst|nocsverb|nocuc|nocul|nocursorcolumn|nocursorline|nodeco|nodelcombine|nodg|nodiff|nodigraph|nodisable|noea|noeb|noed|noedcompatible|noek|noendofline|noeol|noequalalways|noerrorbells|noesckeys|noet|noex|noexpandtab|noexrc|nofen|nofk|nofkmap|nofoldenable|nogd|nogdefault|noguipty|nohid|nohidden|nohk|nohkmap|nohkmapp|nohkp|nohls|noic|noicon|noignorecase|noim|noimc|noimcmdline|noimd|noincsearch|noinf|noinfercase|noinsertmode|nois|nojoinspaces|nojs|nolazyredraw|nolbr|nolinebreak|nolisp|nolist|noloadplugins|nolpl|nolz|noma|nomacatsui|nomagic|nomh|noml|nomod|nomodeline|nomodifiable|nomodified|nomore|nomousef|nomousefocus|nomousehide|nonu|nonumber|noodev|noopendevice|nopaste|nopi|nopreserveindent|nopreviewwindow|noprompt|nopvw|noreadonly|noremap|norestorescreen|norevins|nori|norightleft|norightleftcmd|norl|norlc|noro|nors|noru|noruler|nosb|nosc|noscb|noscrollbind|noscs|nosecure|nosft|noshellslash|noshelltemp|noshiftround|noshortname|noshowcmd|noshowfulltag|noshowmatch|noshowmode|nosi|nosm|nosmartcase|nosmartindent|nosmarttab|nosmd|nosn|nosol|nospell|nosplitbelow|nosplitright|nospr|nosr|nossl|nosta|nostartofline|nostmp|noswapfile|noswf|nota|notagbsearch|notagrelative|notagstack|notbi|notbidi|notbs|notermbidi|noterse|notextauto|notextmode|notf|notgst|notildeop|notimeout|notitle|noto|notop|notr|nottimeout|nottybuiltin|nottyfast|notx|novb|novisualbell|nowa|nowarn|nowb|noweirdinvert|nowfh|nowfw|nowildmenu|nowinfixheight|nowinfixwidth|nowiv|nowmnu|nowrap|nowrapscan|nowrite|nowriteany|nowritebackup|nows|invacd|invai|invakm|invallowrevins|invaltkeymap|invanti|invantialias|invar|invarab|invarabic|invarabicshape|invari|invarshape|invautochdir|invautoindent|invautoread|invautowrite|invautowriteall|invaw|invawa|invbackup|invballooneval|invbeval|invbin|invbinary|invbiosk|invbioskey|invbk|invbl|invbomb|invbuflisted|invcf|invci|invcin|invcindent|invcompatible|invconfirm|invconsk|invconskey|invcopyindent|invcp|invcscopetag|invcscopeverbose|invcst|invcsverb|invcuc|invcul|invcursorcolumn|invcursorline|invdeco|invdelcombine|invdg|invdiff|invdigraph|invdisable|invea|inveb|inved|invedcompatible|invek|invendofline|inveol|invequalalways|inverrorbells|invesckeys|invet|invex|invexpandtab|invexrc|invfen|invfk|invfkmap|invfoldenable|invgd|invgdefault|invguipty|invhid|invhidden|invhk|invhkmap|invhkmapp|invhkp|invhls|invhlsearch|invic|invicon|invignorecase|invim|invimc|invimcmdline|invimd|invincsearch|invinf|invinfercase|invinsertmode|invis|invjoinspaces|invjs|invlazyredraw|invlbr|invlinebreak|invlisp|invlist|invloadplugins|invlpl|invlz|invma|invmacatsui|invmagic|invmh|invml|invmod|invmodeline|invmodifiable|invmodified|invmore|invmousef|invmousefocus|invmousehide|invnu|invnumber|invodev|invopendevice|invpaste|invpi|invpreserveindent|invpreviewwindow|invprompt|invpvw|invreadonly|invremap|invrestorescreen|invrevins|invri|invrightleft|invrightleftcmd|invrl|invrlc|invro|invrs|invru|invruler|invsb|invsc|invscb|invscrollbind|invscs|invsecure|invsft|invshellslash|invshelltemp|invshiftround|invshortname|invshowcmd|invshowfulltag|invshowmatch|invshowmode|invsi|invsm|invsmartcase|invsmartindent|invsmarttab|invsmd|invsn|invsol|invspell|invsplitbelow|invsplitright|invspr|invsr|invssl|invsta|invstartofline|invstmp|invswapfile|invswf|invta|invtagbsearch|invtagrelative|invtagstack|invtbi|invtbidi|invtbs|invtermbidi|invterse|invtextauto|invtextmode|invtf|invtgst|invtildeop|invtimeout|invtitle|invto|invtop|invtr|invttimeout|invttybuiltin|invttyfast|invtx|invvb|invvisualbell|invwa|invwarn|invwb|invweirdinvert|invwfh|invwfw|invwildmenu|invwinfixheight|invwinfixwidth|invwiv|invwmnu|invwrap|invwrapscan|invwrite|invwriteany|invwritebackup|invws|t_AB|t_AF|t_al|t_AL|t_bc|t_cd|t_ce|t_Ce|t_cl|t_cm|t_Co|t_cs|t_Cs|t_CS|t_CV|t_da|t_db|t_dl|t_DL|t_EI|t_F1|t_F2|t_F3|t_F4|t_F5|t_F6|t_F7|t_F8|t_F9|t_fs|t_IE|t_IS|t_k1|t_K1|t_k2|t_k3|t_K3|t_k4|t_K4|t_k5|t_K5|t_k6|t_K6|t_k7|t_K7|t_k8|t_K8|t_k9|t_K9|t_KA|t_kb|t_kB|t_KB|t_KC|t_kd|t_kD|t_KD|t_ke|t_KE|t_KF|t_KG|t_kh|t_KH|t_kI|t_KI|t_KJ|t_KK|t_kl|t_KL|t_kN|t_kP|t_kr|t_ks|t_ku|t_le|t_mb|t_md|t_me|t_mr|t_ms|t_nd|t_op|t_RI|t_RV|t_Sb|t_se|t_Sf|t_SI|t_so|t_sr|t_te|t_ti|t_ts|t_ue|t_us|t_ut|t_vb|t_ve|t_vi|t_vs|t_WP|t_WS|t_xs|t_ZH|t_ZR)\\b/,\n  'number': /\\b(?:0x[\\da-f]+|\\d+(?:\\.\\d+)?)\\b/i,\n  'operator': /\\|\\||&&|[-+.]=?|[=!](?:[=~][#?]?)?|[<>]=?[#?]?|[*\\/%?]|\\b(?:is(?:not)?)\\b/,\n  'punctuation': /[{}[\\](),;:]/\n};\n/* \"prismjs/components/prism-yaml\" */\n\nPrism.languages.yaml = {\n  'scalar': {\n    pattern: /([\\-:]\\s*(?:![^\\s]+)?[ \\t]*[|>])[ \\t]*(?:((?:\\r?\\n|\\r)[ \\t]+)[^\\r\\n]+(?:\\2[^\\r\\n]+)*)/,\n    lookbehind: true,\n    alias: 'string'\n  },\n  'comment': /#.*/,\n  'key': {\n    pattern: /(\\s*(?:^|[:\\-,[{\\r\\n?])[ \\t]*(?:![^\\s]+)?[ \\t]*)[^\\r\\n{[\\]},#\\s]+?(?=\\s*:\\s)/,\n    lookbehind: true,\n    alias: 'atrule'\n  },\n  'directive': {\n    pattern: /(^[ \\t]*)%.+/m,\n    lookbehind: true,\n    alias: 'important'\n  },\n  'datetime': {\n    pattern: /([:\\-,[{]\\s*(?:![^\\s]+)?[ \\t]*)(?:\\d{4}-\\d\\d?-\\d\\d?(?:[tT]|[ \\t]+)\\d\\d?:\\d{2}:\\d{2}(?:\\.\\d*)?[ \\t]*(?:Z|[-+]\\d\\d?(?::\\d{2})?)?|\\d{4}-\\d{2}-\\d{2}|\\d\\d?:\\d{2}(?::\\d{2}(?:\\.\\d*)?)?)(?=[ \\t]*(?:$|,|]|}))/m,\n    lookbehind: true,\n    alias: 'number'\n  },\n  'boolean': {\n    pattern: /([:\\-,[{]\\s*(?:![^\\s]+)?[ \\t]*)(?:true|false)[ \\t]*(?=$|,|]|})/im,\n    lookbehind: true,\n    alias: 'important'\n  },\n  'null': {\n    pattern: /([:\\-,[{]\\s*(?:![^\\s]+)?[ \\t]*)(?:null|~)[ \\t]*(?=$|,|]|})/im,\n    lookbehind: true,\n    alias: 'important'\n  },\n  'string': {\n    pattern: /([:\\-,[{]\\s*(?:![^\\s]+)?[ \\t]*)(\"|')(?:(?!\\2)[^\\\\\\r\\n]|\\\\.)*\\2(?=[ \\t]*(?:$|,|]|}))/m,\n    lookbehind: true,\n    greedy: true\n  },\n  'number': {\n    pattern: /([:\\-,[{]\\s*(?:![^\\s]+)?[ \\t]*)[+-]?(?:0x[\\da-f]+|0o[0-7]+|(?:\\d+\\.?\\d*|\\.?\\d+)(?:e[+-]?\\d+)?|\\.inf|\\.nan)[ \\t]*(?=$|,|]|})/im,\n    lookbehind: true\n  },\n  'tag': /![^\\s]+/,\n  'important': /[&*][\\w]+/,\n  'punctuation': /---|[:[\\]{}\\-,|>?]|\\.\\.\\./\n};\nexport default Prism;","import Prism from './vendor/prism';\nimport theme from '../themes/duotoneDark';\nvar defaultProps = {\n  // $FlowFixMe\n  Prism: Prism,\n  theme: theme\n};\nexport default defaultProps;","var newlineRe = /\\r\\n|\\r|\\n/; // Empty lines need to contain a single empty token, denoted with { empty: true }\n\nvar normalizeEmptyLines = function normalizeEmptyLines(line) {\n  if (line.length === 0) {\n    line.push({\n      types: [\"plain\"],\n      content: \"\",\n      empty: true\n    });\n  } else if (line.length === 1 && line[0].content === \"\") {\n    line[0].empty = true;\n  }\n}; // Takes an array of Prism's tokens and groups them by line, turning plain\n// strings into tokens as well. Tokens can become recursive in some cases,\n// which means that their types are concatenated. Plain-string tokens however\n// are always of type \"plain\".\n// This is not recursive to avoid exceeding the call-stack limit, since it's unclear\n// how nested Prism's tokens can become\n\n\nvar normalizeTokens = function normalizeTokens(tokens) {\n  var typeArrStack = [[]];\n  var tokenArrStack = [tokens];\n  var tokenArrIndexStack = [0];\n  var tokenArrSizeStack = [tokens.length];\n  var i = 0;\n  var stackIndex = 0;\n  var currentLine = [];\n  var acc = [currentLine];\n\n  while (stackIndex > -1) {\n    while ((i = tokenArrIndexStack[stackIndex]++) < tokenArrSizeStack[stackIndex]) {\n      var content = void 0;\n      var types = typeArrStack[stackIndex];\n      var tokenArr = tokenArrStack[stackIndex];\n      var token = tokenArr[i]; // Determine content and append type to types if necessary\n\n      if (typeof token === \"string\") {\n        types = [\"plain\"];\n        content = token;\n      } else {\n        types = types.concat(token.type);\n        content = token.content;\n      } // If token.content is an array, increase the stack depth and repeat this while-loop\n\n\n      if (typeof content !== \"string\") {\n        stackIndex++;\n        typeArrStack.push(types);\n        tokenArrStack.push(content);\n        tokenArrIndexStack.push(0);\n        tokenArrSizeStack.push(content.length);\n        continue;\n      } // Split by newlines\n\n\n      var splitByNewlines = content.split(newlineRe);\n      var newlineCount = splitByNewlines.length;\n      currentLine.push({\n        types: types,\n        content: splitByNewlines[0]\n      }); // Create a new line for each string on a new line\n\n      for (var _i = 1; _i < newlineCount; _i++) {\n        normalizeEmptyLines(currentLine);\n        acc.push(currentLine = []);\n        currentLine.push({\n          types: types,\n          content: splitByNewlines[_i]\n        });\n      }\n    } // Decreate the stack depth\n\n\n    stackIndex--;\n    typeArrStack.pop();\n    tokenArrStack.pop();\n    tokenArrIndexStack.pop();\n    tokenArrSizeStack.pop();\n  }\n\n  normalizeEmptyLines(currentLine);\n  return acc;\n};\n\nexport default normalizeTokens;","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nvar themeToDict = function themeToDict(theme, language) {\n  var plain = theme.plain;\n  var themeDict = theme.styles.reduce(function (acc, themeEntry) {\n    var types = themeEntry.types,\n        languages = themeEntry.languages,\n        style = themeEntry.style;\n\n    if (languages && !languages.includes(language)) {\n      return acc;\n    }\n\n    themeEntry.types.forEach(function (type) {\n      // $FlowFixMe\n      var accStyle = _extends({}, acc[type], style);\n\n      acc[type] = accStyle;\n    });\n    return acc;\n  }, {}); // $FlowFixMe\n\n  themeDict.root = plain; // $FlowFixMe\n\n  themeDict.plain = _extends({}, plain, {\n    backgroundColor: null\n  });\n  return themeDict;\n};\n\nexport default themeToDict;","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n\nimport React, { Component } from \"react\";\nimport normalizeTokens from \"../utils/normalizeTokens\";\nimport themeToDict from \"../utils/themeToDict\";\n\nvar Highlight =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(Highlight, _Component);\n\n  function Highlight(props) {\n    var _this;\n\n    _this = _Component.call(this, props) || this;\n    _this.themeDict = void 0;\n\n    _this.getLineProps = function (_ref) {\n      var key = _ref.key,\n          className = _ref.className,\n          style = _ref.style,\n          line = _ref.line,\n          rest = _objectWithoutPropertiesLoose(_ref, [\"key\", \"className\", \"style\", \"line\"]);\n\n      var output = _extends({}, rest, {\n        className: \"token-line\",\n        style: undefined,\n        key: undefined\n      });\n\n      if (_this.themeDict !== undefined) {\n        output.style = _this.themeDict.plain;\n      }\n\n      if (style !== undefined) {\n        output.style = output.style !== undefined ? _extends({}, output.style, style) : style;\n      }\n\n      if (key !== undefined) output.key = key;\n      if (className) output.className += \" \" + className;\n      return output;\n    };\n\n    _this.getStyleForToken = function (_ref2) {\n      var types = _ref2.types,\n          empty = _ref2.empty;\n      var typesSize = types.length;\n\n      if (_this.themeDict === undefined) {\n        return undefined;\n      } else if (typesSize === 1 && types[0] === \"plain\") {\n        return empty ? {\n          display: \"inline-block\"\n        } : undefined;\n      } else if (typesSize === 1 && !empty) {\n        return _this.themeDict[types[0]];\n      }\n\n      var baseStyle = empty ? {\n        display: \"inline-block\"\n      } : {}; // $FlowFixMe\n\n      var typeStyles = types.map(function (type) {\n        return _this.themeDict[type];\n      });\n      return Object.assign.apply(Object, [baseStyle].concat(typeStyles));\n    };\n\n    _this.getTokenProps = function (_ref3) {\n      var key = _ref3.key,\n          className = _ref3.className,\n          style = _ref3.style,\n          token = _ref3.token,\n          rest = _objectWithoutPropertiesLoose(_ref3, [\"key\", \"className\", \"style\", \"token\"]);\n\n      var output = _extends({}, rest, {\n        className: \"token \" + token.types.join(\" \"),\n        children: token.content,\n        style: _this.getStyleForToken(token),\n        key: undefined\n      });\n\n      if (style !== undefined) {\n        output.style = output.style !== undefined ? _extends({}, output.style, style) : style;\n      }\n\n      if (key !== undefined) output.key = key;\n      if (className) output.className += \" \" + className;\n      return output;\n    };\n\n    if (props.theme) {\n      _this.themeDict = themeToDict(props.theme, props.language);\n    }\n\n    return _this;\n  }\n\n  var _proto = Highlight.prototype;\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        Prism = _this$props.Prism,\n        language = _this$props.language,\n        code = _this$props.code,\n        children = _this$props.children;\n    var grammar = Prism.languages[language];\n    var mixedTokens = grammar !== undefined ? Prism.tokenize(code, grammar, language) : [code];\n    var tokens = normalizeTokens(mixedTokens);\n    return children({\n      tokens: tokens,\n      className: \"prism-code language-\" + language,\n      style: this.themeDict ? this.themeDict.root : {},\n      getLineProps: this.getLineProps,\n      getTokenProps: this.getTokenProps\n    });\n  };\n\n  return Highlight;\n}(Component);\n\nexport default Highlight;","import Prism from './vendor/prism';\nimport defaultProps from './defaultProps';\nimport Highlight from './components/Highlight';\nexport { Prism, defaultProps };\nexport default Highlight;","/**\r\n * Prism: Lightweight, robust, elegant syntax highlighting\r\n * MIT license http://www.opensource.org/licenses/mit-license.php/\r\n * @author Lea Verou http://lea.verou.me\r\n */\n\n/**\r\n * prism-react-renderer:\r\n * This file has been modified to remove:\r\n * - globals and window dependency\r\n * - worker support\r\n * - highlightAll and other element dependent methods\r\n * - _.hooks helpers\r\n * - UMD/node-specific hacks\r\n * It has also been run through prettier\r\n */\nvar Prism = function () {\n  // Private helper vars\n  var lang = /\\blang(?:uage)?-([\\w-]+)\\b/i;\n  var uniqueId = 0;\n  var _ = {\n    util: {\n      encode: function encode(tokens) {\n        if (tokens instanceof Token) {\n          return new Token(tokens.type, _.util.encode(tokens.content), tokens.alias);\n        } else if (_.util.type(tokens) === \"Array\") {\n          return tokens.map(_.util.encode);\n        } else {\n          return tokens.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/\\u00a0/g, \" \");\n        }\n      },\n      type: function type(o) {\n        return Object.prototype.toString.call(o).match(/\\[object (\\w+)\\]/)[1];\n      },\n      objId: function objId(obj) {\n        if (!obj[\"__id\"]) {\n          Object.defineProperty(obj, \"__id\", {\n            value: ++uniqueId\n          });\n        }\n\n        return obj[\"__id\"];\n      },\n      // Deep clone a language definition (e.g. to extend it)\n      clone: function clone(o, visited) {\n        var type = _.util.type(o);\n\n        visited = visited || {};\n\n        switch (type) {\n          case \"Object\":\n            if (visited[_.util.objId(o)]) {\n              return visited[_.util.objId(o)];\n            }\n\n            var clone = {};\n            visited[_.util.objId(o)] = clone;\n\n            for (var key in o) {\n              if (o.hasOwnProperty(key)) {\n                clone[key] = _.util.clone(o[key], visited);\n              }\n            }\n\n            return clone;\n\n          case \"Array\":\n            if (visited[_.util.objId(o)]) {\n              return visited[_.util.objId(o)];\n            }\n\n            var clone = [];\n            visited[_.util.objId(o)] = clone;\n            o.forEach(function (v, i) {\n              clone[i] = _.util.clone(v, visited);\n            });\n            return clone;\n        }\n\n        return o;\n      }\n    },\n    languages: {\n      extend: function extend(id, redef) {\n        var lang = _.util.clone(_.languages[id]);\n\n        for (var key in redef) {\n          lang[key] = redef[key];\n        }\n\n        return lang;\n      },\n\n      /**\r\n       * Insert a token before another token in a language literal\r\n       * As this needs to recreate the object (we cannot actually insert before keys in object literals),\r\n       * we cannot just provide an object, we need anobject and a key.\r\n       * @param inside The key (or language id) of the parent\r\n       * @param before The key to insert before. If not provided, the function appends instead.\r\n       * @param insert Object with the key/value pairs to insert\r\n       * @param root The object that contains `inside`. If equal to Prism.languages, it can be omitted.\r\n       */\n      insertBefore: function insertBefore(inside, before, insert, root) {\n        root = root || _.languages;\n        var grammar = root[inside];\n\n        if (arguments.length == 2) {\n          insert = arguments[1];\n\n          for (var newToken in insert) {\n            if (insert.hasOwnProperty(newToken)) {\n              grammar[newToken] = insert[newToken];\n            }\n          }\n\n          return grammar;\n        }\n\n        var ret = {};\n\n        for (var token in grammar) {\n          if (grammar.hasOwnProperty(token)) {\n            if (token == before) {\n              for (var newToken in insert) {\n                if (insert.hasOwnProperty(newToken)) {\n                  ret[newToken] = insert[newToken];\n                }\n              }\n            }\n\n            ret[token] = grammar[token];\n          }\n        } // Update references in other language definitions\n\n\n        _.languages.DFS(_.languages, function (key, value) {\n          if (value === root[inside] && key != inside) {\n            this[key] = ret;\n          }\n        });\n\n        return root[inside] = ret;\n      },\n      // Traverse a language definition with Depth First Search\n      DFS: function DFS(o, callback, type, visited) {\n        visited = visited || {};\n\n        for (var i in o) {\n          if (o.hasOwnProperty(i)) {\n            callback.call(o, i, o[i], type || i);\n\n            if (_.util.type(o[i]) === \"Object\" && !visited[_.util.objId(o[i])]) {\n              visited[_.util.objId(o[i])] = true;\n\n              _.languages.DFS(o[i], callback, null, visited);\n            } else if (_.util.type(o[i]) === \"Array\" && !visited[_.util.objId(o[i])]) {\n              visited[_.util.objId(o[i])] = true;\n\n              _.languages.DFS(o[i], callback, i, visited);\n            }\n          }\n        }\n      }\n    },\n    plugins: {},\n    highlight: function highlight(text, grammar, language) {\n      var env = {\n        code: text,\n        grammar: grammar,\n        language: language\n      };\n      env.tokens = _.tokenize(env.code, env.grammar);\n      return Token.stringify(_.util.encode(env.tokens), env.language);\n    },\n    matchGrammar: function matchGrammar(text, strarr, grammar, index, startPos, oneshot, target) {\n      var Token = _.Token;\n\n      for (var token in grammar) {\n        if (!grammar.hasOwnProperty(token) || !grammar[token]) {\n          continue;\n        }\n\n        if (token == target) {\n          return;\n        }\n\n        var patterns = grammar[token];\n        patterns = _.util.type(patterns) === \"Array\" ? patterns : [patterns];\n\n        for (var j = 0; j < patterns.length; ++j) {\n          var pattern = patterns[j],\n              inside = pattern.inside,\n              lookbehind = !!pattern.lookbehind,\n              greedy = !!pattern.greedy,\n              lookbehindLength = 0,\n              alias = pattern.alias;\n\n          if (greedy && !pattern.pattern.global) {\n            // Without the global flag, lastIndex won't work\n            var flags = pattern.pattern.toString().match(/[imuy]*$/)[0];\n            pattern.pattern = RegExp(pattern.pattern.source, flags + \"g\");\n          }\n\n          pattern = pattern.pattern || pattern; // Don’t cache length as it changes during the loop\n\n          for (var i = index, pos = startPos; i < strarr.length; pos += strarr[i].length, ++i) {\n            var str = strarr[i];\n\n            if (strarr.length > text.length) {\n              // Something went terribly wrong, ABORT, ABORT!\n              return;\n            }\n\n            if (str instanceof Token) {\n              continue;\n            }\n\n            if (greedy && i != strarr.length - 1) {\n              pattern.lastIndex = pos;\n              var match = pattern.exec(text);\n\n              if (!match) {\n                break;\n              }\n\n              var from = match.index + (lookbehind ? match[1].length : 0),\n                  to = match.index + match[0].length,\n                  k = i,\n                  p = pos;\n\n              for (var len = strarr.length; k < len && (p < to || !strarr[k].type && !strarr[k - 1].greedy); ++k) {\n                p += strarr[k].length; // Move the index i to the element in strarr that is closest to from\n\n                if (from >= p) {\n                  ++i;\n                  pos = p;\n                }\n              } // If strarr[i] is a Token, then the match starts inside another Token, which is invalid\n\n\n              if (strarr[i] instanceof Token) {\n                continue;\n              } // Number of tokens to delete and replace with the new match\n\n\n              delNum = k - i;\n              str = text.slice(pos, p);\n              match.index -= pos;\n            } else {\n              pattern.lastIndex = 0;\n              var match = pattern.exec(str),\n                  delNum = 1;\n            }\n\n            if (!match) {\n              if (oneshot) {\n                break;\n              }\n\n              continue;\n            }\n\n            if (lookbehind) {\n              lookbehindLength = match[1] ? match[1].length : 0;\n            }\n\n            var from = match.index + lookbehindLength,\n                match = match[0].slice(lookbehindLength),\n                to = from + match.length,\n                before = str.slice(0, from),\n                after = str.slice(to);\n            var args = [i, delNum];\n\n            if (before) {\n              ++i;\n              pos += before.length;\n              args.push(before);\n            }\n\n            var wrapped = new Token(token, inside ? _.tokenize(match, inside) : match, alias, match, greedy);\n            args.push(wrapped);\n\n            if (after) {\n              args.push(after);\n            }\n\n            Array.prototype.splice.apply(strarr, args);\n            if (delNum != 1) _.matchGrammar(text, strarr, grammar, i, pos, true, token);\n            if (oneshot) break;\n          }\n        }\n      }\n    },\n    hooks: {\n      add: function add() {}\n    },\n    tokenize: function tokenize(text, grammar, language) {\n      var strarr = [text];\n      var rest = grammar.rest;\n\n      if (rest) {\n        for (var token in rest) {\n          grammar[token] = rest[token];\n        }\n\n        delete grammar.rest;\n      }\n\n      _.matchGrammar(text, strarr, grammar, 0, 0, false);\n\n      return strarr;\n    }\n  };\n\n  var Token = _.Token = function (type, content, alias, matchedStr, greedy) {\n    this.type = type;\n    this.content = content;\n    this.alias = alias; // Copy of the full string this token was created from\n\n    this.length = (matchedStr || \"\").length | 0;\n    this.greedy = !!greedy;\n  };\n\n  Token.stringify = function (o, language, parent) {\n    if (typeof o == \"string\") {\n      return o;\n    }\n\n    if (_.util.type(o) === \"Array\") {\n      return o.map(function (element) {\n        return Token.stringify(element, language, o);\n      }).join(\"\");\n    }\n\n    var env = {\n      type: o.type,\n      content: Token.stringify(o.content, language, parent),\n      tag: \"span\",\n      classes: [\"token\", o.type],\n      attributes: {},\n      language: language,\n      parent: parent\n    };\n\n    if (o.alias) {\n      var aliases = _.util.type(o.alias) === \"Array\" ? o.alias : [o.alias];\n      Array.prototype.push.apply(env.classes, aliases);\n    }\n\n    var attributes = Object.keys(env.attributes).map(function (name) {\n      return name + '=\"' + (env.attributes[name] || \"\").replace(/\"/g, \"&quot;\") + '\"';\n    }).join(\" \");\n    return \"<\" + env.tag + ' class=\"' + env.classes.join(\" \") + '\"' + (attributes ? \" \" + attributes : \"\") + \">\" + env.content + \"</\" + env.tag + \">\";\n  };\n\n  return _;\n}();\n\nmodule.exports = Prism;\nPrism.default = Prism;","// @flow\r\n// Duotone Dark\r\n// Author: Simurai, adapted from DuoTone themes for Atom (http://simurai.com/projects/2016/01/01/duotone-themes)\r\n// Conversion: Bram de Haan (http://atelierbram.github.io/Base2Tone-prism/output/prism/prism-base2tone-evening-dark.css)\r\n// Generated with Base16 Builder (https://github.com/base16-builder/base16-builder)\r\n\r\n/*:: import type { PrismTheme } from '../src/types' */\r\n\r\nvar theme /*: PrismTheme */ = {\r\n  plain: {\r\n    backgroundColor: \"#2a2734\",\r\n    color: \"#9a86fd\"\r\n  },\r\n  styles: [\r\n    {\r\n      types: [\"comment\", \"prolog\", \"doctype\", \"cdata\", \"punctuation\"],\r\n      style: {\r\n        color: \"#6c6783\"\r\n      }\r\n    },\r\n    {\r\n      types: [\"namespace\"],\r\n      style: {\r\n        opacity: 0.7\r\n      }\r\n    },\r\n    {\r\n      types: [\"tag\", \"operator\", \"number\"],\r\n      style: {\r\n        color: \"#e09142\"\r\n      }\r\n    },\r\n    {\r\n      types: [\"property\", \"function\"],\r\n      style: {\r\n        color: \"#9a86fd\"\r\n      }\r\n    },\r\n    {\r\n      types: [\"tag-id\", \"selector\", \"atrule-id\"],\r\n      style: {\r\n        color: \"#eeebff\"\r\n      }\r\n    },\r\n    {\r\n      types: [\"attr-name\"],\r\n      style: {\r\n        color: \"#c4b9fe\"\r\n      }\r\n    },\r\n    {\r\n      types: [\r\n        \"boolean\",\r\n        \"string\",\r\n        \"entity\",\r\n        \"url\",\r\n        \"attr-value\",\r\n        \"keyword\",\r\n        \"control\",\r\n        \"directive\",\r\n        \"unit\",\r\n        \"statement\",\r\n        \"regex\",\r\n        \"at-rule\",\r\n        \"placeholder\",\r\n        \"variable\"\r\n      ],\r\n      style: {\r\n        color: \"#ffcc99\"\r\n      }\r\n    },\r\n    {\r\n      types: [\"deleted\"],\r\n      style: {\r\n        textDecorationLine: \"line-through\"\r\n      }\r\n    },\r\n    {\r\n      types: [\"inserted\"],\r\n      style: {\r\n        textDecorationLine: \"underline\"\r\n      }\r\n    },\r\n    {\r\n      types: [\"italic\"],\r\n      style: {\r\n        fontStyle: \"italic\"\r\n      }\r\n    },\r\n    {\r\n      types: [\"important\", \"bold\"],\r\n      style: {\r\n        fontWeight: \"bold\"\r\n      }\r\n    },\r\n    {\r\n      types: [\"important\"],\r\n      style: {\r\n        color: \"#c4b9fe\"\r\n      }\r\n    }\r\n  ]\r\n};\r\n\r\nmodule.exports = theme;\r\n"],"sourceRoot":""}